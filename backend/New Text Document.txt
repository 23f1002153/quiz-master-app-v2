================================================

FILE: README.md

================================================

It is a multi-user app (one requires an administrator and other users) that acts as an exam preparation site for multiple courses.



## Tech Stack: 

        Vue -> Frontend

        Flask -> Backend

        SQLite -> Database

        Redis -> Caching

        Redis & Celery -> Batch Jobs





================================================

FILE: backend/celery_app.py

================================================

from celery import Celery

from celery.schedules import crontab



# Create and configure the Celery instance in one place.

# This ensures the command-line tool can find the configuration.

celery = Celery(

    'quiz-master-app',

    backend='redis://localhost:6379/0',

    broker='redis://localhost:6379/0',

    include=['app.tasks']

)



# Define the schedule for your periodic tasks (Celery Beat)

celery.conf.beat_schedule = {

    'daily-reminder-task': {

        'task': 'app.tasks.send_daily_reminders',

        'schedule': crontab(hour=19, minute=0),

    },

    'monthly-activity-report': {

        'task': 'app.tasks.generate_monthly_report',

        'schedule': crontab(day_of_month=1, hour=8, minute=0),

    },

}



# Set the timezone for accurate scheduling

celery.conf.timezone = 'Asia/Kolkata'



# This function is called by the Flask app factory to bind the Celery

# instance to the Flask application context.

def init_celery(app):

    """Binds a Celery instance to the Flask application context."""

    celery.conf.update(app.config)



    class ContextTask(celery.Task):

        def __call__(self, *args, **kwargs):

            with app.app_context():

                return self.run(*args, **kwargs)



    celery.Task = ContextTask

    return celery







================================================

FILE: backend/celery_worker.py

================================================

# This file is the official entry point for the Celery worker.



from app import create_app



# Create the Flask app instance using your factory.

# This ensures that all extensions, including Celery, are initialized.

flask_app = create_app()



# Get the configured Celery instance from the Flask app object.

# The Celery CLI will look for this 'celery' variable.

celery = flask_app.celery







================================================

FILE: backend/create_db.py

================================================

from app import create_app, db

from datetime import datetime, date

from app.models import User



def create_default_admin():

    admin = User.query.filter_by(role='admin').first()

    if not admin:

        admin = User(

            username='admin',

            email='admin@example.com',

            gender='male',

            dob=date(2003, 11, 20),

            joiningDate=date.today(),

            qualification='Admin',

            college='System',

            last_login=datetime.now(),

            phone=1234567890,

            role='admin'

        )

        

        admin.set_password('admin123')

        db.session.add(admin)

        db.session.commit()



def create_all():

    app = create_app()

    with app.app_context():

        # db.drop_all()

        db.create_all()

        print("Tables created.")

        create_default_admin()



if __name__ == '__main__':

    create_all()







================================================

FILE: backend/requirements.txt

================================================

celery==5.5.3

Flask==3.1.2

Flask_Caching==2.3.1

Flask_Cors==4.0.0

Flask_JWT_Extended==4.7.1

flask_mail==0.10.0

Flask_RESTful==0.3.10

flask_sqlalchemy==3.1.1

python-dotenv==1.1.1

Werkzeug==3.1.3







================================================

FILE: backend/run.py

================================================

from app import create_app

from app import cache

# This is where the Flask app object is actually created.

app = create_app()

# cache.clear()



# This block allows you to run the Flask development server

# by executing "python run.py" in your terminal.

if __name__ == '__main__':

    # The host='0.0.0.0' makes the server accessible on your local network,

    # which is often useful for development.

    app.run(host='0.0.0.0', port=5000, debug=True)









================================================

FILE: backend/app/__init__.py

================================================

from flask import Flask

from flask_cors import CORS

from flask_restful import Api

from app.config import Config

from app.extensions import db, jwt, cache

from app.api import *

from celery_app import init_celery

from flask_mail import Mail





mail = Mail()



def create_app():

    app = Flask(__name__)

    CORS(app)



    # Load configuration from the Config object

    app.config.from_object(Config)



    # Initialize extensions

    db.init_app(app)

    jwt.init_app(app)

    mail.init_app(app)

    cache.init_app(app)



    # Set up the API and register all the routes

    api = Api(app)

    register_auth_routes(api)

    register_user_routes(api)

    register_subject_routes(api)

    register_chapter_routes(api)

    register_quiz_routes(api)

    register_question_routes(api)

    register_option_routes(api)

    register_attempt_routes(api)

    register_job_routes(api)

    

    # Initialize Celery and attach the configured instance to the Flask app object.

    app.celery = init_celery(app)



    return app







================================================

FILE: backend/app/backup_tasks.py

================================================







# # Import the celery instance directly from your celery_app.py file

# from celery_app import celery

# from flask_mail import Message

# # DO NOT import 'mail', 'db', or 'current_app' at the top level of this file.



# @celery.task

# def send_test_email(recipient_email: str):

#     """

#     Sends a simple test email asynchronously.

#     """

#     # THE FIX: Import the 'mail' instance INSIDE the function.

#     # This breaks the circular import because this code only runs when a worker

#     # executes the task, at which point the Flask app is fully initialized.

#     from app import mail



#     print(f"Attempting to send email to {recipient_email}...")

#     try:

#         msg = Message(

#             subject="Hello from Celery!",

#             recipients=[recipient_email],

#             body="This is a test email sent from an asynchronous Celery background task."

#         )

#         mail.send(msg)

#         print(f"Successfully sent email to {recipient_email}")

#         return f"Email successfully sent to {recipient_email}."

#     except Exception as e:

#         print(f"Error sending email: {e}")

#         # Re-raise the exception to mark the task as FAILED in Celery

#         raise e



# @celery.task

# def addition(x, y):

#     """A simple test task that adds two numbers."""

#     result = x + y

#     print(f"Executing task: {x} + {y} = {result}")

#     return result



# # You will apply the same pattern to your other tasks.

# # For example, if a task needs the database, you would do:

# # from app.extensions import db

# # inside that specific task function.









================================================

FILE: backend/app/config.py

================================================

import os

from dotenv import load_dotenv



load_dotenv()

MAIL_USERNAME = os.getenv('MAIL_USERNAME')  # Your email address

MAIL_PASSWORD = os.getenv('MAIL_PASSWORD')  # Your email password or app password



class Config:

    # Base directory for database file

    BASE_DIR = os.path.abspath(os.path.dirname(__file__))



    # SQLite configuration

    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(BASE_DIR, 'database.db')

    SQLALCHEMY_TRACK_MODIFICATIONS = False



    # JWT secret key

    JWT_SECRET_KEY = os.getenv('JWT_SECRET_KEY', 'super-secret-key')  # replace in prod



    # Celery

    celery_broker_url = 'redis://localhost:6379/0'

    celery_result_backend = 'redis://localhost:6379/0'



    MAIL_SERVER = 'smtp.gmail.com'

    MAIL_PORT = 587

    MAIL_USE_TLS = True

    MAIL_USERNAME = MAIL_USERNAME

    MAIL_PASSWORD = MAIL_PASSWORD  # use App Password, not your main password

    MAIL_DEFAULT_SENDER = MAIL_USERNAME



    # --- NEW: Caching Configuration ---

    CACHE_TYPE = 'RedisCache'

    # Use a different database number (e.g., 1) to keep cache separate from Celery

    CACHE_REDIS_URL = 'redis://localhost:6379/1' 

    CACHE_DEFAULT_TIMEOUT = 300 # Default cache expiry in seconds (5 minutes)





================================================

FILE: backend/app/extensions.py

================================================

from flask_sqlalchemy import SQLAlchemy

from flask_jwt_extended import JWTManager

from flask_caching import Cache



db = SQLAlchemy()

jwt = JWTManager()

cache = Cache()





================================================

FILE: backend/app/tasks.py

================================================

# RUN -> celery -A celery_worker.celery worker --loglevel=info -P solo



# Import the celery instance directly from your celery_app.py file

from celery_app import celery

from flask_mail import Message

from datetime import datetime, timedelta

# from app import db

import csv

import os



# ===================================================================

# Task 5a: Daily Reminders

# ===================================================================



@celery.task

def send_daily_reminders():

    """

    Finds users who have been inactive or have new relevant quizzes

    and sends them a reminder notification.

    

    This task is scheduled to run periodically (e.g., every hour or day).

    """

    # Import necessary components inside the task to ensure app context

    from app import mail, create_app

    from app.models import User, Quiz # Assuming you have these models



    app = create_app()

    with app.app_context():

        print("TASK: Running Daily Reminder Check...")



        # --- 1. Fetch Users Who Need Reminders ---

        # This is a placeholder for your database logic.

        # You would query for users who haven't logged in for a certain period.

        # For example, find users whose 'last_login' is more than 2 days ago.

        two_days_ago = datetime.now() - timedelta(days=2)

        inactive_users = User.query.filter((User.last_login > two_days_ago) & (User.role == 'user')).all()

        

        # For demonstration, we'll use a dummy list of users.

        users_to_remind = [

            {'id': 1, 'username': 'Alex', 'email': '23f1002153@ds.study.iitm.ac.in'},

            {'id': 2, 'username': 'Ben', 'email': 'noob.snipy007@gmail.com'},

        ]

        

        # --- 2. Find New Quizzes ---

        # Find quizzes created in the last 24 hours.

        one_day_ago = datetime.now() - timedelta(days=1)

        new_quizzes = Quiz.query.filter(Quiz.created_at > one_day_ago).all()

        

        # For demonstration, use a dummy list.

        # new_quizzes = [

        #     {'name': 'Advanced Calculus', 'subject': 'Mathematics'},

        #     {'name': 'The Periodic Table', 'subject': 'Science'},

        # ]



        if not inactive_users and not new_quizzes:

            print("No inactive users or new quizzes. No reminders sent.")

            return "No reminders needed."



        # --- 3. Send Reminders ---

        for user in inactive_users:

            # You could add logic here to match new quizzes to a user's interests



            reminder_message_body = (

                f"Hi {user.username},\n\n"

                "Just a friendly reminder from QuizMaster! You have some new quizzes waiting for you:\n\n"

            )

            

            for quiz in new_quizzes:

                reminder_message_body += f"- {quiz.name} ({quiz.chapter.subject.name})\n"

                

            reminder_message_body += "\nCome back and test your knowledge!\n\n- The QuizMaster Team"



            try:

                msg = Message(

                    subject="New Quizzes Await on QuizMaster!",

                    recipients=[user.email],

                    body=reminder_message_body

                )

                mail.send(msg)

                print(f"Reminder sent to {user.email}")

            except Exception as e:

                print(f"Failed to send reminder to {user.email}: {e}")



        return f"Daily reminder task complete. Processed {len(inactive_users)} users."



# ===================================================================

# Task 5b: Monthly Activity Report

# ===================================================================



@celery.task

def generate_monthly_report():

    """

    Generates a personalized monthly activity report for all active users

    and sends it via email.

    

    This task is scheduled to run on the first day of every month.

    """

    # Import necessary components inside the task to ensure app context

    from app import mail, create_app

    from app.models import User, Attempt # Assuming you have these models

    from datetime import datetime, timedelta



    app = create_app()

    with app.app_context():

        print("TASK: Starting Monthly Report Generation...")



        # --- 1. Determine the date range for the previous month ---

        

        # --- Logic for Production (Correct way) ---

        # This correctly finds the first and last day of the previous month.

        today = datetime.now()

        first_day_of_current_month = today.replace(day=1, hour=0, minute=0, second=0, microsecond=0)

        last_day_of_previous_month = first_day_of_current_month - timedelta(seconds=1)

        first_day_of_previous_month = last_day_of_previous_month.replace(day=1, hour=0, minute=0, second=0, microsecond=0)



        print(f"Generating report for date range: {first_day_of_previous_month.date()} to {last_day_of_previous_month.date()}")



        # --- 2. Fetch all active users ---

        active_users = User.query.filter_by(role = 'user').all()

        

        print(f"Found {len(active_users)} active users to process.")

        # --- 3. For each user, gather stats and send the report ---

        for user in active_users:

            print(f"Processing report for {user.email}...")

            # Query for the user's attempts within the date range

            monthly_attempts = Attempt.query.filter(

                Attempt.user_id == user.id,

                Attempt.attempted_at.between(first_day_of_previous_month, last_day_of_previous_month)

            ).all()

            

            # Skip users with no activity in the month

            if not monthly_attempts:

                print(f"No attempts found for {user.email} in this period. Skipping.")

                continue



            # --- Logic to calculate stats from the attempts ---

            total_percentage = sum(attempt.to_dict()['percentage'] for attempt in monthly_attempts)

            average_score = round(total_percentage / len(monthly_attempts))



            subject_performance = {}

            for attempt in monthly_attempts:

                subject_name = attempt.to_dict()['subject_name']

                if subject_name not in subject_performance:

                    subject_performance[subject_name] = {'total': 0, 'count': 0}

                subject_performance[subject_name]['total'] += attempt.to_dict()['percentage']

                subject_performance[subject_name]['count'] += 1

            

            best_subject_name = max(subject_performance, key=lambda sub: subject_performance[sub]['total'] / subject_performance[sub]['count']) if subject_performance else 'N/A'

            

            highest_score_attempt = max(monthly_attempts, key=lambda attempt: attempt.to_dict()['percentage'])

            highest_score_quiz_str = f"{highest_score_attempt.to_dict()['quiz_name']} ({highest_score_attempt.to_dict()['percentage']}%)"

            

            monthly_stats = {

                'username': user.username,

                'month_name': first_day_of_previous_month.strftime("%B %Y"),

                'quizzes_taken': len(monthly_attempts),

                'average_score': average_score,

                'best_subject': best_subject_name,

                'highest_score_quiz': highest_score_quiz_str

            }



            print(f"Stats for {user.email}: {monthly_stats}")



            if monthly_stats['quizzes_taken'] > 0:

                try:

                    # Generate the HTML for the email body

                    html_body = create_html_report(monthly_stats)

                    

                    msg = Message(

                        subject=f"Your QuizMaster Report for {monthly_stats['month_name']} is Here!",

                        recipients=[user.email],

                        html=html_body

                    )

                    mail.send(msg)

                    print(f"Monthly report sent to {user.email}")

                except Exception as e:

                    print(f"Failed to send report to {user.email}: {e}")



        return f"Monthly report task complete. Processed {len(active_users)} users."



# ===================================================================

# Task 5c.1: User-Triggered CSV Export

# ===================================================================



@celery.task

def export_user_quiz_history(user_id: int):

    """

    Fetches a user's quiz history, saves it to a temporary public file,

    and sends an email with a download link as an alert.

    """

    # Import necessary components inside the task to ensure app context

    from app import mail, create_app, db

    from app.models import User, Attempt, Quiz # Assuming you have these models



    app = create_app()

    with app.app_context():

        print(f"TASK: Starting CSV export for user_id: {user_id}...")



        # --- 1. Fetch User and Their Quiz History ---

        user = User.query.get(user_id)

        if not user:

            return "User not found."

        

        attempts = db.session.query(

            Attempt, Quiz

        ).join(Quiz, Attempt.quiz_id == Quiz.id).filter(

            Attempt.user_id == user_id

        ).order_by(Attempt.attempted_at.desc()).all()



        if not attempts:

            send_notification_email(user.email, "Your Quiz History Export", "You have no quiz history to export.")

            return "No quiz history to export."



        # --- 2. Create and Save the CSV File ---

        # Ensure a directory exists for temporary exports

        export_dir = os.path.join(app.static_folder, 'exports')

        os.makedirs(export_dir, exist_ok=True)

        

        # Create a unique filename

        timestamp = datetime.utcnow().strftime('%Y%m%d_%H%M%S')

        filename = f"history_{user_id}_{timestamp}.csv"

        file_path = os.path.join(export_dir, filename)



        try:

            with open(file_path, 'w', newline='') as csvfile:

                fieldnames = ['quiz_id', 'chapter_id', 'date_of_quiz', 'score', 'remarks']

                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

                writer.writeheader()

                for attempt, quiz in attempts:

                    writer.writerow({

                        'quiz_id': quiz.id,

                        'chapter_id': quiz.chapter_id,

                        'date_of_quiz': quiz.date.strftime("%Y-%m-%d"),

                        'score': attempt.total_score,

                        'remarks': quiz.remarks

                    })

            

            print(f"Successfully created CSV file at {file_path}")



            # --- 3. Send the Alert (Email with Download Link) ---

            # The URL must be the full public URL of your application

            base_url = app.config.get('BASE_URL', 'http://localhost:5000')

            download_link = f"{base_url}/static/exports/{filename}"

            

            email_body = (

                f"Hi {user.username},\n\n"

                "Your requested quiz history export is complete.\n\n"

                f"You can download your file using the link below. The link will be active for 24 hours.\n\n"

                f"{download_link}\n\n"

                "- The QuizMaster Team"

            )

            

            send_notification_email(user.email, "Your Quiz History Export is Ready!", email_body)

            print(f"Alert email sent to {user.email}")



        except Exception as e:

            print(f"An error occurred during CSV export for user {user_id}: {e}")

            raise e



        return f"CSV export and notification sent for user {user_id}."



def send_notification_email(recipient, subject, body):

    """Helper function to send a simple email."""

    from app import mail

    msg = Message(subject=subject, recipients=[recipient], body=body)

    mail.send(msg)



# ===================================================================

# Task 5c.2: Admin-Triggered CSV Export of All Users

# ===================================================================



@celery.task

def export_all_user_performance(admin_email: str):

    """

    Generates a CSV report of all users' performance stats, saves it,

    and emails a download link to the requesting admin.

    """

    from app import mail, create_app, db

    from app.models import User, Attempt



    app = create_app()

    with app.app_context():

        print(f"TASK: Starting all-user performance export for {admin_email}...")



        # --- 1. Fetch all non-admin users ---

        users = User.query.filter_by(role='user').all()

        if not users:

            send_notification_email(admin_email, "User Performance Export", "No user data found to export.")

            return "No users to export."



        # --- 2. Calculate stats for each user ---

        user_stats = []

        for user in users:

            attempts = Attempt.query.filter_by(user_id=user.id).all()

            quizzes_taken = len(attempts)

            if quizzes_taken > 0:

                average_score = round(sum(a.to_dict()['percentage'] for a in attempts) / quizzes_taken)

            else:

                average_score = 0

            

            user_stats.append({

                'user_id': user.id,

                'username': user.username,

                'email': user.email,

                'quizzes_taken': quizzes_taken,

                'average_score': average_score,

                'joining_date': user.joiningDate.strftime("%Y-%m-%d")

            })

        

        # --- 3. Create and Save the CSV File ---

        export_dir = os.path.join(app.static_folder, 'exports')

        os.makedirs(export_dir, exist_ok=True)

        timestamp = datetime.utcnow().strftime('%Y%m%d_%H%M%S')

        filename = f"all_user_performance_{timestamp}.csv"

        file_path = os.path.join(export_dir, filename)



        try:

            with open(file_path, 'w', newline='') as csvfile:

                fieldnames = ['user_id', 'username', 'email', 'quizzes_taken', 'average_score', 'joining_date']

                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)

                writer.writeheader()

                writer.writerows(user_stats)

            

            print(f"Successfully created all-user CSV at {file_path}")



            # --- 4. Send the Alert (Email with Download Link) ---

            base_url = app.config.get('BASE_URL', 'http://localhost:5000')

            download_link = f"{base_url}/static/exports/{filename}"

            email_body = f"The all-user performance export you requested is complete.\n\nDownload it here:\n{download_link}"

            

            send_notification_email(admin_email, "Your User Performance Export is Ready!", email_body)



        except Exception as e:

            print(f"An error occurred during admin CSV export: {e}")

            raise e



        return f"All-user CSV export and notification sent to {admin_email}."





# def send_notification_email(recipient, subject, body):

#     """Helper function to send a simple email."""

#     from app import mail

#     msg = Message(subject=subject, recipients=[recipient], body=body)

#     mail.send(msg)





# --- Your other tasks can remain below ---

@celery.task

def addition(x, y):

    """A simple test task that adds two numbers."""

    result = x + y

    print(f"Executing task: {x} + {y} = {result}")

    return result



def create_html_report(stats):

    """Creates a styled HTML string for the monthly report email."""

    # This is a simple inline-styled HTML template.

    # For more complex designs, consider using a templating engine like Jinja2.

    return f"""

    <html>

      <head>

        <style>

          body {{ font-family: sans-serif; color: #333; }}

          .container {{ max-width: 600px; margin: auto; padding: 20px; border: 1px solid #eee; border-radius: 10px; }}

          .header {{ font-size: 24px; font-weight: bold; color: #0d6efd; margin-bottom: 20px; }}

          .stat-grid {{ display: grid; grid-template-columns: 1fr 1fr; gap: 15px; }}

          .stat-box {{ background-color: #f8f9fa; padding: 15px; border-radius: 5px; text-align: center; }}

          .stat-label {{ font-size: 14px; color: #6c757d; }}

          .stat-value {{ font-size: 20px; font-weight: bold; }}

        </style>

      </head>

      <body>

        <div class="container">

          <div class="header">Your {stats['month_name']} Report</div>

          <p>Hi {stats['username']}, here's a summary of your activity on QuizMaster last month:</p>

          <div class="stat-grid">

            <div class="stat-box">

              <div class="stat-label">Quizzes Taken</div>

              <div class="stat-value">{stats['quizzes_taken']}</div>

            </div>

            <div class="stat-box">

              <div class="stat-label">Average Score</div>

              <div class="stat-value">{stats['average_score']}%</div>

            </div>

            <div class="stat-box">

              <div class="stat-label">Best Subject</div>

              <div class="stat-value">{stats['best_subject']}</div>

            </div>

            <div class="stat-box">

              <div class="stat-label">Highest Score</div>

              <div class="stat-value">{stats['highest_score_quiz']}</div>

            </div>

          </div>

          <p style="margin-top: 20px;">Keep up the great work! Visit QuizMaster today to continue your learning journey.</p>

        </div>

      </body>

    </html>

    """











================================================

FILE: backend/app/api/__init__.py

================================================

from app.api.auth import register_auth_routes

from app.api.user import register_user_routes

from app.api.subject import register_subject_routes

from app.api.chapter import register_chapter_routes

from app.api.quiz import register_quiz_routes

from app.api.question import register_question_routes

from app.api.option import register_option_routes

from app.api.attempt import register_attempt_routes

from app.api.jobs import register_job_routes





================================================

FILE: backend/app/api/attempt.py

================================================

from flask import request

from flask_restful import Resource

from flask_jwt_extended import jwt_required, get_jwt_identity, get_jwt

from app.models import Chapter, Subject, Quiz, Question, Option, Attempt, QuizSession, AttemptResponse, User

from app import db

from datetime import datetime, date, timedelta

from app.utils.auth import role_required

from app.utils.validators import validate_string, validate_int, validate_date, validate_time, validate_bool

from app.utils.formatters import format_date, format_time



class QuizSessionResource(Resource):

    # start or check status for a quiz

    @jwt_required()

    def get(self, quiz_id):

        user_id = get_jwt_identity()



        quiz = Quiz.query.filter_by(id = quiz_id).first()

        if not(quiz):

            return {"message": f"Quiz with id {quiz_id} not found"}, 404

        

        attempt = Attempt.query.filter_by(quiz_id = quiz_id, user_id = user_id).first()

        if attempt:

            return {"message": f"Quiz with id {quiz_id} already submitted"}, 400        



        quiz_session = QuizSession.query.filter_by(quiz_id = quiz_id, user_id = user_id).first()

        if quiz_session:

            time_elapsed = datetime.now() - quiz_session.started_at

            remaining = timedelta(minutes=quiz.duration) - time_elapsed

            if time_elapsed > timedelta(minutes=quiz.duration):

                return {"message": "Quiz time has expired"}, 400

            else:

                return {

                    "message": "Quiz time ongoing",

                    "remaining_time": int(remaining.total_seconds() // 60)

                    }, 200

        else:

            return {"message": "Quiz not started yet"}, 200

        

    @jwt_required()

    def post(self, quiz_id):

        user_id = get_jwt_identity()



        quiz = Quiz.query.filter_by(id = quiz_id).first()

        if not(quiz):

            return {"message": f"Quiz with id {quiz_id} not found"}, 404

        

        if not quiz.is_started:

            return {"message": "Quiz time hasn't started yet"}, 400

        

        attempt = Attempt.query.filter_by(quiz_id = quiz_id, user_id = user_id).first()

        if attempt:

            return {"message": f"Quiz with id {quiz_id} already submitted"}, 400        



        quiz_session = QuizSession.query.filter_by(quiz_id = quiz_id, user_id = user_id).first()

        if quiz_session:

            return {"message": f"Quiz with id {quiz_id} has already been started"}, 400

        



        quiz_session = QuizSession(

            user_id = user_id,

            quiz_id = quiz_id

        )



        db.session.add(quiz_session)

        db.session.commit()



        return {"message": "Quiz started successfully"}, 201



class UserAttemptsResources(Resource):

    @jwt_required()

    def get(self):

        user_id = get_jwt_identity()



        user = User.query.filter_by(id = user_id).first()

        return user.to_dict()['attempts'];

        

class AttemptResource(Resource):

    # submit a quiz or retrieve submitted answers

    @jwt_required()

    def get(self, quiz_id):

        user_id = get_jwt_identity()



        # 1. Check if quiz exists

        quiz = Quiz.query.get(quiz_id)

        if not quiz:

            return {"message": f"Quiz with id {quiz_id} not found"}, 404



        # 2. Check if user has completed the quiz

        attempt = Attempt.query.filter_by(user_id=user_id, quiz_id=quiz_id).first()

        if not attempt or not attempt.completed:

            return {"message": "Quiz not submitted yet"}, 400



        # 3. Fetch all questions

        questions = Question.query.filter_by(quiz_id=quiz_id).all()



        # 4. Fetch all responses

        responses = AttemptResponse.query.filter_by(user_id=user_id, quiz_id=quiz_id).all()

        response_map = {}

        for r in responses:

            response_map[r.question_id] = r



        # 5. Fetch all selected options

        option_ids = []

        for r in responses:

            option_ids.append(r.option_id)



        options = Option.query.filter(Option.id.in_(option_ids)).all()

        option_map = {}

        for opt in options:

            option_map[opt.id] = opt



        # 6. Build result using normal for loop

        result = []

        for question in questions:

            question_id = question.id

            if question_id in response_map:

                response = response_map[question_id]

                option_id = response.option_id



                if option_id in option_map:

                    selected_option = option_map[option_id]

                    selected_option_data = selected_option.to_dict()

                else:

                    selected_option_data = None



                question_data = question.to_dict(include_internal = True)

                entry = {

                    "question": question_data,

                    "selected_option": selected_option_data

                }

                result.append(entry)



        return result, 200





    @jwt_required()

    def post(self, quiz_id):

        user_id = get_jwt_identity()



        quiz = Quiz.query.filter_by(id = quiz_id).first()

        if not(quiz):

            return {"message": f"Quiz with id {quiz_id} not found"}, 404

        

        attempt = Attempt.query.filter_by(quiz_id = quiz_id, user_id = user_id).first()

        if attempt:

            return {"message": f"Quiz with id {quiz_id} already submitted"}, 400

        

        session = QuizSession.query.filter_by(user_id = user_id, quiz_id = quiz_id).first()

        if not session:

            return {"message": f"Quiz with id {quiz_id} not started or expired"}, 400

        

        data = request.get_json()

        responses = data.get("responses")

        if not responses:

            return {"message": "No responses provided"}, 422

        

        total_correct = 0

        total_score = 0

        total_marks = 0



        for resp in responses:

            question_id = resp.get("question_id")

            option_id = resp.get("option_id")



            question = Question.query.filter_by(id = question_id).first()

            option = Option.query.filter_by(id = option_id).first()



            if not question or not option or option.question_id != question_id:

                return {"message": "Invalid Responses"}, 422



            total_marks += question.marks

            if option.is_correct:

                total_correct += 1

                total_score += question.marks



            answer = AttemptResponse(

                user_id = user_id,

                quiz_id = quiz_id,

                question_id = question_id,

                option_id = option_id,

            )

            db.session.add(answer)



        

        total_questions = len(responses)

        attempt = Attempt(

            user_id = user_id,

            quiz_id = quiz_id,

            total_marks = total_marks,

            total_questions = total_questions,

            total_score = total_score,

            total_correct = total_correct,

            completed = True

        )



        db.session.add(attempt)



        db.session.delete(session) # cleanup quiz session

        db.session.commit()



        return {"message": "Quiz submitted successfully"}, 201





class AllQuestionsResource(Resource):

    # fetch all questions

    @jwt_required()

    def get(self, quiz_id, include_internal = False):

        user = get_jwt()

        quiz = Quiz.query.filter_by(id = quiz_id).first()

        if not(quiz):

            return {"message": f"Quiz with id {quiz_id} not found"}, 404

        

        questions = []

        for q in quiz.questions:

            q_dict = q.to_dict()

            if user.get("role") == 'admin':

                q_dict["options"] = [o.to_dict(include_internal = True) for o in q.options]

            else:

                q_dict["options"] = [o.to_dict(include_internal = include_internal) for o in q.options]

            questions.append(q_dict)

        return questions, 200



class ResultResource(Resource):

    # fetch quiz result

    @jwt_required()

    def get(self, quiz_id):

        user_id = get_jwt_identity()



        quiz = Quiz.query.filter_by(id = quiz_id).first()

        if not(quiz):

            return {"message": f"Quiz with id {quiz_id} not found"}, 404



        attempt = Attempt.query.filter_by(quiz_id = quiz_id, user_id = user_id).first()

        if not attempt:

            return {"message": f"Quiz not attempted"}, 400



        return attempt.to_dict(), 200        

    

class AllAttemptsResource(Resource):

    @role_required('admin')

    def get(self):

        attempts = Attempt.query.all()

        return [attempt.to_dict() for attempt in attempts], 200



def register_attempt_routes(api):

    api.add_resource(QuizSessionResource, '/api/quiz/<int:quiz_id>/start')

    api.add_resource(UserAttemptsResources, '/api/user/attempts')

    api.add_resource(AttemptResource, '/api/quiz/<int:quiz_id>/submit')

    api.add_resource(AllQuestionsResource, '/api/quiz/<int:quiz_id>/questions')

    api.add_resource(ResultResource, '/api/quiz/<int:quiz_id>/result')

    api.add_resource(AllAttemptsResource, '/api/attempts/all')









================================================

FILE: backend/app/api/auth.py

================================================

from flask import request

from flask_restful import Resource

from app.models import User

from app import db

from flask_jwt_extended import create_access_token

from datetime import timedelta

from app.utils.validators import *

from app.utils.formatters import format_date

from datetime import datetime



class RegisterResource(Resource):

    def post(self):

        data = request.get_json()



        username = data.get("username")

        email = data.get("email")

        password = data.get("password")

        gender = data.get("gender")

        dob = data.get("dob")

        qualification = data.get("qualification")

        college = data.get("college")

        phone = data.get("phone")



        error  = (validate_string(username, 'username') or

                  validate_email(email) or 

                  validate_date(dob, before_today=True) or 

                  validate_gender(gender) or

                  validate_phone(phone) or

                  validate_string(college, 'college') or

                  validate_string(qualification, 'qualification') or

                  validate_password(password)

                )

        if error:

            return {"message": error}, 422

                

        # Check if user already exists

        if User.query.filter((User.username == username)).first():

            return {"message": "Username already exists."}, 409

        

        # Check if email already exists

        if User.query.filter((User.email == email)).first():

            return {"message": "Email already exists."}, 409

        

        # Check if phone already exists

        if User.query.filter((User.phone == phone)).first():

            return {"message": "Phone number already exists."}, 409

        

        user = User(username=username.strip(), 

                    email=email.strip(),

                    gender = gender.strip(),

                    dob = format_date(dob),

                    qualification = qualification.strip(),

                    college = college.strip(),

                    phone = int(phone),

                    role='user')

        

        user.set_password(password)



        db.session.add(user)

        db.session.commit()



        return {"message": "User registered successfully."}, 201





class LoginResource(Resource):

    def post(self):

        data = request.get_json()



        username = data.get("username")

        password = data.get("password")



        if not username or not password:

            return {"message": "Username and password are required."}, 400



        user = User.query.filter_by(username=username).first()



        if not user or not user.check_password(password):

            return {"message": "Invalid username or password"}, 401



        user.last_login = datetime.now()

        db.session.commit()



        # Create access token (valid for 1 hour)

        access_token = create_access_token(

            identity=str(user.id),  

            additional_claims={"role": user.role},  # extra info

            expires_delta=timedelta(hours=10)

        )



        return {

            "message": "Login successful.",

            "access_token": access_token,

            "user": {

                "id": user.id,

                "username": user.username,

                "role": user.role

            }

        }, 200



# Register API resources

def register_auth_routes(api):



    api.add_resource(RegisterResource, '/api/auth/register')

    api.add_resource(LoginResource, '/api/auth/login')





================================================

FILE: backend/app/api/chapter.py

================================================

from flask import request

from flask_restful import Resource

from flask_jwt_extended import jwt_required, get_jwt_identity, get_jwt

from app.models import Chapter, Subject

from app import db, cache

from datetime import datetime

from app.utils.auth import role_required

from app.utils.validators import validate_string

from app.utils.cache_key import role_based_cache_key



class ChapterResource(Resource):

    # @cache.cached(timeout=3600)

    @jwt_required()

    def get(self, chapter_id):       

        chapter = Chapter.query.filter_by(id = chapter_id).first()

        if not(chapter):

            return {"message": f"Chapter with id {chapter_id} not found"}, 404

        user = get_jwt()

        

        return chapter.to_dict(include_internal = True), 200

  

    @role_required('admin')

    def patch(self, chapter_id):

        chapter = Chapter.query.filter_by(id = chapter_id).first()

        if not(chapter):

            return {"message": f"Chapter with id {chapter_id} not found"}, 404

        

        data = request.get_json()



        name = data.get("name")

        description = data.get("description")



        if not(name) and not(description):

            return {"message": "Invalid request. Nothing to update"}, 422

        

        if name:

            error = validate_string(name, 'name')

            if error:

                return {"message": error}, 422

            chapter.name = name.strip()



        if description:

            error = validate_string(description, 'description')

            if error:

                return {"message": error}, 422

            chapter.description = description.strip()



        db.session.commit()

        # cache.delete_memoized(ChapterResource.get)



        return {"message": "Chapter updated successfully"}, 200

    

    @role_required('admin')

    def delete(self, chapter_id):

        chapter = Chapter.query.filter_by(id = chapter_id).first()

        if not(chapter):

            return {"message": f"Chapter with id {chapter_id} not found"}, 404

        

        db.session.delete(chapter)

        db.session.commit()



        cache.delete_memoized(ChapterResource.get)



        return {"message": "Chapter deleted successfully"}, 200



class ChapterListResource(Resource):

    # @cache.cached(timeout=3600)

    @jwt_required()

    def get(self, subject_id):

        

        subject = Subject.query.filter_by(id = subject_id).first()

        if not(subject):

            return {"message": f"Subject with id {subject_id} not found"}, 404

         

        chapters = Chapter.query.filter_by(subject_id = subject_id).all()



        user = get_jwt()

        return [chapter.to_dict(include_internal = True) for chapter in chapters], 200





    @role_required('admin')

    def post(self, subject_id):



        subject = Subject.query.filter_by(id = subject_id).first()

        if not(subject):

            return {"message": f"Subject with id {subject_id} not found"}, 404 

        

        data = request.get_json()



        name = data.get("name")

        description = data.get("description")



        error = validate_string(name, 'name') or validate_string(description, 'description')

        if error:

            return {"message": error}, 422

        

        chapter = Chapter(

            name = name.strip(),

            description = description.strip(),

            subject_id = subject_id

        )



        db.session.add(chapter)

        db.session.commit()



        # cache.delete_memoized(ChapterListResource.get)



        return {"message": "Chapter created successfully", "id": chapter.id}, 201



# class ChapterQuizResource(Resource):

#     @jwt_required()

#     def get(self, chapter_id):

#         chapter = Chapter.query.filter_by(id = chapter_id).first()

#         if not(chapter):

#             return {"message": f"Chapter with id {chapter_id} not found"}, 404

        

#         return [quiz.to_dict() for quiz in chapter.quizzes], 200

  

def register_chapter_routes(api):

    api.add_resource(ChapterResource, '/api/chapter/<int:chapter_id>')

    api.add_resource(ChapterListResource, '/api/chapters/<int:subject_id>')

    # api.add_resource(ChapterQuizResource, '/api/chapter/<int:chapter_id>/quizzes')





================================================

FILE: backend/app/api/jobs.py

================================================

from flask_restful import Resource

from flask_jwt_extended import jwt_required, get_jwt_identity

from app.tasks import export_user_quiz_history, export_all_user_performance

from app.models import User

from app.utils.auth import role_required



class UserQuizExportAPI(Resource):

    @jwt_required()

    def post(self):

        """Triggers an async job for the current user's quiz history."""

        current_user_id = get_jwt_identity()

        export_user_quiz_history.delay(current_user_id)

        return {

            'message': 'Your export has started. You will receive an email with the file shortly.'

        }, 202



class AdminUserExportAPI(Resource):

    @role_required('admin')

    def post(self):

        """

        Triggers an async job to export performance data for all users.

        This is an admin-only endpoint.

        """

        admin_id = get_jwt_identity()

        admin_user = User.query.get(admin_id)



        # Security check: Ensure the user triggering this is an admin

        if not admin_user or admin_user.role != 'admin':

            return {'message': 'Unauthorized access'}, 403



        # Pass the admin's email to the task so they receive the notification

        export_all_user_performance.delay(admin_user.email)

        

        return {

            'message': 'The all-user performance export has started. You will receive an email with the download link shortly.'

        }, 202



# This function registers all job-related routes

def register_job_routes(api):

    api.add_resource(UserQuizExportAPI, '/api/jobs/export/my-history')

    # Add the new admin-only endpoint

    api.add_resource(AdminUserExportAPI, '/api/jobs/export/all-users')







================================================

FILE: backend/app/api/option.py

================================================

from flask import request

from flask_restful import Resource

from flask_jwt_extended import jwt_required, get_jwt_identity, get_jwt

from app.models import Chapter, Subject, Quiz, Question, Option

from app import db, cache

from datetime import datetime, date

from app.utils.auth import role_required

from app.utils.validators import validate_string, validate_int, validate_date, validate_time, validate_bool

from app.utils.formatters import format_date, format_time

from app.utils.cache_key import role_based_cache_key



class OptionResource(Resource):

    # @cache.cached(timeout=3600)

    @jwt_required()

    def get(self, option_id):

        option = Option.query.filter_by(id = option_id).first()

        if not(option):

            return {"message": f"Option with id {option_id} not found"}, 404

        user = get_jwt()

        return option.to_dict(include_internal = True), 200

        

    @role_required('admin')

    def patch(self, option_id):

        option = Option.query.filter_by(id = option_id).first()

        if not(option):

            return {"message": f"Option with id {option_id} not found"}, 404

            

        data = request.get_json()



        text = data.get("text")

        is_correct = data.get("is_correct")



        if not(text) and not(is_correct):

            return {"message": "Invalid Request. Nothing to update"}, 422



        if text:

            error = validate_string(text, 'text')

            if error:

                return {"message": error}, 422

            option.text = text.strip()



        if is_correct is not None:

            is_correct, error = validate_bool(is_correct, field='is_correct')

            if error:

                return {"message": error}, 422



        db.session.commit()

        # cache.delete_memoized(OptionResource.get)



        return {"message": "Option updated successfully"}, 200

    

    @role_required('admin')

    def delete(self, option_id):

        option = Option.query.filter_by(id = option_id).first()

        if not(option):

            return {"message": f"Option with id {option_id} not found"}, 404



        db.session.delete(option)

        db.session.commit()

        # cache.delete_memoized(OptionResource.get)



        return {"message": "Option deleted successfully"}, 200



class OptionListResource(Resource):

    # @cache.cached(timeout=3600)

    @jwt_required()

    def get(self, question_id):

        question = db.session.query(Question).filter_by(id = question_id).first()

        if not(question):

            return {"message": f"Question with id {question_id} not found"}, 404



        options = db.session.query(Option).filter_by(question_id = question_id).all()

        user = get_jwt()

        return [option.to_dict(include_internal=True) for option in options]





    @role_required('admin')

    def post(self, question_id):

        question = db.session.query(Question).filter_by(id = question_id).first()

        if not(question):

            return {"message": f"Question with id {question_id} not found"}, 404



        data = request.get_json()



        text = data.get("text")

        is_correct = data.get("is_correct")



        error = (validate_string(text, 'text')

                  or validate_bool(is_correct, 'is_correct')[1])

        if error:

            return {"message": error}, 422



        is_correct = validate_bool(is_correct, 'is_correct')[0]



        option = Option(

            text = text.strip(),

            is_correct = is_correct,

            question_id = question_id

        )              



        db.session.add(option)

        db.session.commit()

        # cache.delete_memoized(OptionListResource.get)



        return {"message": "Option created successfully"}, 201

    

def register_option_routes(api):

    api.add_resource(OptionResource, '/api/option/<int:option_id>')

    api.add_resource(OptionListResource, '/api/options/<int:question_id>')





================================================

FILE: backend/app/api/question.py

================================================

from flask import request

from flask_restful import Resource

from flask_jwt_extended import jwt_required, get_jwt_identity

from app.models import Chapter, Subject, Quiz, Question

from app import db, cache

from datetime import datetime, date

from app.utils.auth import role_required

from app.utils.validators import validate_string, validate_int, validate_date, validate_time

from app.utils.formatters import format_date, format_time

from app.utils.cache_key import role_based_cache_key



class QuestionResource(Resource):

    # @cache.cached(timeout=3600)

    @jwt_required()

    def get(self, question_id):

        question = Question.query.filter_by(id = question_id).first()

        if not(question):

            return {"message": f"Question with id {question_id} not found"}, 404

        

        return question.to_dict(), 200

    

    @role_required('admin')

    def patch(self, question_id):

        question = Question.query.filter_by(id = question_id).first()

        if not(question):

            return {"message": f"Question with id {question_id} not found"}, 404



        data = request.get_json()



        statement = data.get("statement")

        marks = data.get("marks")



        if not(statement) and not(marks):

            return {"message": "Invalid Request. Nothing to update"}, 422



        if statement:

            error = validate_string(statement, field='statement')

            if error:

                return {"message": error}, 422

            question.statement = statement.strip()



        if marks:

            error = validate_int(marks, field='marks')

            if error:

                return {"message": error}, 422

            marks = int(marks)

            if marks <= 0:

                return {"message": "Marks should be atleast 1"}, 422

            question.marks = marks



        db.session.commit()

        # cache.delete_memoized(QuestionResource.get)



        return {"message": "Question updated successfully"}, 200



    @role_required('admin')

    def delete(self, question_id):

        question = Question.query.filter_by(id = question_id).first()

        if not(question):

            return {"message": f"Question with id {question_id} not found"}, 404



        db.session.delete(question)

        db.session.commit()

        # cache.delete_memoized(QuestionResource.get)



        return {"message": "Question deleted successfully"}, 200        



class QuestionListResource(Resource):

    # @cache.cached(timeout=3600)

    @jwt_required()

    def get(self, quiz_id):

        quiz = Quiz.query.filter_by(id = quiz_id).first()

        if not(quiz):

            return {"message": f"Quiz with id {quiz_id} not found"}, 404



        questions = Question.query.filter_by(quiz_id = quiz_id).all()

        return [question.to_dict() for question in questions], 200



    @role_required('admin')

    def post(self, quiz_id):

        quiz = Quiz.query.filter_by(id = quiz_id).first()

        if not(quiz):

            return {"message": f"Quiz with id {quiz_id} not found"}, 404

        

        data = request.get_json()



        statement = data.get("statement")

        marks = data.get("marks")



        error = validate_string(statement, field='statement') or validate_int(marks, field='marks')

        if error:

            return {"message": error}, 422

        

        marks = int(marks)

        if marks <= 0:

            return {"message": "Marks should be atleast 1"}, 422

        

        question = Question(

            statement = statement.strip(),

            quiz_id = quiz_id,

            marks = marks

        )



        db.session.add(question)

        db.session.commit()

        # cache.delete_memoized(QuestionListResource.get)



        return {"message": "Question created successfully", "id": question.id}, 201

    

def register_question_routes(api):

    api.add_resource(QuestionResource, '/api/question/<int:question_id>')

    api.add_resource(QuestionListResource, '/api/questions/<int:quiz_id>')





================================================

FILE: backend/app/api/quiz.py

================================================

from flask import request

from flask_restful import Resource

from flask_jwt_extended import jwt_required, get_jwt_identity, get_jwt

from app.models import Chapter, Subject, Quiz, User, Attempt

from app import db, cache

from datetime import datetime, date

from app.utils.auth import role_required

from app.utils.validators import validate_string, validate_int, validate_date, validate_time

from app.utils.formatters import format_date, format_time

from app.utils.cache_key import role_based_cache_key



today = date.today()

now = datetime.now()

cur_time = now.time()

class QuizResource(Resource):

    # @cache.cached(timeout=3600)

    @jwt_required()

    def get(self, quiz_id):

        quiz = Quiz.query.filter_by(id = quiz_id).first()

        if not(quiz):

            return {"message": f"Quiz with id {quiz_id} not found"}, 404

        user = get_jwt()

        return quiz.to_dict(include_internal = True), 200



    

    @role_required('admin')

    def patch(self, quiz_id):

        quiz = Quiz.query.filter_by(id = quiz_id).first()

        if not(quiz):

            return {"message": f"Quiz with id {quiz_id} not found"}, 404

        

        if quiz.is_started:

            return {"message": "Quiz already started"}, 400



        data = request.get_json()



        ## is_active toggle switch only

        is_active = data.get("is_active")

        if is_active is not None:

            if not isinstance(is_active, bool):

                if isinstance(is_active, str) and is_active.lower() in ["true", "false"]:

                    is_active = is_active.lower() == "true"

                else:

                    return {"message": "is_active must be a boolean"}, 422

            quiz.is_active = is_active 

            db.session().commit()

            return {"message": "Status Changed"}, 200  



        if not(quiz.is_active):

            return {"message": "Cannot edit anymore. Quiz closed"}, 400        



        name = data.get("name")

        description = data.get("description")

        date = data.get("date")

        time = data.get("time")

        duration = data.get("duration")

        remarks = data.get("remarks")

        passing = data.get("passing")



        if not(name) and not(description) and not(date) and not(time) and not(duration) and not(remarks) and not(passing):

            return {"message": "Invalid request. Nothing to update"}, 422

        

        if name:

            error = validate_string(name, 'name')

            if error:

                return {"message": error}, 422

            quiz.name = name.strip()



        if description:

            error = validate_string(description, 'description')

            if error:

                return {"message": error}, 422

            quiz.description = description.strip()



        if date:

            error = validate_date(date, after_today = True)

            if error:

                return {"message": error}, 422

            date = format_date(date)

            quiz.date = date



        if time:

            error = validate_time(time)

            if error:

                return {"message": error}, 422

            time = format_time(time)

            if date:

                if date == today:

                    if time <= cur_time:

                        return {"message": "Cannot schedule quiz in the past"}, 422

            elif quiz.date == today:

                if time <= cur_time:

                    return {"message": "Cannot schedule quiz in the past"}, 422                

            quiz.time = time.strftime("%H:%M")



        if duration:

            error = validate_int(duration, 'duration', required=True)

            if error:

                return {"message": error}, 422

            duration = int(duration)

            if duration < 1:

                return {"message": "Test duration needs to be atleast 1 minute"}, 422

            quiz.duration = duration        



        if remarks:

            error = validate_string(remarks, 'remarks', required=True)

            if error:

                return {"message": error}, 422

            quiz.remarks = remarks.strip()

            

        if passing:

            error = validate_int(passing, 'passing', required=True)

            if error:

                return {"message": error}, 422    

            passing = int(passing)

            if not(0 < passing <= 100):

                return {"message": "Passing must be within 0 and 100"}, 422   

            quiz.passing = passing  

        

        db.session.commit()

        # cache.delete_memoized(QuizResource.get)



        return {"message": "Quiz updated successfully"}, 200

    

    @role_required('admin')

    def delete(self, quiz_id):

        quiz = Quiz.query.filter_by(id = quiz_id).first()

        if not(quiz):

            return {"message": f"Quiz with id {quiz_id} not found"}, 404

                

        db.session.delete(quiz)

        db.session.commit()

        # cache.delete_memoized(QuizResource.get)



        return {"message": "Quiz deleted successfully"}, 200



class QuizListResource(Resource):

    # @cache.cached(timeout=3600)

    @jwt_required()

    def get(self, chapter_id):

        chapter = Chapter.query.filter_by(id = chapter_id).first()

        if not(chapter):

            return {"message": f"Chapter with id {chapter_id} not found"}, 404



        quizzes = Quiz.query.filter_by(chapter_id = chapter_id).all()

        user = get_jwt()

        return [quiz.to_dict(include_internal = True) for quiz in quizzes], 200





    @role_required('admin')

    def post(self, chapter_id):

        chapter = Chapter.query.filter_by(id = chapter_id).first()

        if not(chapter):

            return {"message": f"Chapter with id {chapter_id} not found"}, 404



        data = request.get_json()



        name = data.get("name")

        description = data.get("description")

        date = data.get("date")

        time = data.get("time")

        duration = data.get("duration")

        remarks = data.get("remarks")

        passing = data.get("passing")



        error = (validate_string(name, 'name') or 

                 validate_string(description, 'description') or 

                 validate_date(date, after_today = True) or 

                 validate_time(time) or 

                 validate_int(duration, 'duration') or

                 validate_string(remarks, 'remarks', False) or

                 validate_int(passing, 'passing'))

        if error:

            return {"message": error}, 422

        

        date = format_date(date)

        time = format_time(time)



        if date == today:

            if time <= cur_time:

                return {"message": "Cannot schedule quiz in the past"}, 422



        duration = int(duration)

        if duration < 1:

            return {"message": "Test duration needs to be atleast 1 minute"}, 422    



        passing = int(passing)

        if not(0 < passing <= 100):

            return {"message": "Passing must be within 0 and 100"}, 422

        



        quiz = Quiz(

            name = name.strip(),

            description = description.strip(),

            chapter_id = chapter_id,

            date = date,

            time = time.strftime("%H:%M"),

            duration = duration,

            remarks = remarks.strip() if remarks else None,

            passing = passing

        )



        db.session.add(quiz)

        db.session.commit()

        # cache.delete_memoized(QuizListResource.get)



        return {"message": "Quiz created successfully", "id": quiz.id}, 201



class UserQuizzesResource(Resource):

    @jwt_required()

    def get(self):

        user_id = get_jwt_identity()



        user = User.query.filter_by(id = user_id).first()



        attempts = Attempt.query.filter_by(user_id = user_id).all()

        # results = [ for attempt in attempts]



        # quizzes = Quiz.query.filter(Quiz.id.in_(quiz_ids)).all()



        return [attempt.to_dict() for attempt in attempts], 200

    

class AllQuizzesResource(Resource):

    @role_required('admin')

    def get(self):

        quizzes = Quiz.query.all()

        return [quiz.to_dict(include_internal = True) for quiz in quizzes], 200 





def register_quiz_routes(api):

    api.add_resource(QuizResource, '/api/quiz/<int:quiz_id>')

    api.add_resource(QuizListResource, '/api/quizzes/<int:chapter_id>')

    api.add_resource(UserQuizzesResource, '/api/user/quizzes')

    api.add_resource(AllQuizzesResource, '/api/quizzes/all')





================================================

FILE: backend/app/api/subject.py

================================================

from flask import request

from flask_restful import Resource

from flask_jwt_extended import jwt_required, get_jwt_identity, get_jwt

from app.models import Subject

from app import db, cache

from datetime import datetime

from app.utils.auth import role_required

from app.utils.cache_key import role_based_cache_key

from app.utils.validators import validate_string

class SubjectResource(Resource):



    # @cache.cached(timeout=3600)

    @jwt_required()

    def get(self, subject_id):



        subject = Subject.query.filter_by(id = subject_id).first()

        if not(subject):

            return {"message": f"Subject with id {subject_id} not found"}, 404

        

        user = get_jwt()

        return subject.to_dict(include_internal = True), 200

    

    @role_required('admin')

    def patch(self, subject_id):



        data = request.get_json()



        subject = Subject.query.filter_by(id = subject_id).first()



        if not(subject):

            return {"message": "Subject not found"}, 404

        

        name = data.get("name")

        description = data.get("description")



        if not(name) and not(description):

            return {"message": "Invalid request. Nothing to update"}, 422



        if name:

            error = validate_string(name, 'name')

            if error:

                return {"message": error}, 422

            subject.name = name.strip()        



        if description:

            error = validate_string(description, 'description')

            if error:

                return {"message": error}, 422

            subject.description = description.strip()

            

        db.session.commit()

        # cache.delete_memoized(SubjectResource.get)



        return {"message": "Subject updated successfully"}, 200

    

    @role_required('admin')

    def delete(self, subject_id):



        subject = Subject.query.filter_by(id = subject_id).first()

        if not(subject):

            return {"message": "Subject not found"}, 404      



        db.session.delete(subject)

        db.session.commit()



        # cache.delete_memoized(SubjectResource.get)



        return {"message": "Subject deleted successfully"}, 200 



class SubjectListResource(Resource):

    # @cache.cached(timeout=3600)

    @jwt_required()

    def get(self):

        user = get_jwt()

        subjects = Subject.query.all()



        return [subject.to_dict(include_internal = True) for subject in subjects], 200



    

    @role_required('admin')

    def post(self):



        data = request.get_json()



        name = data.get("name")

        description = data.get("description")



        error = validate_string(name, 'name') or validate_string(description, 'description')

        if error:

            return {"message": error}, 422

        

        subject = Subject(

            name = name.strip(),

            description = description.strip()

        )



        db.session.add(subject)

        db.session.commit()



        # cache.delete_memoized(SubjectListResource.get)



        return {"message": "Subject created successfully", "id": subject.id}, 201





def register_subject_routes(api):

    api.add_resource(SubjectResource, '/api/subject/<int:subject_id>')

    api.add_resource(SubjectListResource, '/api/subjects')







================================================

FILE: backend/app/api/user.py

================================================

from flask import request

from flask_restful import Resource

from flask_jwt_extended import jwt_required, get_jwt_identity

from app.models import User

from app import db

from app.utils.validators import*

from app.utils.auth import role_required

from app.utils.formatters import format_date

class MeResource(Resource):

    @jwt_required()

    def get(self):

        identity = int(get_jwt_identity())

        user = User.query.get(identity)



        if not user:

            return {"message": "User not found."}, 404



        return user.to_dict(), 200

    

class UpdateProfileResource(Resource):

    @jwt_required()

    def patch(self):

        identity = int(get_jwt_identity())

        user = User.query.get(identity)



        if not user:

            return {"message": "User not found."}, 404  

        

        data = request.get_json()



        email = data.get("email")

        gender = data.get("gender")

        dob = data.get("dob")

        qualification = data.get("qualification")

        college = data.get("college")

        phone = data.get("phone")



        if not(email) and not(gender) and not(dob) and not(qualification) and not(college) and not(phone):

            return {"message": "Invalid request. Nothing to update"}, 422            



        # Check if email is being changed and is already taken

        if email:

            error = validate_email(email)

            if error:

                return {"message": error}, 422

            existing = User.query.filter_by(email=email).first()

            if existing and existing.id != user.id:

                return {"message": "Email already in use."}, 409  # Conflict

            user.email = email



        if gender:

            error = validate_gender(gender)

            if error:

                return {"message": error}, 422

            user.gender = gender



        if dob:

            error = validate_date(dob)

            if error:

                return {"message": error}, 422

            user.dob = format_date(dob)

            

        if qualification:

            error = validate_string(qualification, 'qualification')

            if error:

                return {"message": error}, 422

            user.qualification = qualification.strip()



        if college:

            error = validate_string(college, 'college')

            if error:

                return {"message": error}

            user.college = college.strip()



        # Check if phone is being changed and is already taken

        if phone:

            error = validate_phone(phone)

            if error:

                return {"message": error}, 422

            existing = User.query.filter_by(phone=phone).first()

            if existing and existing.id != user.id:

                return {"message": "Phone Number already in use."}, 409  # Conflict

            user.phone = int(phone)



        db.session.commit()



        return {"message": "Profile Updated Successfully"}, 200



class UpdatePasswordResource(Resource):

    @jwt_required()

    def patch(self):

        identity = int(get_jwt_identity())

        user = User.query.get(identity)



        if not user:

            return {"message": "User not found."}, 404 

        

        data = request.get_json()

        

        old_password = data.get("old_password")

        new_password = data.get("new_password")



        if not(old_password) or not(new_password):

            return {"message": "Invalid Format"}, 422

        

        if user.check_password(old_password):

            error = validate_password(new_password)

            if error:

                return {"message": error}, 422

            if old_password == new_password:

                return {"message": "Password cannot be same"}, 400

            user.set_password(new_password)

            db.session.commit()

            return {"message": "Password Updated Successfully"}, 200

        else:

            return {"message": "Old Password does not match"}, 401 # Unauthorized



class AllUsersResource(Resource):

    @role_required('admin')

    def get(self):

        users = User.query.filter_by(role = 'user').all()

        return {"users": [user.to_dict() for user in users]}, 200



def register_user_routes(api):

    api.add_resource(MeResource, '/api/users/me')

    api.add_resource(UpdateProfileResource, '/api/users/update-profile')

    api.add_resource(UpdatePasswordResource, '/api/users/update-password')

    api.add_resource(AllUsersResource, '/api/users/all')

    







================================================

FILE: backend/app/models/__init__.py

================================================

from app.models.user import User

from app.models.subject import Subject

from app.models.chapter import Chapter

from app.models.quiz import Quiz

from app.models.question import Question

from app.models.option import Option

from app.models.attempt import Attempt

from app.models.attemptResponse import AttemptResponse

from app.models.quizSession import QuizSession





================================================

FILE: backend/app/models/attempt.py

================================================

from app import db

from datetime import datetime



class Attempt(db.Model):

    __tablename__ = 'attempts'



    id = db.Column(db.Integer, primary_key = True)

    

    attempted_at = db.Column(db.DateTime, nullable = False, default = datetime.now)

    total_marks = db.Column(db.Integer, nullable = False)

    total_score = db.Column(db.Integer, nullable = False)

    total_questions = db.Column(db.Integer, nullable = False)

    total_correct = db.Column(db.Integer, nullable = False)

    completed = db.Column(db.Boolean, nullable = False, default = False)





    ## Foreign Key

    quiz_id = db.Column(db.Integer, db.ForeignKey('quizzes.id', ondelete='CASCADE'), nullable = False, index = True)

    user_id = db.Column(db.Integer, db.ForeignKey('users.id', ondelete='CASCADE'), nullable = False, index = True)



    def to_dict(self):

        return {

            "id": self.id,

            "attempted_at": self.attempted_at.isoformat(),

            "total_marks": self.total_marks,

            "total_score": self.total_score,

            "total_questions": self.total_questions,

            "total_correct": self.total_correct,

            "percentage": round(self.total_score / self.total_marks * 100),

            "completed": self.completed,

            "duration": self.quiz.duration,

            "quiz_id": self.quiz_id,

            "quiz_name": self.quiz.name,

            "user_id": self.user_id,

            "user_name": self.user.username,

            "chapter_name": self.quiz.chapter.name,

            "subject_name": self.quiz.chapter.subject.name,

            "is_ended": self.quiz.is_ended

        }





================================================

FILE: backend/app/models/attemptResponse.py

================================================

from app import db



class AttemptResponse(db.Model):

    id = db.Column(db.Integer, primary_key = True)



    ## Foreign Key

    user_id = db.Column(db.Integer, db.ForeignKey('users.id', ondelete = 'CASCADE'), nullable = False)

    quiz_id = db.Column(db.Integer, db.ForeignKey('quizzes.id', ondelete = 'CASCADE'), nullable = False)

    question_id = db.Column(db.Integer, db.ForeignKey('questions.id', ondelete='CASCADE'), nullable = False)

    option_id = db.Column(db.Integer, db.ForeignKey('options.id', ondelete = 'CASCADE'), nullable = False)



    def to_dict(self):

        return {

            "id": self.id,

            "user_id": self.user_id,

            "quiz_id": self.quiz_id,

            "question_id": self.question_id,

            "option_id": self.option_id

        }





================================================

FILE: backend/app/models/chapter.py

================================================

from app import db

from datetime import datetime



class Chapter(db.Model):

    __tablename__ = 'chapters'



    id = db.Column(db.Integer, primary_key = True)

    name = db.Column(db.String(120), nullable = False)

    description = db.Column(db.String(500), nullable = False)

    created_at = db.Column(db.DateTime, default = datetime.now)

    updated_at = db.Column(db.DateTime, onupdate = datetime.now)



    ## Foreign Key

    subject_id = db.Column(db.Integer, db.ForeignKey('subjects.id', ondelete='CASCADE'), nullable = False)



    ## Relationship

    quizzes = db.relationship('Quiz', backref='chapter', lazy=True, cascade="all, delete")



    def to_dict(self, include_internal = False):

        data = {

            "id": self.id,

            "name": self.name,

            "description": self.description,



            "subject_id": self.subject_id,

            "subject_name": self.subject.name, ## get subject also

        }

        if include_internal:

            data.update({

                "created_at": self.created_at.isoformat(),

                "quizzes": [quiz.to_dict(include_internal = True) for quiz in self.quizzes]

            })

        return data





================================================

FILE: backend/app/models/option.py

================================================

from app import db



class Option(db.Model):

    __tablename__ = 'options'



    id = db.Column(db.Integer, primary_key = True)

    text = db.Column(db.String(500), nullable = False)

    is_correct = db.Column(db.Boolean, nullable = False, default = False)



    # Foreign Keys

    question_id = db.Column(db.Integer, db.ForeignKey('questions.id', ondelete='CASCADE'), nullable = False)



    # Relationships

    attempt_responses = db.relationship('AttemptResponse', backref='option', lazy=True, cascade='all, delete')





    def to_dict(self, include_internal = False):

        data = {

            "id": self.id,

            "text": self.text,

            "question_id": self.question_id

        }

        if include_internal: # admin

            data.update({

                "is_correct": self.is_correct

            })



        return data





================================================

FILE: backend/app/models/question.py

================================================

from app import db



class Question(db.Model):

    __tablename__ = 'questions'



    id = db.Column(db.Integer, primary_key = True)

    statement = db.Column(db.String(1000), nullable = False)

    marks = db.Column(db.Integer, nullable = False, default = 1)



    ## Foreign Key

    quiz_id = db.Column(db.Integer, db.ForeignKey('quizzes.id', ondelete='CASCADE'), nullable = False)



    ## Relationship

    options = db.relationship('Option', backref='question', lazy=True, cascade="all, delete")

    attempt_responses = db.relationship('AttemptResponse', backref='question', lazy=True, cascade="all, delete")



    def to_dict(self, include_internal = False):

        return {

            "id": self.id,

            "statement": self.statement,

            "marks": self.marks,

            "quiz_id": self.quiz_id,

            "quiz_name": self.quiz.name, ## get quiz name also

            "options": [option.to_dict(include_internal = include_internal) for option in self.options]

        }







================================================

FILE: backend/app/models/quiz.py

================================================

from app import db

from datetime import datetime, timedelta

from app.utils.formatters import format_time

class Quiz(db.Model):

    __tablename__ = 'quizzes'



    id = db.Column(db.Integer, primary_key=True)

    name = db.Column(db.String(120), nullable = False)

    description = db.Column(db.String(500), nullable = False)

    is_active = db.Column(db.Boolean, nullable = False, default = True)

    created_at = db.Column(db.DateTime, default = datetime.now)

    updated_at = db.Column(db.DateTime, onupdate = datetime.now)

    date = db.Column(db.Date, nullable = False)

    time = db.Column(db.String, nullable = False)

    duration = db.Column(db.Integer,nullable = False) # in minutes

    remarks = db.Column(db.String(500))

    passing = db.Column(db.Integer, nullable = False) 



    ## Foreign Key

    chapter_id = db.Column(db.Integer, db.ForeignKey('chapters.id', ondelete='CASCADE'), nullable = False)



    ## Relationship

    questions = db.relationship('Question', backref='quiz', lazy=True, cascade="all, delete")

    attempts = db.relationship('Attempt', backref='quiz', lazy=True, cascade="all, delete")

    attempt_responses = db.relationship('AttemptResponse', backref='quiz', lazy=True, cascade='all, delete')





    def to_dict(self, include_internal = False):

        data = {

            "id": self.id,

            "name": self.name,

            "description": self.description,

            "date": self.date.isoformat() if self.date else None,

            "time":(self.time) if self.time else None,

            "duration": self.duration,"chapter_id": self.chapter_id,

            "chapter_name": self.chapter.name,  ## get chapter also,

            "subject_name": self.chapter.subject.name,  ## get subject also

            "is_started": self.is_started,

            "is_ongoing": self.is_ongoing,

            "is_ended": self.is_ended,

            "attempts": [attempt.to_dict() for attempt in self.attempts],

        }

        if include_internal: # admin 

            data.update({

                "created_at": self.created_at.isoformat() if self.created_at else None,

                "updated_at": self.updated_at.isoformat() if self.updated_at else None,

                "remarks": self.remarks,

                "passing": self.passing,

            })

        

        return data



    @property

    def is_started(self):

        if not self.date or not self.time:

            return False

        

        start_dt = datetime.combine(self.date, format_time(self.time))

        return datetime.now() >= start_dt



    @property

    def is_ongoing(self):

        if not self.date or not self.time or not self.duration or not self.is_started or not self.is_active:

            return False

        start_dt = datetime.combine(self.date, format_time(self.time))

        end_dt = start_dt + timedelta(minutes=self.duration)

        now = datetime.now()

        return start_dt <= now <= end_dt

    

    @property

    def is_ended(self):

        return self.is_started and not self.is_ongoing







================================================

FILE: backend/app/models/quizSession.py

================================================

from app import db

from datetime import datetime



class QuizSession(db.Model):

    __tablename__ = 'quizSessions'



    id = db.Column(db.Integer, primary_key=True)

    started_at = db.Column(db.DateTime, default=datetime.now)



    user_id = db.Column(db.Integer, db.ForeignKey('users.id', ondelete='CASCADE'), nullable=False, index=True)

    quiz_id = db.Column(db.Integer, db.ForeignKey('quizzes.id', ondelete='CASCADE'), nullable=False, index=True)



    __table_args__ = (

        db.UniqueConstraint('user_id', 'quiz_id', name='unique_user_quiz_session'),

    )



    def to_dict(self):

        return {

            "id": self.id,

            "started_at": self.started_at.isoformat(),

            "user_id": self.user_id,

            "quiz_id": self.quiz_id

        }







================================================

FILE: backend/app/models/subject.py

================================================

from app import db

from datetime import datetime



class Subject(db.Model):

    __tablename__ = 'subjects'



    id = db.Column(db.Integer, primary_key=True)

    name = db.Column(db.String(120), nullable = False)

    description = db.Column(db.String(500), nullable = False)

    created_at = db.Column(db.DateTime, default = datetime.now)

    updated_at = db.Column(db.DateTime, onupdate = datetime.now, default = datetime.now)



    ## Relationship

    chapters = db.relationship('Chapter', backref='subject', lazy=True, cascade="all, delete")



    def to_dict(self, include_internal = False):

        data = {

            "id": self.id,

            "name": self.name,

            "description": self.description,

        }

        if include_internal:

            data.update({

                "created_at": self.created_at.isoformat(),

                "updated_at": self.updated_at.isoformat(),

                "chapters": [chapter.to_dict(include_internal = True) for chapter in self.chapters],

            })

        return data





================================================

FILE: backend/app/models/user.py

================================================

from app import db

from datetime import datetime, date

from werkzeug.security import generate_password_hash, check_password_hash



class User(db.Model):

    __tablename__ = 'users'



    id = db.Column(db.Integer, primary_key=True)

    username = db.Column(db.String(64), unique=True, nullable=False)

    email = db.Column(db.String(120), unique=True, nullable=False)

    gender = db.Column(db.String(10), nullable = False) # handle validation on frontend

    dob = db.Column(db.Date, nullable = False)

    joiningDate = db.Column(db.Date, nullable = False, default = date.today)

    qualification = db.Column(db.String(120), nullable = False)

    college = db.Column(db.String(120), nullable = False)

    last_login = db.Column(db.DateTime, nullable = False, default = datetime.now)

    phone = db.Column(db.Integer, unique = True, nullable = False)

    password_hash = db.Column(db.String(128), nullable=False)



    role = db.Column(db.String(10), nullable=False, default='user')  # 'admin' or 'user'



    ## Relationship

    attempts = db.relationship('Attempt', backref='user', lazy=True, cascade="all, delete")

    attempt_responses = db.relationship('AttemptResponse', backref='user', lazy=True, cascade='all, delete')



    def set_password(self, password):

        self.password_hash = generate_password_hash(password)



    def check_password(self, password):

        return check_password_hash(self.password_hash, password)



    def is_admin(self):

        return self.role == 'admin'



    def __repr__(self):

        return f'<User {self.username} ({self.role})>'

    

    def to_dict(self):

         return {

            "id": self.id,

            "username": self.username,

            "email": self.email,

            "gender": self.gender,

            "phone": self.phone,

            "dob": self.dob.isoformat(),

            "joiningDate": self.joiningDate.isoformat(),

            "qualification": self.qualification,

            "college": self.college,

            "last_login": self.last_login.isoformat(),

            "role": self.role,

            "attempts": [attempt.to_dict() for attempt in self.attempts] ## get all quiz attempts

        }











================================================

FILE: backend/app/static/exports/all_user_performance_20250731_015310.csv

================================================

user_id,username,email,quizzes_taken,average_score,joining_date

2,user,shrinidhikumar.2003@gmail.com,6,53,2025-07-30







================================================

FILE: backend/app/static/exports/all_user_performance_20250731_015431.csv

================================================

user_id,username,email,quizzes_taken,average_score,joining_date

2,user,shrinidhikumar.2003@gmail.com,6,53,2025-07-30







================================================

FILE: backend/app/static/exports/all_user_performance_20250731_021103.csv

================================================

user_id,username,email,quizzes_taken,average_score,joining_date

2,user,shrinidhikumar.2003@gmail.com,6,53,2025-07-30







================================================

FILE: backend/app/static/exports/all_user_performance_20250731_021438.csv

================================================

user_id,username,email,quizzes_taken,average_score,joining_date

2,user,shrinidhikumar.2003@gmail.com,6,53,2025-07-30







================================================

FILE: backend/app/static/exports/all_user_performance_20250731_052445.csv

================================================

user_id,username,email,quizzes_taken,average_score,joining_date

2,user,noob.snipy@gmail.com,6,53,2025-07-30

3,Shri,shrinidhikumar.2003@gmail.com,1,100,2025-07-31







================================================

FILE: backend/app/static/exports/history_2_20250731_012654.csv

================================================

quiz_id,chapter_id,date_of_quiz,score,remarks

11,1,2025-07-30,10,af

10,1,2025-07-30,0,

4,4,2025-07-30,50,For new programmers

3,3,2025-07-30,5,History enthusiasts

2,2,2025-07-30,65,All ages

1,1,2025-07-30,75,Beginner level







================================================

FILE: backend/app/static/exports/history_2_20250731_012805.csv

================================================

quiz_id,chapter_id,date_of_quiz,score,remarks

11,1,2025-07-30,10,af

10,1,2025-07-30,0,

4,4,2025-07-30,50,For new programmers

3,3,2025-07-30,5,History enthusiasts

2,2,2025-07-30,65,All ages

1,1,2025-07-30,75,Beginner level







================================================

FILE: backend/app/static/exports/history_2_20250731_013411.csv

================================================

quiz_id,chapter_id,date_of_quiz,score,remarks

11,1,2025-07-30,10,af

10,1,2025-07-30,0,

4,4,2025-07-30,50,For new programmers

3,3,2025-07-30,5,History enthusiasts

2,2,2025-07-30,65,All ages

1,1,2025-07-30,75,Beginner level







================================================

FILE: backend/app/static/exports/history_2_20250731_014758.csv

================================================

quiz_id,chapter_id,date_of_quiz,score,remarks

11,1,2025-07-30,10,af

10,1,2025-07-30,0,

4,4,2025-07-30,50,For new programmers

3,3,2025-07-30,5,History enthusiasts

2,2,2025-07-30,65,All ages

1,1,2025-07-30,75,Beginner level







================================================

FILE: backend/app/static/exports/history_2_20250731_020548.csv

================================================

quiz_id,chapter_id,date_of_quiz,score,remarks

11,1,2025-07-30,10,af

10,1,2025-07-30,0,

4,4,2025-07-30,50,For new programmers

3,3,2025-07-30,5,History enthusiasts

2,2,2025-07-30,65,All ages

1,1,2025-07-30,75,Beginner level







================================================

FILE: backend/app/static/exports/history_2_20250731_020610.csv

================================================

quiz_id,chapter_id,date_of_quiz,score,remarks

11,1,2025-07-30,10,af

10,1,2025-07-30,0,

4,4,2025-07-30,50,For new programmers

3,3,2025-07-30,5,History enthusiasts

2,2,2025-07-30,65,All ages

1,1,2025-07-30,75,Beginner level







================================================

FILE: backend/app/static/exports/history_2_20250731_020638.csv

================================================

quiz_id,chapter_id,date_of_quiz,score,remarks

11,1,2025-07-30,10,af

10,1,2025-07-30,0,

4,4,2025-07-30,50,For new programmers

3,3,2025-07-30,5,History enthusiasts

2,2,2025-07-30,65,All ages

1,1,2025-07-30,75,Beginner level







================================================

FILE: backend/app/static/exports/history_2_20250731_020724.csv

================================================

quiz_id,chapter_id,date_of_quiz,score,remarks

11,1,2025-07-30,10,af

10,1,2025-07-30,0,

4,4,2025-07-30,50,For new programmers

3,3,2025-07-30,5,History enthusiasts

2,2,2025-07-30,65,All ages

1,1,2025-07-30,75,Beginner level







================================================

FILE: backend/app/static/exports/history_2_20250731_021427.csv

================================================

quiz_id,chapter_id,date_of_quiz,score,remarks

11,1,2025-07-30,10,af

10,1,2025-07-30,0,

4,4,2025-07-30,50,For new programmers

3,3,2025-07-30,5,History enthusiasts

2,2,2025-07-30,65,All ages

1,1,2025-07-30,75,Beginner level







================================================

FILE: backend/app/static/exports/history_2_20250731_052407.csv

================================================

quiz_id,chapter_id,date_of_quiz,score,remarks

11,1,2025-07-30,10,af

10,1,2025-07-30,0,

4,4,2025-07-30,50,For new programmers

3,3,2025-07-30,5,History enthusiasts

2,2,2025-07-30,65,All ages

1,1,2025-07-30,75,Beginner level







================================================

FILE: backend/app/utils/__init__.py

================================================

[Empty file]





================================================

FILE: backend/app/utils/auth.py

================================================

from functools import wraps

from flask_jwt_extended import get_jwt, verify_jwt_in_request

from flask import jsonify, make_response



def role_required(required_role):

    def wrapper(fn):

        @wraps(fn)

        def decorator(*args, **kwargs):

            verify_jwt_in_request()

            claims = get_jwt()

            if claims.get("role") != required_role:

                return make_response(jsonify({"message": "Access denied"}), 403)

            return fn(*args, **kwargs)

        return decorator

    return wrapper









================================================

FILE: backend/app/utils/cache_key.py

================================================

from flask import request

from flask_jwt_extended import get_jwt



def role_based_cache_key():

    try:

        path = request.path

        role = get_jwt().get("role", "guest")

        return f"{path}|{role}"

    except Exception:

        return "default"





================================================

FILE: backend/app/utils/formatters.py

================================================

from datetime import datetime, date



def format_date(given_date):

    try:

        return datetime.strptime(given_date, "%Y-%m-%d").date()

    except:

        raise ValueError("Invalid Date Format")

    

def format_time(given_time):

    try:

        return datetime.strptime(given_time, "%H:%M").time()

    except:

        raise ValueError("Invalid Time Format")





================================================

FILE: backend/app/utils/jwt_helpers.py

================================================

[Empty file]





================================================

FILE: backend/app/utils/mail.py

================================================

from app.tasks1.email_tasks import send_email_task



def send_email(subject, recipients, body):

    send_email_task.delay(subject, recipients, body)







================================================

FILE: backend/app/utils/validators.py

================================================

from datetime import datetime, date



def validate_email(email):

    if not email:

        return "Email is required"

    if "@" not in email or "." not in email:

        return "Invalid email"

    return None



def validate_phone(phone):

    if phone is None:

        return "Phone number is required"

    try:

        phone_str = str(int(phone)) # allow numeric strings also

    except (ValueError, TypeError):

        return "Phone number must be numeric"

    if len(phone_str) != 10:

        return "Phone number must contain exactly 10 digits"

    return None



def validate_gender(gender):

    valid_genders = {"male", "female", "other", "prefer not to say"}

    if not gender:

        return "Gender is required"

    if not isinstance(gender, str):

        return "Gender must be a string"

    if gender.strip().lower() not in valid_genders:

        return "Gender is not valid"

    return None



def validate_date(given_date, before_today = False, after_today = False):

    if not given_date:

        return "Date is required"

    try:

        given_date = datetime.strptime(given_date, "%Y-%m-%d").date()

    except ValueError:

        return "Invalid Date Format. Use YYYY-MM-DD."

    today = date.today()

    if before_today:

        if given_date > today:

            return "Date cannot be in the future"

    if after_today:

        if given_date < today:

            return "Date cannot be in the past"

    return None



def validate_time(time_str):

    if not time_str:

        return "Time is required"

    try:

        # Accepts formats like "14:30", "23:59", etc.

        datetime.strptime(time_str, "%H:%M")

    except ValueError:

        return "Time must be in HH:MM (24-hour) format"

    return None



def validate_string(given_string, field, required = True):

    if not given_string:

        if required:

            return f"{field} is required"

        else:

            return None

    if not isinstance(given_string, str):

        return f"{field} must be a string"

    return None



def validate_int(given_int, field, required = True):

    if given_int is None:

        if required:

            return f"{field} is required"

        else:

            return None

    try:

        given_int = int(given_int)

        return None

    except:

        return f"{field} must be an integer"

    

def validate_bool(given_bool, field, required=True):

    if given_bool is None:

        if required:

            return None, f"{field} is required"

        else:

            return None, None



    if isinstance(given_bool, bool):

        return given_bool, None



    if isinstance(given_bool, str):

        if given_bool.lower() == "true":

            return True, None

        if given_bool.lower() == "false":

            return False, None

        return None, f"{field} is not a valid boolean"



    if isinstance(given_bool, int):

        if given_bool == 1:

            return True, None

        if given_bool == 0:

            return False, None

        return None, f"{field} is not a valid boolean"



    return None, f"{field} is not a valid boolean"

    



def validate_password(password):

    if not password or len(password) < 6:

        return "Password must be at least 6 characters"

    return None







================================================

FILE: frontend/README.md

================================================

# frontend



This template should help get you started developing with Vue 3 in Vite.



## Recommended IDE Setup



[VSCode](https://code.visualstudio.com/) + [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) (and disable Vetur).



## Customize configuration



See [Vite Configuration Reference](https://vite.dev/config/).



## Project Setup



```sh

npm install

```



### Compile and Hot-Reload for Development



```sh

npm run dev

```



### Compile and Minify for Production



```sh

npm run build

```



### Lint with [ESLint](https://eslint.org/)



```sh

npm run lint

```







================================================

FILE: frontend/eslint.config.js

================================================

import { defineConfig, globalIgnores } from 'eslint/config'

import globals from 'globals'

import js from '@eslint/js'

import pluginVue from 'eslint-plugin-vue'

import skipFormatting from '@vue/eslint-config-prettier/skip-formatting'



export default defineConfig([

  {

    name: 'app/files-to-lint',

    files: ['**/*.{js,mjs,jsx,vue}'],

  },



  globalIgnores(['**/dist/**', '**/dist-ssr/**', '**/coverage/**']),



  {

    languageOptions: {

      globals: {

        ...globals.browser,

      },

    },

  },



  js.configs.recommended,

  ...pluginVue.configs['flat/essential'],

  skipFormatting,

])







================================================

FILE: frontend/index.html

================================================

<!DOCTYPE html>

<html lang="">

  <head>

    <meta charset="UTF-8">

    <link rel="icon" href="/favicon.ico">

    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <title>Vite App</title>

  </head>

  <body>

    <div id="app"></div>

    <script type="module" src="/src/main.js"></script>

  </body>

</html>







================================================

FILE: frontend/jsconfig.json

================================================

{

  "compilerOptions": {

    "paths": {

      "@/*": ["./src/*"]

    }

  },

  "exclude": ["node_modules", "dist"]

}







================================================

FILE: frontend/package.json

================================================

{

  "name": "frontend",

  "version": "0.0.0",

  "private": true,

  "type": "module",

  "scripts": {

    "dev": "vite",

    "build": "vite build",

    "preview": "vite preview",

    "lint": "eslint . --fix",

    "format": "prettier --write src/"

  },

  "dependencies": {

    "axios": "^1.10.0",

    "bootstrap": "^5.3.5",

    "lucide-vue-next": "^0.525.0",

    "pinia": "^3.0.1",

    "vue": "^3.5.13",

    "vue-router": "^4.5.0"

  },

  "devDependencies": {

    "@eslint/js": "^9.22.0",

    "@vitejs/plugin-vue": "^5.2.3",

    "@vue/eslint-config-prettier": "^10.2.0",

    "eslint": "^9.22.0",

    "eslint-plugin-vue": "~10.0.0",

    "globals": "^16.0.0",

    "prettier": "3.5.3",

    "vite": "^6.2.4",

    "vite-plugin-vue-devtools": "^7.7.2"

  }

}







================================================

FILE: frontend/vite.config.js

================================================

import { fileURLToPath, URL } from 'node:url'



import { defineConfig } from 'vite'

import vue from '@vitejs/plugin-vue'

import vueDevTools from 'vite-plugin-vue-devtools'



// https://vite.dev/config/

export default defineConfig({

  plugins: [

    vue(),

    vueDevTools(),

  ],

  resolve: {

    alias: {

      '@': fileURLToPath(new URL('./src', import.meta.url))

    },

  },

})







================================================

FILE: frontend/.editorconfig

================================================

[*.{js,jsx,mjs,cjs,ts,tsx,mts,cts,vue,css,scss,sass,less,styl}]

charset = utf-8

indent_size = 2

indent_style = space

insert_final_newline = true

trim_trailing_whitespace = true



end_of_line = lf

max_line_length = 100







================================================

FILE: frontend/.prettierrc.json

================================================

{

  "$schema": "https://json.schemastore.org/prettierrc",

  "semi": false,

  "singleQuote": true,

  "printWidth": 100

}







================================================

FILE: frontend/src/App.vue

================================================



<template>

    <div class="wrapper">

      <component :is="navbarComponent" v-if="navbarComponent"/>

    </div>



  <RouterView :key="$route.fullPath" />

</template>



<script setup>

import UserNavBar from '@/components/nav/UserNavBar.vue';

import AdminNavBar from '@/components/nav/AdminNavBar.vue';

import GuestNavBar from '@/components/nav/GuestNavBar.vue';



import { onMounted, ref, computed } from 'vue';



const role = ref(null);



onMounted(() => {

  role.value = localStorage.getItem('role');

})



const navbarComponent = computed(() => {

  if (role.value === 'admin') return AdminNavBar;

  if (role.value === 'user') return UserNavBar;

  return GuestNavBar; // fallback

});





</script>







================================================

FILE: frontend/src/main.js

================================================

import './assets/main.css'

import 'bootstrap/dist/css/bootstrap.min.css'



import { createApp } from 'vue'

import { createPinia } from 'pinia'



import App from './App.vue'

import router from './router'



const app = createApp(App)



app.use(createPinia())

app.use(router)



app.mount('#app')







================================================

FILE: frontend/src/assets/main.css

================================================









================================================

FILE: frontend/src/components/api/axios.js

================================================

import axios from 'axios';



const apiClient = axios.create({

  baseURL: 'http://localhost:5000/api',

  headers: {

    'Content-Type': 'application/json',

  },

});



apiClient.interceptors.request.use(

  (config) => {

    const token = localStorage.getItem('token'); // or sessionStorage if preferred

    if (token) {

      config.headers.Authorization = `Bearer ${token}`;

    }

    return config;

  },

  (error) => Promise.reject(error)

);



export default apiClient;







================================================

FILE: frontend/src/components/nav/AdminNavBar.vue

================================================

<template>

  <nav class="navbar navbar-expand-lg bg-dark-subtle px-4 py-0">

    <div class="container-fluid d-flex justify-content-between align-items-center">

      <!-- Left: Logo -->

      <div class="me-auto">

        <span class="fw-bold">QUIZMASTER</span>

      </div>



      <!-- Center: Nav Items -->

      <div class="d-none d-lg-flex mx-auto" id="navbarNav">

        <ul class="navbar-nav">

          <NavItem :to="{ name: 'admin_dashboard' }">Dashboard</NavItem>

          <NavItem :to="{ name: 'admin_subjects' }">Classroom</NavItem>

          <NavItem :to="{ name: 'admin_users' }">Users</NavItem>

          <NavItem :to="{ name: 'admin_stats' }">Results</NavItem>

        </ul>

      </div>



      <!-- Right: Profile -->

      <div class="ms-auto">

        <button class="btn btn-dark" @click="logout">Logout</button>

      </div>



    </div>

  </nav>

</template>



<script setup>

import NavItem from '@/components/nav/NavItem.vue';

import { useRouter } from 'vue-router';



const router = useRouter();



const logout = () => {

  if (window.confirm("Are you sure you want to logout?")) {

    localStorage.removeItem('token');

    localStorage.removeItem('role');

    router.push('/login');

  }

};





</script>







================================================

FILE: frontend/src/components/nav/GuestNavBar.vue

================================================

<template>

  <nav class="navbar navbar-expand-lg bg-dark-subtle px-4 py-0">

    <div class="container-fluid d-flex justify-content-between align-items-center">

      <!-- Left: Logo -->

      <div class="me-auto">

        <span class="fw-bold">QUIZMASTER</span>

      </div>



      <!-- Center: Nav Items -->

      <div class="d-none d-lg-flex mx-auto" id="navbarNav">

        <ul class="navbar-nav">

          <NavItem :to="{ name: 'guest_home' }">Home</NavItem>

          <NavItem :to="{ name: 'login' }">Login</NavItem>

          <NavItem :to="{ name: 'signup' }">Register</NavItem>

        </ul>

      </div>



      <!-- Right: Profile -->

      <div class="ms-auto">

      </div>



    </div>

  </nav>

</template>



<script setup>

import NavItem from '@/components/nav/NavItem.vue';

</script>







================================================

FILE: frontend/src/components/nav/NavItem.vue

================================================

<!-- NavItem.vue -->

<template>

  <RouterLink

    :to="to"

    class="nav-link"

    active-class="active"

  >

    <slot />

  </RouterLink>

</template>



<script setup>



import { RouterLink } from 'vue-router';



defineProps({

  to: { type: Object, required: true }

});

</script>



<style scoped>

.nav-link {

  padding: 0.5rem 1rem;

  color: #333;

  text-decoration: none;

  font-size: 1.2rem;

  margin-left: 1rem;

  /* transition: all 0.1s ease-in-out; */

}



.nav-link:hover {

  color: #0056b3;

  background-color: #e7f1ff;

  border-radius: 0.25rem;

}



.nav-link.active {

  font-size: 1.4rem;

  font-weight: bold;

  color: #0d6efd;           /* Bootstrap primary */

  border-bottom: 5px solid #0d6efd;

}



</style>







================================================

FILE: frontend/src/components/nav/UserNavBar.vue

================================================

<template>

  <nav class="navbar navbar-expand-lg bg-dark-subtle px-4 py-0">

    <div class="container-fluid d-flex justify-content-between align-items-center">

      <!-- Left: Logo -->

      <div class="me-auto">

        <span class="fw-bold">QUIZMASTER</span>

      </div>



      <!-- Center: Nav Items -->

      <div class="d-none d-lg-flex mx-auto" id="navbarNav">

        <ul class="navbar-nav">

          <NavItem :to="{ name: 'home' }">Home</NavItem>

          <NavItem :to="{ name: 'subject' }">Classroom</NavItem>

          <NavItem :to="{ name: 'quizzeria' }">Quizzeria</NavItem>

          <NavItem :to="{ name: 'result' }">Results</NavItem>

        </ul>

      </div>



      <!-- Right: Profile -->

      <div class="ms-auto">

        <NavItem :to="{ name: 'profile' }">Profile</NavItem>

      </div>



    </div>

  </nav>

</template>



<script setup>

import NavItem from '@/components/nav/NavItem.vue';

</script>







================================================

FILE: frontend/src/components/profile/AboutMe.vue

================================================

<template>

  <!--

    This is the main container for the "About Me" section.

    We use Bootstrap's grid system here. The 'row' class sets up the grid,

    and 'col-12' ensures this component takes up the full width of its parent

    on all screen sizes, from mobile to desktop.

  -->

  <div class="row g-4">

    <div class="col-12">

      <div class="details-card card h-100">

        <div class="card-body p-4">



          <!-- Card Title -->

          <h3 class="card-title-alt">

            <i class="bi bi-person-circle me-2"></i>About Me

          </h3>



          <!--

            This is where the magic happens.

            The v-if directive checks the 'editingProfile' prop passed down from the parent.

            If it's false, it shows the DefaultAbout component.

            If it's true, it shows the EditingAbout component instead.

          -->



          <!-- Display Mode -->

          <div v-if="!props.editingProfile">

            <DefaultAbout />

          </div>



          <!-- Editing Mode -->

          <div v-else>

            <!--

              When the user finishes editing and clicks "Save" or "Cancel"

              inside the EditingAbout component, it will emit a 'toggle' event.

              We listen for that event here and pass it up to the parent component

              to tell it to switch back to the display mode.

            -->

            <EditingAbout @toggle="emit('toggle')" />

          </div>

        </div>

      </div>

    </div>

  </div>

</template>



<script setup>

// We're importing the two child components that this component will switch between.

import DefaultAbout from '@/components/profile/DefaultAbout.vue';

import EditingAbout from '@/components/profile/EditingAbout.vue';



// This defines the properties (props) that this component accepts from its parent.

// 'editingProfile' is a boolean that tells us whether to show the display view or the edit form.

const props = defineProps(['editingProfile']);



// This defines the custom events that this component can send (emit) up to its parent.

// We use 'toggle' to signal that the view should be switched.

const emit = defineEmits(['toggle']);

</script>



<style scoped>

/* These styles are "scoped", meaning they will only apply to this component

  and won't interfere with the styling of other parts of your application.

*/



/* Styles for the main card that holds the profile information. */

.details-card {

  background-color: #ffffff;

  border: 1px solid #e9ecef;

  border-radius: 0.75rem;

  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);

}



/* Styles for the title inside the card. */

.card-title-alt {

  font-weight: 600;

  color: #212529;

}



/* This creates a two-column layout for the definition list (dl) used in the DefaultAbout component.

  The first column (dt) is sized to fit its content, and the second column (dd) takes the rest of the space.

*/

.details-card dl {

  display: grid;

  grid-template-columns: 150px 1fr;

  gap: 0.75rem;

}



/* Styles for the term (e.g., "Email") in the definition list. */

.details-card dt {

  color: #6c757d;

}



/* Styles for the definition (e.g., "user@example.com") in the list. */

.details-card dd {

  color: #212529;

  font-weight: 600;

}

</style>







================================================

FILE: frontend/src/components/profile/DefaultAbout.vue

================================================

<template>

  <!--

    This is a definition list that displays the user's profile information.

    The 'profile-details-list' class is used to apply our custom responsive styles.

  -->

  <dl class="profile-details-list">

    <dt>Email</dt>

    <dd>{{ profile.email }}</dd>



    <dt>Phone No.</dt>

    <dd>{{ profile.phone }}</dd>



    <dt>Gender</dt>

    <dd>{{ profile.gender }}</dd>



    <dt>Date of Birth</dt>

    <dd>{{ profile.dob }}</dd>



    <dt>Qualification</dt>

    <dd>{{ profile.qualification }}</dd>



    <dt>College</dt>

    <dd>{{ profile.college }}</dd>

  </dl>

</template>



<script setup>

// We're using Pinia for state management.

import { useProfileStore } from '@/stores/profileStore';

import { storeToRefs } from 'pinia';



// This creates an instance of our profile store.

const profileStore = useProfileStore();



// 'storeToRefs' makes the state properties (like 'profile') reactive,

// so the component will automatically update if the data in the store changes.

const { profile } = storeToRefs(profileStore);

</script>



<style scoped>

/* These styles are "scoped", meaning they only apply to this component.

*/



/* By default (for desktop screens), we use a CSS grid to create a clean,

  two-column layout. The first column is for the labels (dt) and the

  second is for the data (dd).

*/

.profile-details-list {

  display: grid;

  grid-template-columns: 150px 1fr; /* First column is 150px wide, second takes the rest. */

  gap: 1rem 0.75rem; /* Adds some space between rows and columns. */

  margin-top: 1.5rem; /* Adds some space below the card title. */

}



/* Styles for the term/label (e.g., "Email"). */

.profile-details-list dt {

  font-weight: 500;

  color: #6c757d;

}



/* Styles for the definition/data (e.g., "user@example.com"). */

.profile-details-list dd {

  font-weight: 600;

  color: #212529;

  margin: 0;

}



/* This is a media query for responsiveness.

  These styles will ONLY apply on screens that are 768px wide or smaller (like mobile phones).

*/

@media (max-width: 768px) {

  .profile-details-list {

    /* We switch the grid to a single column for a better vertical layout on small screens. */

    grid-template-columns: 1fr;

    gap: 0.25rem; /* Reduce the gap between items for a more compact look. */

  }



  /* On mobile, we make the label bold and add some space below it to clearly separate it

     from the data that now appears on the next line.

  */

  .profile-details-list dt {

    font-weight: 700;

    margin-top: 0.75rem;

  }

}

</style>







================================================

FILE: frontend/src/components/profile/EditingAbout.vue

================================================

<template>

  <!--

    This form is used to edit the user's profile details.

    The '@submit.prevent' modifier stops the default browser behavior of reloading the page

    when the form is submitted, allowing our 'save_and_reload' function to handle it instead.

  -->

  <form @submit.prevent="save_and_reload">

    <!--

      We use Bootstrap's grid system ('row' and 'col-md-6') to make the layout responsive.

      On medium screens (md) and larger, the fields will appear in two columns.

      On smaller screens (like mobile), they will automatically stack into a single column.

    -->

    <div class="row mt-3">

      <div class="col-md-6">

        <div class="mb-3">

          <label for="edit-email" class="form-label fw-bold">Email</label>

          <input type="email" class="form-control" id="edit-email" v-model="newProfile.email">

        </div>

      </div>

      <div class="col-md-6">

        <div class="mb-3">

          <label for="edit-phone" class="form-label fw-bold">Phone No.</label>

          <input

            type="tel"

            class="form-control"

            id="edit-phone"

            v-model="newProfile.phone"

            inputmode="numeric"

            @input="newProfile.phone = newProfile.phone.replace(/[^0-9]/g, '')"

          >

          <!-- This validation message only appears if the phone number is not 10 digits -->

          <small v-if="!validPhone" class="text-danger">Please enter a valid 10-digit phone number</small>

        </div>

      </div>

    </div>



    <div class="row">

      <div class="col-md-6">

        <div class="mb-3">

          <label for="edit-gender" class="form-label fw-bold">Gender</label>

          <select class="form-select" id="edit-gender" v-model="newProfile.gender">

            <option>Male</option>

            <option>Female</option>

            <option>Other</option>

          </select>

        </div>

      </div>

      <div class="col-md-6">

        <div class="mb-3">

          <label for="edit-dob" class="form-label fw-bold">Date of Birth</label>

          <!-- The 'max' attribute prevents users from selecting a future date -->

          <input type="date" class="form-control" id="edit-dob" v-model="newProfile.dob" :max="today">

        </div>

      </div>

    </div>



    <div class="row">

      <div class="col-md-6">

        <div class="mb-3">

          <label for="edit-qualification" class="form-label fw-bold">Qualification</label>

          <input type="text" class="form-control" id="edit-qualification" v-model="newProfile.qualification">

        </div>

      </div>

      <div class="col-md-6">

        <div class="mb-3">

          <label for="edit-college" class="form-label fw-bold">College</label>

          <input type="text" class="form-control" id="edit-college" v-model="newProfile.college">

        </div>

      </div>

    </div>



    <!-- Form Action Buttons -->

    <div class="mt-4">

      <button type="submit" class="btn btn-primary btn-lg">

        Save Changes

      </button>

      <!--

        When the user clicks "Cancel", we don't submit the form.

        Instead, we just emit the 'toggle' event to tell the parent component

        to switch back to the display view.

      -->

      <button type="button" class="btn btn-secondary btn-lg mx-3" @click="emit('toggle')">

        Cancel

      </button>

    </div>



    <!-- This div is used to display any error messages from the store -->

    <div v-if="errorType" class="text-center mb-0 mt-4">

      <p class="text-danger fs-6">{{ errorType }}</p>

    </div>

  </form>

</template>



<script setup>

import { ref, computed, onMounted } from 'vue';

import { useProfileStore } from '@/stores/profileStore';

import { storeToRefs } from 'pinia';



// This defines the 'toggle' event that this component can send to its parent.

const emit = defineEmits(['toggle']);



// Initialize the Pinia store.

const profileStore = useProfileStore();



// Make the 'profile' and 'errorType' state from the store reactive.

const { profile, errorType } = storeToRefs(profileStore);



// This computed property validates the phone number in real-time.

const validPhone = computed(() => /^\d{10}$/.test(newProfile.value.phone) || !newProfile.value.phone);



// This computed property gets today's date in YYYY-MM-DD format for the date picker.

const today = computed(() => new Date().toISOString().split('T')[0]);



// This 'ref' will hold a copy of the profile data for editing,

// so we don't modify the original data in the store directly.

const newProfile = ref({});



// The 'onMounted' hook runs when the component is first created.

// We use it to pre-fill the form with the user's current profile data.

onMounted(() => {

  newProfile.value = { ...profile.value };

});



// This function is called when the form is submitted.

const save_and_reload = async () => {

  try {

    // Call the 'editProfile' action in our Pinia store.

    await profileStore.editProfile(newProfile.value);

    // If the save is successful, emit the 'toggle' event to switch the view.

    emit('toggle');

    alert("Profile Edited Successfully!");

  } catch (error) {

    // If the store action throws an error, it will be caught here.

    // The 'errorType' from the store will be displayed in the template.

    console.log(error);

  }

};

</script>



<style scoped>

/* No custom styles are needed for this component as Bootstrap handles the layout and styling. */

</style>







================================================

FILE: frontend/src/components/profile/ProfileCard.vue

================================================

<template>

  <!--

    This component is designed to be a reusable "widget" within a Bootstrap grid.

    - 'col-12': On extra-small screens (like mobile phones), this card will take up the full 12-column width.

    - 'col-md-4': On medium screens (like tablets and desktops) and larger, it will take up 4 of the 12 columns,

      allowing three of these cards to fit side-by-side in a row.

  -->

  <div class="col-12 col-md-4">

    <div class="stat-card">

      <!-- The icon provides a visual cue for the type of statistic being displayed. -->

      <i class="bi bi-joystick stat-icon"></i>



      <!--

        This is a "named slot". It acts as a placeholder.

        When you use this component, you can inject any content you want into this specific spot.

        This slot is intended for the main statistic value (e.g., "85", "120").

      -->

      <span class="stat-value">

        <slot name="stat"></slot>

      </span>



      <!--

        This is another named slot, intended for the descriptive label

        that explains what the statistic represents (e.g., "Quizzes Completed").

      -->

      <span class="stat-label">

        <slot name="content"></slot>

      </span>

    </div>

  </div>

</template>



<script setup>

// This component is purely for presentation, so no JavaScript logic is needed.

// It receives all its content through slots from the parent component.

</script>



<style scoped>

/* These styles are "scoped", meaning they only apply to this StatCard component.

*/



/* Styles for the main card container. */

.stat-card {

  background-color: #ffffff;

  padding: 1.5rem;

  border-radius: 0.75rem;

  /* Flexbox is used to easily center the content vertically and horizontally. */

  display: flex;

  flex-direction: column;

  align-items: center;

  gap: 0.5rem; /* Adds a small space between the icon, value, and label. */

  border: 1px solid #e9ecef;

  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);

  height: 100%; /* Ensures all cards in a row have the same height. */

}



/* Styles for the icon at the top of the card. */

.stat-icon {

  font-size: 2.5rem;

  color: var(--bs-primary);

}



/* Styles for the large number (the main statistic). */

.stat-value {

  font-size: 2.25rem;

  font-weight: 700;

}



/* Styles for the small descriptive text at the bottom. */

.stat-label {

  font-size: 1rem;

  color: #6c757d;

}

</style>







================================================

FILE: frontend/src/components/profile/ProfileStatCards.vue

================================================

<template>

  <!--

    This 'row' class is from Bootstrap. It creates a flexbox container

    that allows the 'col-md-4' classes inside your ProfileCard component

    to work correctly, placing them side-by-side on larger screens.

  -->

  <div class="row g-4">

    <ProfileCard>

      <template #stat>{{ props.quizzesCompleted }}</template>

      <template #content>Quizzes Completed</template>

    </ProfileCard>



    <ProfileCard>

      <template #stat>{{ props.daysSince }}</template>

      <template #content>Days Active</template>

    </ProfileCard>



    <ProfileCard>

      <template #stat>{{ props.totalXP }}</template>

      <template #content>Total XP Earned</template>

    </ProfileCard>

  </div>

</template>



<script setup>

import ProfileCard from '@/components/profile/ProfileCard.vue'



const props = defineProps(['quizzesCompleted', 'daysSince', 'totalXP'])

</script>







================================================

FILE: frontend/src/components/profile/SettingsCard.vue

================================================

<template>

  <div class="details-card card h-100">

    <div class="card-body p-4 d-flex flex-column">

      <h3 class="card-title-alt"><i class="bi bi-gear-wide-connected me-2"></i>Settings</h3>

      <p class="text-muted">Manage your profile information and account security.</p>

      <div class="mt-auto">

        <div class="d-grid mb-2">

          <button class="btn btn-primary btn-lg" @click="$emit('switch')" v-if="!props.editingProfile">

            Edit Profile

          </button>

        </div>

        <div class="text-center">

          <a href="#" class="text-secondary small">Change Password</a>

        </div>

      </div>

    </div>

  </div>



</template>



<script setup>



defineEmits(['switch'])

const props = defineProps(['editingProfile'])



</script>



<style scoped>

/* Details & Settings Cards */

.details-card {

  background-color: #ffffff;

  border: 1px solid #e9ecef;

  border-radius: 0.75rem;

  box-shadow: 0 4px 15px rgba(0,0,0,0.05);

}

.card-title-alt { font-weight: 600; color: #212529; }

.details-card dl { display: grid; grid-template-columns: 150px 1fr; gap: 0.75rem; }

.details-card dt { color: #6c757d; }

.details-card dd { color: #212529; font-weight: 600; }



</style>







================================================

FILE: frontend/src/components/profile/TopSection.vue

================================================

<template>

  <!--

    This is the main header for the user's profile page.

    It uses Bootstrap's flexbox utilities ('d-flex', 'align-items-center', 'justify-content-between')

    to create a responsive layout. On small screens, the elements will stack gracefully if needed,

    and on larger screens, they will sit side-by-side.

  -->

  <header class="player-header">

    <div class="d-flex align-items-center">

      <img src="https://placehold.co/120x120/333/FFF?text=AVATAR" alt="User Avatar" class="player-avatar"/>

      <div class="player-info ms-4">

        <h1 class="player-name">{{ props.profile.username }}</h1>

        <p class="player-joined text-muted">Member Since: {{ props.profile.joiningDate }}</p>

      </div>

    </div>

    <div class="player-level-info">

      <div class="level-badge">

        <span class="level-text">LEVEL</span>

        <span class="level-number">{{ props.level + 1 }}</span>

      </div>

    </div>

  </header>



  <!-- This wrapper contains the XP bar and its labels. -->

  <div class="xp-bar-wrapper my-4">

    <div class="d-flex justify-content-between mb-1 text-secondary">

      <span class="fw-bold">XP Progress</span>

      <span class="fw-bold">{{ props.levelXP }}/100 XP</span>

    </div>

    <!-- The progress bar component from Bootstrap, used to visually represent the user's XP. -->

    <div class="progress" role="progressbar" :aria-valuenow="props.levelXP" aria-valuemin="0" aria-valuemax="100">

      <div class="progress-bar xp-bar" :style="{ width: props.levelXP + '%' }"></div>

    </div>

  </div>

</template>



<script setup>

// This defines the properties (props) that this component receives from its parent.

// It expects to get the user's level, XP, and their full profile object.

const props = defineProps(['level', 'levelXP', 'profile']);

</script>



<style scoped>

/* These styles are "scoped", meaning they only apply to this component.

*/



/* Styles for the main header container. */

.player-header {

  display: flex;

  justify-content: space-between;

  align-items: center;

}



/* Styles for the user's circular avatar image. */

.player-avatar {

  width: 120px;

  height: 120px;

  border-radius: 50%;

  border: 4px solid #ffffff;

  box-shadow: 0 4px 15px rgba(0,0,0,0.1);

}



/* Styles for the user's name. */

.player-name {

  font-size: 2.5rem;

  font-weight: 700;

}



/* Styles for the circular level badge. */

.level-badge {

  background: linear-gradient(145deg, #0d6efd, #0b5ed7);

  color: white;

  width: 100px;

  height: 100px;

  border-radius: 50%;

  display: flex;

  flex-direction: column;

  align-items: center;

  justify-content: center;

  border: 4px solid #fff;

  box-shadow: 0 0 15px rgba(0, 123, 255, 0.4);

}



/* Styles for the "LEVEL" text inside the badge. */

.level-text {

  font-size: 0.8rem;

  font-weight: 600;

}



/* Styles for the large level number inside the badge. */

.level-number {

  font-size: 2.5rem;

  font-weight: 700;

  line-height: 1; /* Improves vertical alignment. */

}



/* Styles for the outer container of the progress bar. */

.xp-bar-wrapper .progress {

  height: 20px;

  background-color: #e9ecef;

  border-radius: 10px;

  padding: 3px;

}



/* Styles for the inner, colored part of the XP bar. */

.xp-bar {

  background: linear-gradient(90deg, #0d6efd, #3c8ffb);

  border-radius: 7px;

}

</style>







================================================

FILE: frontend/src/components/quiz/QuizFront.vue

================================================

<template>

  <div class="quiz-start-page-container">

    <div class="quiz-card">

      <header class="quiz-header">

        <div class="quiz-icon">

          <i class="bi bi-file-earmark-text-fill"></i>

        </div>

        <h1 class="quiz-title">{{ selectedQuiz.name }}</h1>

        <span class="quiz-id-badge">ID: {{ selectedQuiz.id }}</span>

      </header>



      <div class="quiz-body">

        <section class="quiz-section">

          <h2 class="section-title">About this Quiz</h2>

          <p class="quiz-description">{{ selectedQuiz.description }}</p>

        </section>



        <hr class="section-divider">



        <section class="quiz-section">

          <h2 class="section-title">Instructions</h2>

          <ul class="instructions-list">

            <li>This quiz consists of <strong> only multiple-choice questions</strong>.</li>

            <li>You will have <strong>{{ selectedQuiz.duration }} minutes</strong> to complete the quiz once you begin.</li>

            <li>The quiz can only be attempted <strong>once</strong>.</li>

            <li>Do not close the browser window or navigate away from the quiz page.</li>

          </ul>

        </section>

      </div>



      <footer class="quiz-footer">

        <button class="btn btn-primary start-quiz-btn" @click="beginQuiz">

          Start/Resume Quiz

        </button>

        {{ errorType }}

      </footer>

    </div>

  </div>

</template>



<script setup>



import { useQuizStore } from '@/stores/quizStore';

import { storeToRefs } from 'pinia';



const emits = defineEmits(['startQuiz'])



const quizStore = useQuizStore();



const { selectedQuiz, errorType } = storeToRefs(quizStore);



const beginQuiz = async () => {

  try{

    await quizStore.startQuiz();

    emits('startQuiz');

  }

  catch(error){

    console.log(error);

  }

}





</script>



<style scoped>

/* Define color palette for easy customization */

:root {

  --primary-color: #0d6efd;

  --light-gray-color: #f8f9fa;

  --medium-gray-color: #e9ecef;

  --dark-gray-color: #6c757d;

  --text-color: #212529;

}



/* Full Page Container */

.quiz-start-page-container {

  display: flex;

  align-items: center;

  justify-content: center;

  min-height: 100vh;

  background-color: var(--light-gray-color);

  font-family: 'Segoe UI', 'Roboto', sans-serif;

  padding: 2rem;

}



/* Main Card Styling */

.quiz-card {

  width: 100%;

  max-width: 700px;

  background-color: #ffffff;

  border-radius: 1rem;

  box-shadow: 0 10px 35px rgba(0, 0, 0, 0.08);

  overflow: hidden;

  display: flex;

  flex-direction: column;

}



/* Card Header */

.quiz-header {

  text-align: center;

  padding: 2.5rem 2rem;

  background-color: var(--primary-color);

  position: relative;

}

.quiz-icon {

  font-size: 3rem;

  margin-bottom: 0.5rem;

  opacity: 0.8;

}

.quiz-title {

  font-size: 3rem;

  font-weight: 700;

  margin: 0;

}

.quiz-id-badge {

  position: absolute;

  top: 1rem;

  right: 1rem;

  background-color: rgba(255, 255, 255, 0.2);

  padding: 0.3rem 0.7rem;

  border-radius: 20px;

  font-size: 0.8rem;

  font-weight: 600;

}



/* Card Body */

.quiz-body {

  padding: 2rem 2.5rem;

}

.section-title {

  font-size: 1.25rem;

  font-weight: 600;

  color: var(--text-color);

  margin-bottom: 1rem;

}

.quiz-description {

  font-size: 1.1rem;

  line-height: 1.6;

  color: var(--dark-gray-color);

}

.section-divider {

  border: 0;

  height: 1px;

  background-color: var(--medium-gray-color);

  margin: 2rem 0;

}



/* Instructions List */

.instructions-list {

  list-style-type: none;

  padding-left: 0;

  font-size: 1.05rem;

  color: #495057;

}

.instructions-list li {

  padding-left: 2rem;

  position: relative;

  margin-bottom: 0.75rem;

}

.instructions-list li::before {

  content: '✓';

  color: var(--primary-color);

  position: absolute;

  left: 0;

  font-weight: 700;

  font-size: 1.2rem;

}



/* Card Footer */

.quiz-footer {

  padding: 1.5rem 2.5rem;

  background-color: var(--light-gray-color);

  text-align: center;

  border-top: 1px solid var(--medium-gray-color);

}

.start-quiz-btn {

  width: 100%;

  padding: 1rem;

  font-size: 1.5rem;

  font-weight: 700;

  border: none;

  border-radius: 0.5rem;

  cursor: pointer;

  transition: all 0.2s ease-in-out;

}

.start-quiz-btn:hover {

  opacity: 0.9;

  box-shadow: 0 5px 15px rgba(13, 110, 253, 0.4);

}

</style>







================================================

FILE: frontend/src/components/quiz/QuizPage.vue

================================================

<template>

  <div class="quiz-page">

    <header class="quiz-header">

      <div class="container">

        <h1 class="quiz-name">{{ selectedQuiz.name }}</h1>

        <div class="timer">

          <i class="bi bi-stopwatch-fill"></i>

          <span>Time Left: <strong>{{ minutes }} : {{ seconds }} minutes</strong></span>

        </div>

      </div>

    </header>



    <div class="container quiz-layout">

      <main class="question-area">

        <div v-for="(question, index) in questions" :key="question.id">

          <div v-show="index === currentQuestionIndex" class="question-card">

            <div class="question-header">

              <span class="question-number">Question {{ index + 1 }}</span>

              <span class="question-marks">{{ question.marks }} Marks</span>

            </div>

            <p class="question-statement">{{ question.statement }}</p>



            <div class="options-container">

              <label

                v-for="option in question.options"

                :key="option.id"

                class="option-label"

                :class="{ 'selected': userAnswers[question.id] === option.id }"

              >

                <input

                  type="radio"

                  :name="'question-' + question.id"

                  :value="option.id"

                  v-model="userAnswers[question.id]"

                  class="option-radio"

                >

                <span class="option-text">{{ option.text }}</span>

              </label>

            </div>

          </div>

        </div>

        <div class="question-nav-buttons">

          <button @click="prevQuestion" :disabled="currentQuestionIndex === 0" class="btn-nav">

            <i class="bi bi-arrow-left"></i> Previous

          </button>

          <button @click="nextQuestion" :disabled="currentQuestionIndex === questions.length - 1" class="btn-nav">

            Next <i class="bi bi-arrow-right"></i>

          </button>

        </div>

      </main>



      <aside class="navigation-panel">

        <div class="navigation-card">

          <h3 class="panel-title">Question Palette</h3>

          <div class="question-grid">

            <button

              v-for="(question, index) in questions"

              :key="question.id"

              class="question-grid-item"

              :class="{

                'current': index === currentQuestionIndex,

                'answered': userAnswers[question.id] !== undefined

              }"

              @click="goToQuestion(index)"

            >

              {{ index + 1 }}

            </button>

          </div>

          <button class="submit-btn" @click="submit()">Submit Quiz</button>

        </div>

      </aside>

    </div>

  </div>

</template>



<script setup>

import { computed, onBeforeUnmount, onMounted, ref, watch } from 'vue';

import { useQuizStore } from '@/stores/quizStore';

import { storeToRefs } from 'pinia';

import { useRouter } from 'vue-router';



const router = useRouter();

const quizStore = useQuizStore();



const { questions, selectedQuiz, remainingTime } = storeToRefs(quizStore);



const currentQuestionIndex = ref(0);



// Helper function to safely get and parse answers from localStorage

const getInitialAnswers = () => {

  const savedAnswers = localStorage.getItem('quizAnswers');

  if (savedAnswers) {

    try {

      // Parse the stored JSON string back into a JavaScript object

      return JSON.parse(savedAnswers);

    } catch (e) {

      console.error("Error parsing saved answers:", e);

      // If data is corrupted, start with an empty object

      return {};

    }

  }

  // If nothing is in storage, start with an empty object

  return {};

};



// Initialize the ref with the data from localStorage

const userAnswers = ref(getInitialAnswers());



// The watcher to save subsequent changes remains the same

watch(userAnswers, (newAnswers) => {

  localStorage.setItem('quizAnswers', JSON.stringify(newAnswers));

}, {

  deep: true

});



const parseAnswers = (answers) => {

  let parsedAns = []

  for (let [q_id, o_id] of Object.entries(answers)){

    const ans = {

      "question_id": Number(q_id),

      "option_id": o_id

    }

    parsedAns.push(ans);

  };

  return {"responses": parsedAns};

}



const submit = async () => {

  const parsedAns = parseAnswers(userAnswers.value);

  await quizStore.submitQuiz(parsedAns);

  localStorage.removeItem('quizAnswers');

  router.push('/quizzeria');

}



const totalSeconds = ref(remainingTime.value * 60);

let timer = null;



const minutes = computed(() => Math.floor(totalSeconds.value / 60));

const seconds = computed(() => totalSeconds.value % 60);



const startCountdown = () => {

  timer = setInterval(() => {

    totalSeconds.value--;

    if(totalSeconds.value < 30){

      submit();

      clearInterval(timer);

    }

  }, 1000)

}



onMounted(() => {

  startCountdown();

});



onBeforeUnmount(() => {

  clearInterval(timer);

})



// --- Question Navigation ---

const nextQuestion = () => { if (currentQuestionIndex.value < questions.value.length - 1) currentQuestionIndex.value++; };

const prevQuestion = () => { if (currentQuestionIndex.value > 0) currentQuestionIndex.value--; };

const goToQuestion = (index) => { currentQuestionIndex.value = index; };

</script>



<style scoped>

.quiz-page { background-color: #f0f2f5; min-height: 100vh; font-family: 'Segoe UI', 'Roboto', sans-serif; }

.container { width: 100%; max-width: 1200px; margin: 0 auto; padding: 0 1rem; }



/* Sticky Header */

.quiz-header {

  position: sticky;

  top: 0;

  z-index: 100;

  background-color: #fff;

  box-shadow: 0 2px 10px rgba(0,0,0,0.1);

  padding: 1rem 0;

  border-bottom: 1px solid #dee2e6;

}

.quiz-header .container { display: flex; justify-content: space-between; align-items: center; }

.quiz-name { font-size: 1.5rem; font-weight: 600; margin: 0; }

.timer { font-size: 1.25rem; display: flex; align-items: center; gap: 0.5rem; background-color: #ffeeda; color: #d9534f; padding: 0.5rem 1rem; border-radius: 0.5rem; }



/* Main Layout */

.quiz-layout { display: flex; gap: 2rem; padding-top: 2rem; }

.question-area { flex: 1; }

.navigation-panel { width: 300px; }



/* Question Card */

.question-card { background-color: #fff; border-radius: 0.75rem; padding: 2rem; box-shadow: 0 2px 10px rgba(0,0,0,0.05); }

.question-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 1.5rem; border-bottom: 1px solid #e9ecef; padding-bottom: 1rem; }

.question-number { font-size: 1.1rem; font-weight: 600; color: #0d6efd; }

.question-marks { font-size: 0.9rem; font-weight: 500; background-color: #e9ecef; padding: 0.25rem 0.5rem; border-radius: 4px; }

.question-statement { font-size: 1.25rem; margin-bottom: 2rem; line-height: 1.6; }

.options-container { display: flex; flex-direction: column; gap: 0.75rem; }

.option-label {

  display: flex;

  align-items: center;

  padding: 1rem;

  border: 1px solid #ced4da;

  border-radius: 0.5rem;

  cursor: pointer;

  transition: all 0.2s ease;

}

.option-label:hover { background-color: #f8f9fa; }

.option-label.selected { border-color: #0d6efd; background-color: #e7f1ff; font-weight: 600; }

.option-radio { display: none; }

.option-text { margin-left: 0.75rem; }

.question-nav-buttons { display: flex; justify-content: space-between; margin-top: 2rem; }

.btn-nav { background: none; border: 1px solid #ced4da; padding: 0.75rem 1.5rem; border-radius: 0.5rem; cursor: pointer; font-weight: 600; display: flex; align-items: center; gap: 0.5rem; }

.btn-nav:disabled { opacity: 0.5; cursor: not-allowed; }



/* Navigation Panel */

.navigation-card { background-color: #fff; border-radius: 0.75rem; padding: 1.5rem; position: sticky; top: 110px; box-shadow: 0 2px 10px rgba(0,0,0,0.05); }

.panel-title { font-size: 1.2rem; font-weight: 600; margin-bottom: 1rem; }

.question-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(40px, 1fr)); gap: 0.75rem; margin-bottom: 1.5rem; }

.question-grid-item {

  width: 40px;

  height: 40px;

  border: 1px solid #ced4da;

  background-color: #fff;

  border-radius: 0.5rem;

  cursor: pointer;

  font-weight: 600;

  transition: all 0.2s ease;

}

.question-grid-item:hover { background-color: #f8f9fa; }

.question-grid-item.answered { background-color: #198754; color: white; border-color: #198754; }

.question-grid-item.current { background-color: #0d6efd; color: white; border-color: #0d6efd; transform: scale(1.1); }

.submit-btn { width: 100%; padding: 0.75rem; font-size: 1rem; font-weight: 600; color: white; background-color: #dc3545; border: none; border-radius: 0.5rem; cursor: pointer; }

</style>







================================================

FILE: frontend/src/components/quiz/QuizResult.vue

================================================

<template>



  <div class="quiz-results-page" v-if="quizAnswers">

    <div class="container">

      <!-- 1. Results Header & Summary -->

      <header class="results-header">

        <div class="summary-card">

          <h1 class="quiz-title">{{ quizAnswers[0]?.question.quiz_name || 'Quiz Results' }}</h1>

          <div class="summary-stats">

            <div class="stat-item score">

              <span class="stat-label">Final Score</span>

              <span class="stat-value">{{ userScore }} / {{ totalMarks }} </span>

            </div>



            <div class="stat-item correct">

              <span class="stat-label">Correct Answers</span>

              <span class="stat-value">{{ correctAnswersCount }}</span>

            </div>

            <div class="stat-item incorrect">

              <span class="stat-label">Incorrect Answers</span>

              <span class="stat-value">{{ quizAnswers.length - correctAnswersCount }}</span>

            </div>

          </div>

        </div>

      </header>







      <!-- 2. List of Questions and Answers -->

      <main class="results-list">

        <div v-for="(result, index) in quizAnswers" :key="result.question.id" class="question-result-card">

          <div class="question-header">

            <span class="question-number">Question {{ index + 1 }}</span>

            <span class="question-marks">{{ result.question.marks }} Marks</span>

          </div>

          <p class="question-statement">{{ result.question.statement }}</p>



          <div class="options-container">

            <div

              v-for="option in result.question.options"

              :key="option.id"

              class="option-item"

              :class="getOptionClass(option, result.selected_option)"

            >

              <i class="bi option-icon"></i>

              <span class="option-text">{{ option.text }}</span>

            </div>

          </div>

        </div>

      </main>

    </div>

  </div>

  <div v-else>

    Loadng

  </div>

</template>



<script setup>

import { computed, onMounted } from 'vue';

import { useQuizStore } from '@/stores/quizStore';

import { storeToRefs } from 'pinia';



const quizStore = useQuizStore();



const getAns = async () => {

  await quizStore.getAnswers();

}



const { quizAnswers } = storeToRefs(quizStore);



onMounted(() => getAns());



// --- Computed Properties for Summary ---

const totalMarks = computed(() => {

  return quizAnswers.value.reduce((total, result) => total + result.question.marks, 0);

});



const userScore = computed(() => {

  return quizAnswers.value.reduce((score, result) => {

    const correctOption = result.question.options.find(opt => opt.is_correct);

    if (result.selected_option.id === correctOption.id) {

      return score + result.question.marks;

    }

    return score;

  }, 0);

});



const correctAnswersCount = computed(() => {

  return quizAnswers.value.filter(result => {

    const correctOption = result.question.options.find(opt => opt.is_correct);

    return result.selected_option.id === correctOption.id;

  }).length;

});



// --- Styling Logic ---

const getOptionClass = (option, selectedOption) => {

  const isSelected = option.id === selectedOption.id;



  if (option.is_correct) {

    return 'correct'; // Always highlight the correct answer in green

  }

  if (isSelected && !option.is_correct) {

    return 'incorrect'; // If this incorrect option was selected, highlight it in red

  }

  return 'neutral'; // All other non-selected, incorrect options

};

</script>



<style scoped>

.quiz-results-page {

  background-color: #f4f7f9;

  min-height: 100vh;

  padding: 2rem 0;

  font-family: 'Segoe UI', 'Roboto', sans-serif;

}



.container {

  max-width: 800px;

  margin: 0 auto;

}



/* Header & Summary */

.results-header {

  margin-bottom: 2rem;

}

.summary-card {

  background-color: #fff;

  border-radius: 1rem;

  padding: 2rem;

  text-align: center;

  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);

}

.quiz-title {

  font-weight: 700;

  margin-bottom: 1.5rem;

}

.summary-stats {

  display: flex;

  justify-content: space-around;

  gap: 1rem;

}

.stat-item {

  display: flex;

  flex-direction: column;

}

.stat-label {

  font-size: 0.9rem;

  color: #6c757d;

  margin-bottom: 0.25rem;

}

.stat-value {

  font-size: 1.75rem;

  font-weight: 700;

}

.stat-item.score .stat-value { color: #0d6efd; }

.stat-item.correct .stat-value { color: #198754; }

.stat-item.incorrect .stat-value { color: #dc3545; }



/* Question Cards */

.results-list {

  display: flex;

  flex-direction: column;

  gap: 1.5rem;

}

.question-result-card {

  background-color: #fff;

  border-radius: 0.75rem;

  padding: 1.5rem 2rem;

  box-shadow: 0 2px 10px rgba(0,0,0,0.05);

}

.question-header {

  display: flex;

  justify-content: space-between;

  align-items: center;

  margin-bottom: 1rem;

  padding-bottom: 1rem;

  border-bottom: 1px solid #e9ecef;

}

.question-number {

  font-weight: 600;

  color: #0d6efd;

}

.question-marks {

  font-size: 0.9rem;

  background-color: #e9ecef;

  padding: 0.25rem 0.6rem;

  border-radius: 5px;

}

.question-statement {

  font-size: 1.1rem;

  font-weight: 500;

  margin-bottom: 1.5rem;

}



/* Options Styling */

.options-container {

  display: flex;

  flex-direction: column;

  gap: 0.75rem;

}

.option-item {

  display: flex;

  align-items: center;

  padding: 0.9rem 1.25rem;

  border: 1px solid #dee2e6;

  border-radius: 0.5rem;

  transition: all 0.2s ease;

}

.option-icon {

  margin-right: 1rem;

  font-size: 1.2rem;

}



/* Correct (Green) */

.option-item.correct {

  background-color: lightgreen;

  border-color: #b2dfc8;

  color: #0f5132;

  font-weight: 600;

}

.option-item.correct .option-icon::before {

  content: '\F26E'; /* Bootstrap Icons: check-circle-fill */

}



/* Incorrect (Red) */

.option-item.incorrect {

  background-color: lightpink;

  border-color: #f5c2c7;

  color: #842029;

}

.option-item.incorrect .option-icon::before {

  content: '\F623'; /* Bootstrap Icons: x-circle-fill */

}



/* Neutral (Gray) */

.option-item.neutral {

  background-color: #f8f9fa;

  color: #6c757d;

}

.option-item.neutral .option-icon::before {

  content: '\F28A'; /* Bootstrap Icons: circle */

}

</style>







================================================

FILE: frontend/src/components/quizzeria/QuizzeriaCard.vue

================================================

<template>

  <div class="quiz-result-card">

    <div class="card-body">

      <span class="quiz-subject-badge">{{ props.quiz.subject_name }}</span> ---- <span class="quiz-chapter-badge">{{ props.quiz.chapter_name }}</span>

      <h3 class="quiz-name">{{ props.quiz.quiz_name }}</h3>

      <div class="quiz-stats">

        <div class="stat-item">

          <i class="bi bi-bar-chart-line-fill"></i>

          <span>Score: <strong>{{ props.quiz.total_score }} / {{ props.quiz.total_marks }} ({{ props.quiz.percentage }}%)</strong></span>

        </div>

        <div class="stat-item">

          <i class="bi bi-calendar-check-fill"></i>

          <span>Completed: <strong>{{ formatDate(props.quiz.attempted_at) }}</strong></span>

        </div>

      </div>

    </div>

    <div class="card-footer">

      <button class="btn btn-primary w-100" :disabled="!props.quiz.is_ended" @click="viewResults">{{ props.quiz.is_ended ? "View Answers" : "Quiz time Ongoing" }}</button>

    </div>

  </div>

</template>



<script setup>

import { formatDate } from '@/composables/useDateFormat';

import { useQuizStore } from '@/stores/quizStore';

import { storeToRefs } from 'pinia';

import { useRouter } from 'vue-router';



const quizStore = useQuizStore();

const { selectedQuiz } = storeToRefs(quizStore);



const props = defineProps(['quiz']);



const router = useRouter();



const viewResults = async () => {

  quizStore.selectQuiz(props.quiz);

  await quizStore.getAnswers();

  router.push(`/quiz/${selectedQuiz.value.id}`);

}





</script>



<style scoped>

.quiz-result-card {

  background-color: #fff;

  border: 1px solid #e9ecef;

  border-radius: 0.75rem;

  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);

  transition: all 0.3s ease;

  display: flex;

  flex-direction: column;

  height: 100%;

}



.quiz-result-card:hover {

  transform: translateY(-5px);

  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);

}



.card-body {

  padding: 1.5rem;

  flex-grow: 1;

}



.quiz-subject-badge {

  display: inline-block;

  background-color: #e7f1ff;

  color: #0d6efd;

  padding: 0.3rem 0.7rem;

  border-radius: 20px;

  font-size: 1rem;

  font-weight: 600;

  margin-bottom: 0.75rem;

}



.quiz-chapter-badge {

  display: inline-block;

  background-color: #e7f1ff;

  color: red;

  padding: 0.3rem 0.7rem;

  border-radius: 20px;

  font-size: 0.8rem;

  font-weight: 600;

  margin-bottom: 0.75rem;

}



.quiz-name {

  font-size: 1.25rem;

  font-weight: 600;

  margin-bottom: 1rem;

}



.quiz-stats {

  font-size: 0.95rem;

  color: #6c757d;

}



.stat-item {

  display: flex;

  align-items: center;

  margin-bottom: 0.5rem;

}



.stat-item .bi {

  margin-right: 0.75rem;

  font-size: 1.2rem;

  color: #adb5bd;

}



.card-footer {

  background-color: transparent;

  border-top: 1px solid #e9ecef;

  padding: 1rem 1.5rem;

}



.empty-state {

  text-align: center;

  padding: 4rem;

  background-color: #fff;

  border-radius: 0.75rem;

  border: 1px solid #dee2e6;

  color: #6c757d;

}



.empty-state .bi {

  font-size: 4rem;

  color: #adb5bd;

  margin-bottom: 1rem;

}

</style>







================================================

FILE: frontend/src/components/subject/ChapterDescription.vue

================================================

<template>

  <!--

    This is the main container for the chapter details view.

    It uses a v-if to check if a chapter has been selected. If not, it shows a placeholder message.

  -->

  <div v-if="selectedChapter" class="chapter-details-container p-4">

    <!-- Chapter Title and Description -->

    <div class="text-center mb-4">

      <h1 class="fw-bold mb-0">{{ selectedChapter.name }}</h1>

    </div>

    <div class="mb-5">

      <strong class="fs-4">About the chapter:</strong>

      <p class="fs-5 text-muted">{{ selectedChapter.description }}</p>

    </div>



    <div>

      <h2 class="fw-bold">Quizzes:</h2>



      <!--

        This filter bar is now responsive.

        - 'flex-column': On mobile, the filter items will stack vertically.

        - 'flex-lg-row': On large screens (desktops), they will switch back to a horizontal row.

        - 'align-items-stretch': Ensures all items stretch to the same height in the column layout.

        - 'align-items-lg-center': Vertically centers items when in the row layout.

      -->

      <div class="quiz-filter-bar d-flex flex-column flex-lg-row align-items-stretch align-items-lg-center p-3 bg-light rounded-2 border my-3">

        <!-- Search Bar -->

        <div class="input-group me-lg-3 mb-2 mb-lg-0 flex-grow-1">

          <span class="input-group-text bg-white"><i class="bi bi-search"></i></span>

          <input v-model="name" type="search" class="form-control" placeholder="Search quizzes by name...">

        </div>



        <!-- Status Dropdown -->

        <div class="me-lg-3 mb-2 mb-lg-0">

          <select v-model="type" class="form-select" aria-label="Filter by completion status">

            <option value="All">All Statuses</option>

            <option value="upcoming">Upcoming</option>

            <option value="completed">Completed</option>

            <option value="not_done">Not Done</option>

            <option value="ongoing">Ongoing</option>

          </select>

        </div>



        <!-- Score Range Filter -->

        <div class="filter-group d-flex align-items-center me-lg-3 mb-2 mb-lg-0">

          <label for="min-score" class="form-label me-2 mb-0 fw-bold">Score:</label>

          <input v-model="score_min" type="number" id="min-score" class="form-control range-input" placeholder="Min">

          <span class="mx-1">-</span>

          <input v-model="score_max" type="number" id="max-score" class="form-control range-input" placeholder="Max">

        </div>



        <!-- Duration Range Filter -->

        <div class="filter-group d-flex align-items-center">

          <label for="min-duration" class="form-label me-2 mb-0 fw-bold">Length:</label>

          <input v-model="length_min" type="number" id="min-duration" class="form-control range-input" placeholder="Mins">

          <span class="mx-1">-</span>

          <input v-model="length_max" type="number" id="max-duration" class="form-control range-input" placeholder="Mins">

        </div>

      </div>



      <!-- Quiz List -->

      <div v-if="!loadingQuizzes">

        <!-- This container makes the list of quizzes scrollable if it gets too long. -->

        <div class="quiz-list-wrapper">

          <div v-if="filteredQuizzes.length > 0">

            <div v-for="quiz in filteredQuizzes" :key="quiz.id">

              <QuizCard :quiz="quiz" />

            </div>

          </div>

          <!-- This message is shown if the filters result in no matching quizzes. -->

          <div v-else class="text-center text-muted p-5">

            <h4>No Quizzes Found</h4>

            <p>Try adjusting your filter criteria.</p>

          </div>

        </div>

      </div>

      <!-- This message is shown while the quizzes are being loaded from the API. -->

      <div v-else class="text-center text-muted p-5">

        <div class="spinner-border" role="status"></div>

        <p class="mt-2">Loading Quizzes...</p>

      </div>

    </div>

  </div>



  <!-- This placeholder is shown if no chapter has been selected yet. -->

  <div v-else class="canvas-placeholder">

    <h1>Select a chapter to check out the Quizzes</h1>

  </div>

</template>



<script setup>

import { useChapterStore } from '@/stores/chapterStore';

import { storeToRefs } from 'pinia';

import QuizCard from '@/components/subject/QuizCard.vue';

import { ref, computed } from 'vue';



// Initialize the Pinia store for chapters.

const chapterStore = useChapterStore();



// Make state properties from the store reactive.

const { selectedChapter, quizzes, loadingQuizzes } = storeToRefs(chapterStore);



// Refs to hold the current values from the filter inputs.

const name = ref('');

const score_min = ref(null); // Use null for empty number inputs

const score_max = ref(null);

const length_min = ref(null);

const length_max = ref(null);

const type = ref('All');



// This computed property filters the list of quizzes in real-time based on the filter inputs.

const filteredQuizzes = computed(() => {

  return quizzes.value.filter(quiz => {

    // Name Filter: Checks if the quiz name includes the search text.

    const nameMatch = quiz.name.toLowerCase().includes(name.value.toLowerCase());



    // Status Filter: Checks if the quiz status matches the selected type.

    // Corrected this line to use the 'type.value' from the filter.

    const criteriaMatch = (type.value === 'All' || quiz.status === type.value);



    // Score Filter: Checks if the quiz score is within the min/max range.

    // It safely handles cases where min/max are not set.

    const scoreMatch =

      (score_min.value === null || quiz.score >= score_min.value) &&

      (score_max.value === null || quiz.score <= score_max.value);



    // Length Filter: Checks if the quiz duration is within the min/max range.

    const lengthMatch =

      (length_min.value === null || quiz.duration >= length_min.value) &&

      (length_max.value === null || quiz.duration <= length_max.value);



    // A quiz is only included if it matches ALL the filter conditions.

    return nameMatch && criteriaMatch && scoreMatch && lengthMatch;

  });

});

</script>



<style scoped>

/* Styles for the main container of this view. */

.chapter-details-container {

  width: 100%;

}



/* Styles for the placeholder message shown when no chapter is selected. */

.canvas-placeholder {

  display: flex;

  align-items: center;

  justify-content: center;

  text-align: center;

  color: #6c757d;

  width: 100%;

  height: 100%;

}



/* Styles for the filter bar. */

.quiz-filter-bar .form-label {

  white-space: nowrap; /* Prevents labels like "Score:" from wrapping */

}

.quiz-filter-bar .range-input {

  width: 85px; /* Keeps the min/max input fields compact */

}



/* Hides the arrows on number inputs for a cleaner look in some browsers. */

.quiz-filter-bar input[type=number]::-webkit-inner-spin-button,

.quiz-filter-bar input[type=number]::-webkit-outer-spin-button {

  -webkit-appearance: none;

  margin: 0;

}



/* Styles for the scrollable list of quizzes. */

.quiz-list-wrapper {

  max-height: 60vh;

  overflow-y: auto;

  padding-right: 10px; /* Adds some space for the scrollbar */

}

</style>







================================================

FILE: frontend/src/components/subject/QuizCard.vue

================================================

<template>

  <div class="quiz-card card mb-4">

    <div class="card-body p-4">

      <div class="d-flex justify-content-between align-items-start mb-3">

        <h2 class="quiz-title mb-0">{{ props.quiz.name }}</h2>

        <span class="quiz-id-badge">#{{ props.quiz.id }}</span>

      </div>



      <div class="quiz-meta row g-3 text-secondary mb-4">

        <div class="col-md-4 d-flex align-items-center">

          <i class="bi bi-calendar-event me-2"></i>

          <span><strong>Date:</strong> {{ formattedDate }}</span>

        </div>

        <div class="col-md-4 d-flex align-items-center">

          <i class="bi bi-clock me-2"></i>

          <span><strong>Time:</strong> {{ props.quiz.time }}</span>

        </div>

        <div class="col-md-4 d-flex align-items-center">

          <i class="bi bi-hourglass-split me-2"></i>

          <span><strong>Duration:</strong> {{ props.quiz.duration }} mins</span>

        </div>

      </div>



      <div class="quiz-description">

        <p class="mb-0">{{ props.quiz.description }}</p>

      </div>

    </div>



    <div class="quiz-actions card-footer bg-white text-end p-3">

      <div v-if="quiz.is_started">

          <div v-if="quiz.is_ended">

            <div v-if="hasSubmitted">

              <button class="btn btn-success btn-lg" @click="review_quiz(quiz)">

                Review Quiz <i class="bi bi-arrow-right-short"></i>

              </button>

            </div>

            <div v-else>

              <button class="btn btn-success btn-lg disabled">

                Not Submitted <i class="bi bi-arrow-right-short"></i>

              </button>

            </div>

          </div>



          <div v-else>

            <div v-if="hasSubmitted">

              <button class="btn btn-primary btn-lg disabled" @click="start_redirect(quiz)">

                Already Submitted <i class="bi bi-play-fill"></i>

              </button>

            </div>

            <div v-else>

              <button class="btn btn-primary btn-lg" @click="start_redirect(quiz)">

                Start Quiz <i class="bi bi-play-fill"></i>

              </button>

            </div>

          </div>

        </div>

      <div v-else class="quiz-locked">

        <i class="bi bi-lock-fill me-2"></i>

        <span>LOCKED</span>

      </div>

    </div>

  </div>

</template>





<script setup>

import { formatDate } from '@/composables/useDateFormat';

import { useRouter } from 'vue-router';

import { useQuizStore } from '@/stores/quizStore';

import apiClient from '../api/axios';

import { ref, onMounted } from 'vue';



const router = useRouter();

const quizStore = useQuizStore();



const props = defineProps(['quiz'])



const formattedDate = formatDate(props.quiz.date);



const hasSubmitted = ref(false);



const checkSubmission = async () => {

  const response = await apiClient.get('/user/attempts');

  const attempts = response.data;

  hasSubmitted.value = attempts.some(attempt => attempt.quiz_id === props.quiz.id);

}



const start_redirect = (quiz) => {

  quizStore.selectQuiz(quiz);

  router.push(`/quiz/${quiz.id}`);

  return;

}



const review_quiz = (quiz) => {

  quizStore.selectQuiz(quiz);

  router.push(`/quiz/${quiz.id}`);

}



onMounted(() => checkSubmission());



</script>



<style scoped>

/* Main Card Styling & Hover Effect */

.quiz-card {

  border: 1px solid #e9ecef;

  border-radius: 0.75rem;

  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);

  transition: all 0.3s ease-in-out;

}

.quiz-card:hover {

  transform: translateY(-5px);

  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);

}



/* Header Elements */

.quiz-title {

  color: #212529;

  font-weight: 700;

}

.quiz-id-badge {

  background-color: #e9ecef;

  color: #6c757d;

  font-weight: 600;

  padding: 0.25rem 0.6rem;

  border-radius: 20px;

  font-size: 0.8rem;

}



/* Meta Info Styling */

.quiz-meta {

  font-size: 0.95rem;

}

.quiz-meta .bi {

  color: var(--bs-primary);

  font-size: 1.4rem;

}



/* Description Blockquote Style */

.quiz-description {

  background-color: #f8f9fa;

  border-left: 4px solid var(--bs-primary);

  padding: 1rem 1.25rem;

  border-radius: 0.25rem;

  color: #495057;

}



/* Actions Footer */

.quiz-actions {

  border-top: 1px solid #e9ecef;

}



/* Locked State Styling */

.quiz-locked {

  display: inline-flex;

  align-items: center;

  font-size: 1rem;

  font-weight: 600;

  color: #6c757d;

  opacity: 0.8;

}

.quiz-locked .bi {

  font-size: 1.2rem;

}



/* Button Styling */

.btn {

  font-weight: 600;

  display: inline-flex;

  align-items: center;

  gap: 0.5rem;

}

.btn .bi {

  font-size: 1.5em; /* Make icon slightly larger than button text */

  line-height: 1; /* Helps with vertical alignment */

}

</style>







================================================

FILE: frontend/src/components/subject/SubjectChapter.vue

================================================

<template>

  <div class="card subject-accordion my-3">

    <div v-if="subject">

      <div

        class="subject-header card-header d-flex justify-content-between align-items-center"

        @click="showChapters = !showChapters"

      >

        <h2 class="mb-0 fs-5 fw-bold">{{ subject.name }}</h2>

        <span class="toggle-icon" :class="{ 'expanded': showChapters }">

          <i class="bi bi-chevron-down"></i>

        </span>

      </div>



      <transition name="slide-fade">

        <div v-show="showChapters">

          <div v-if="loadingChapters" class="state-message">

            <div class="spinner-border spinner-border-sm" role="status"></div>

            <span class="ms-2">Loading Chapters...</span>

          </div>



          <div v-else>

            <ul v-if="chapters.length > 0" class="list-group list-group-flush">

              <li

                class="chapter-item list-group-item"

                v-for="chapter in chapters"

                :key="chapter.id"

                @click="chapterStore.selectChapter(props.subject_id, chapter.id)"

              >

                {{ chapter.name }}

              </li>

            </ul>

            <div v-else class="state-message">

              No chapters found for this subject.

            </div>

          </div>

        </div>

      </transition>

    </div>



    <div v-else class="card-body state-message">

      No subject selected.

    </div>

  </div>

</template>



<script setup>



import { onMounted, ref, computed } from 'vue'

import { useChapterStore } from '@/stores/chapterStore';

import { useSubjectStore } from '@/stores/subjectStore';

import { storeToRefs } from 'pinia';



const props = defineProps(['subject_id']);

const showChapters = ref(false);



const chapterStore = useChapterStore();

const subjectStore = useSubjectStore();



const { chaptersBySubject, loadingSubjectIds } = storeToRefs(chapterStore);



const chapters = computed(() => chaptersBySubject.value[props.subject_id] || []);

const loadingChapters = computed(() => loadingSubjectIds.value.has(props.subject_id));



const subject = ref(null);



onMounted(() => {

  chapterStore.fetchChapters(props.subject_id),

  subject.value = subjectStore.getSubject(props.subject_id)

})



</script>



<style scoped>

/* Main Accordion Card */

.subject-accordion {

  border: 1px solid #dee2e6;

  border-radius: 0.5rem;

  overflow: hidden; /* Important for containing the sliding list */

  box-shadow: 0 2px 8px rgba(0,0,0,0.05);

}



/* Clickable Header Styling */

.subject-header {

  cursor: pointer;

  background-color: var(--bs-primary);

  color: white;

  padding: 1rem 1.25rem;

  user-select: none; /* Prevents text selection on click */

}



/* Toggle Icon Animation */

.toggle-icon {

  font-size: 1.2rem;

  transition: transform 0.3s ease-in-out;

}

.toggle-icon.expanded {

  transform: rotate(180deg);

}



/* Chapter Item Styling & Hover Effect */

.chapter-item {

  cursor: pointer;

  padding: 0.9rem 1.25rem;

  border-bottom: 1px solid #f1f1f1;

  transition: background-color 0.2s ease, color 0.2s ease;

}

.chapter-item:last-child {

  border-bottom: none;

}

.chapter-item:hover {

  background-color: #f8f9fa; /* A light grey */

  color: var(--bs-primary);

}



/* Message Styling for "Loading" or "No Chapters" */

.state-message {

  padding: 1.5rem;

  text-align: center;

  color: #6c757d; /* Bootstrap's secondary text color */

  background-color: #fafafa;

}



/* Vue Transition for the slide-down/up effect */

.slide-fade-enter-active,

.slide-fade-leave-active {

  transition: all 0.35s ease-out;

}

.slide-fade-enter-from,

.slide-fade-leave-to {

  max-height: 0;

  opacity: 0;

  transform: translateY(-10px);

}

.slide-fade-enter-to,

.slide-fade-leave-from {

  max-height: 500px; /* Set a max-height larger than your content */

  opacity: 1;

  transform: translateY(0);

}

</style>









================================================

FILE: frontend/src/components/subject/SubjectListing.vue

================================================



<template>

  <h1 class="text-center border-bottom border-black fw-bold">

    Subjects

  </h1>

  <div v-if="!subjectStore.loading">

    <div v-if="subjectStore.subjects.length > 0">

      <div v-for="subject in subjectStore.subjects" :key="subject.id">

        <SubjectChapter :subject_id="subject.id"/>

      </div>

    </div>

    <div v-else>

      No subjects

    </div>

  </div>

  <div v-else>

    LOADING

  </div>

</template>



<script setup>

import SubjectChapter from '@/components/subject/SubjectChapter.vue';

import { useSubjectStore } from '@/stores/subjectStore';

import { onMounted} from 'vue';



const subjectStore = useSubjectStore();



onMounted(() => {

  subjectStore.fetchSubjects();

})



</script>







================================================

FILE: frontend/src/components/subject/TopSection.vue

================================================

<template>

  2

</template>







================================================

FILE: frontend/src/composables/useDateFormat.js

================================================

export const formatDate = (date) => {

  // Return an empty string for null, undefined, or empty inputs

  if (!date) {

    return "NO DATE";

  }



  const dateObject = new Date(date);



  // Check if the created date is valid

  if (isNaN(dateObject.getTime())) {

    return "INVALID DATE"; // Or a placeholder like 'Invalid Date'

  }



  const options = {

    day: 'numeric',

    month: 'short',

    year: 'numeric',

    timeZone: 'IST', //  <-- The main fix for timezone issues

  };



  return dateObject.toLocaleDateString('en-IN', options);

};



export const getDateDifference = (dateString1, dateString2) => {

  const date1 = new Date(dateString1);

  const date2 = new Date(dateString2);



  // Calculate the difference in milliseconds

  const diffInMs = Math.abs(date2 - date1);



  // Convert milliseconds to days and get a whole number

  return Math.floor(diffInMs / (1000 * 60 * 60 * 24));

};







================================================

FILE: frontend/src/router/index.js

================================================

import { createRouter, createWebHistory } from 'vue-router'



import HomeView from '@/views/HomeView.vue'

import SubjectView from '@/views/SubjectView.vue'

import QuizView from '@/views/QuizView.vue'

import ResultsView from '@/views/ResultView.vue'

import ProfileView from '@/views/ProfileView.vue'

import LoginView from '@/views/LoginView.vue'

import SignupView from '@/views/SignupView.vue'

import QuizzeriaView from '@/views/QuizzeriaView.vue'



// Admin views

import AdminDashboard from '@/views/admin/AdminDashboard.vue'

import AdminSubjects from '@/views/admin/AdminSubjects.vue'

import AdminCreateQuiz from '@/views/admin/AdminCreateQuiz.vue'

import AdminEditQuiz from '@/views/admin/AdminEditQuiz.vue'

import AdminUsersView from '@/views/admin/AdminUsersView.vue'

import AdminStatsView from '@/views/admin/AdminStatsView.vue'

import GuestHomeView from '@/views/GuestHomeView.vue'



// Guest views

// import WelcomeView from '@/views/guest/WelcomeView.vue'

// import HelpView from '@/views/guest/HelpView.vue'



const router = createRouter({

  history: createWebHistory(import.meta.env.BASE_URL),

  routes: [



    // AUTH ROUTES (USER)

    {

      path: '/',

      name: 'home',

      component: HomeView,

      meta: { requiresAuth: true, role: 'user' }

    },

    {

      path: '/subject',

      name: 'subject',

      component: SubjectView,

      meta: { requiresAuth: true, role: 'user' }

    },

    {

      path: '/quizzeria',

      name: 'quizzeria',

      component: QuizzeriaView,

      meta: { requiresAuth: true, role: 'user' }

    },

    {

      path: '/quiz/:id',

      name: 'quiz_details',

      component: QuizView,

      meta: { requiresAuth: true, role: 'user' }

    },

    {

      path: '/result',

      name: 'result',

      component: ResultsView,

      meta: { requiresAuth: true, role: 'user' }

    },

    {

      path: '/profile',

      name: 'profile',

      component: ProfileView,

      meta: { requiresAuth: true, role: 'user' }

    },



    // ADMIN ROUTES

    {

      path: '/admin',

      name: 'admin_dashboard',

      component: AdminDashboard,

      meta: { requiresAuth: true, role: 'admin' }

    },

    {

      path: '/admin/subjects',

      name: 'admin_subjects',

      component: AdminSubjects,

      meta: { requiresAuth: true, role: 'admin' }

    },



    {

      path: '/admin/quiz/create',

      name: 'admin_quiz_create',

      component: AdminCreateQuiz,

      meta: { requiresAuth: true, role: 'admin' }

    },

    {

      path: '/admin/quiz/edit/:id',

      name: 'admin_quiz_edit',

      component: AdminEditQuiz,

      meta: { requiresAuth: true, role: 'admin' }

    },

    {

      path: '/admin/users',

      name: 'admin_users',

      component:AdminUsersView,

      meta: { requiresAuth: true, role: 'admin' }

    },

    {

      path: '/admin/stats',

      name: 'admin_stats',

      component:AdminStatsView,

      meta: { requiresAuth: true, role: 'admin' }

    },



    // PUBLIC ROUTES

    {

      path: '/guest/home',

      name: 'guest_home',

      component: GuestHomeView

    },

    {

      path: '/login',

      name: 'login',

      component: LoginView

    },

    {

      path: '/signup',

      name: 'signup',

      component: SignupView

    }

  ]

})



router.beforeEach((to, from, next) => {

  const token = localStorage.getItem('token');

  const role = localStorage.getItem('role');



  if (to.meta.requiresAuth && !token) {

    console.log("No token");

    return next('/login');

  }



  if (to.meta.role && role !== to.meta.role) {

    console.log("No role");

    return next('/login');

  }



  // Force reload when navigating to the same path

  if (to.path === from.path && JSON.stringify(to.query) === JSON.stringify(from.query)) {

    console.log("HI");

    return next({

      path: to.path,

      query: { ...to.query, reload: Date.now() }

    });

  }



  next();

});





export default router







================================================

FILE: frontend/src/stores/chapterStore.js

================================================

// stores/chapterStore.js

import { defineStore } from 'pinia';

import apiClient from '@/components/api/axios';



export const useChapterStore = defineStore('chapterStore', {

  state: () => ({

    chaptersBySubject: {},        // subject_id -> [chapters]

    selectedChapter: null,

    loadingSubjectIds: new Set(), // track which subject chapters are loading

    quizzes: [],

    loadingQuizzes: false

  }),



  actions: {

    async fetchChapters(subjectId) {

      if (this.chaptersBySubject[subjectId] || this.loadingSubjectIds.has(subjectId)) return;



      this.loadingSubjectIds.add(subjectId);

      try {

        const response = await apiClient.get(`/chapters/${subjectId}`);

        this.chaptersBySubject[subjectId] = response.data;

      } catch (err) {

        console.error(err);

      } finally {

        this.loadingSubjectIds.delete(subjectId);

      }

    },



    selectChapter(subjectId, chapterId){

      this.quizzes = []

      this.selectedChapter = this.chaptersBySubject[subjectId].find(chapter => chapter.id === chapterId);

      this.fetchQuizzes();

      return;

    },



    async fetchQuizzes(){

      if(this.quizzes.length > 0 || this.loadingQuizzes) return;



      this.loadingQuizzes = true;

      try{

        const response = await apiClient.get(`quizzes/${this.selectedChapter.id}`);

        this.quizzes = response.data;

      }

      catch(error){

        console.log(error);

      }

      finally{

        this.loadingQuizzes = false;

      }

    },

  }

});







================================================

FILE: frontend/src/stores/profileStore.js

================================================

import { defineStore } from "pinia";

import apiClient from "@/components/api/axios";

import { formatDate, getDateDifference } from "@/composables/useDateFormat";



export const useProfileStore = defineStore('profileStore', {

  state: () => ({

    profile: null,

    loadingProfile: false,

    quizzesCompleted: 0,

    daysSince: 0,

    totalXP: 0,

    level: 0,

    levelXP: 0,

    errorType: "",

  }),

  actions: {



    findDays() {

      const today = formatDate(new Date())

      this.daysSince =  getDateDifference(this.profile.joiningDate, today);

      return;

    },



    findXP() {

      this.totalXP =  this.daysSince * 1 + this.quizzesCompleted * 10;

      this.level = Math.floor(this.totalXP / 100);

      this.levelXP = this.totalXP - (this.level * 200);

    },



    async fetchProfile() {

      // if (this.profile || this.loadingProfile) return;

      try{

        this.loadingProfile = true;

        const response = await apiClient.get('/users/me');

        this.profile = response.data;

        this.profile.joiningDate = formatDate(this.profile.joiningDate);

        this.quizzesCompleted = this.profile.attempts.length;

        this.findDays();

        this.findXP();

      }

      catch(error){

        console.log(error);

      }

      finally{

        this.loadingProfile = false;

      }

    },



    async editProfile(newProfile) {

      try{

        await apiClient.patch('/users/update-profile', newProfile);

        // this.profile = null;

        await this.fetchProfile();

      } catch (error) {

        if([409, 422].includes(error.response.status) ){

          this.errorType = error.response.data.message;

        }

        else{

          this.errorType = "Something went wrong";

        }

        throw error

      }

    },



    async editPassword(oldPassword, newPassword){

      try{

        const data = {

          'oldPassword': oldPassword,

          'newPassword': newPassword

        }

        await apiClient.patch('/users/update-password', data);

      }

      catch(error){

        if([400, 401, 422].includes(error.response.status)){

          this.errorType = error.response.data.message;

        }

        else{

          this.errorType = "Something went wrong";

          console.log("Something went wrong");

        }

        throw error

      }

    }

  }

})







================================================

FILE: frontend/src/stores/quizStore.js

================================================

import { defineStore } from "pinia";

import apiClient from "@/components/api/axios";





export const useQuizStore = defineStore('quizStore', {

  state: () => ({

    selectedQuiz: localStorage.getItem('quiz') ? JSON.parse(localStorage.getItem('quiz')) : null,

    errorType: null,

    remainingTime: null,

    isStarted: false,

    questions: [],

    quizAnswers: null,

  }),



  actions: {

    selectQuiz(quiz) {

      this.selectedQuiz = quiz;

      localStorage.setItem('quiz', JSON.stringify(quiz));

      return;

    },



    deselectQuiz() {

      this.selectedQuiz = null;

      return;

    },



    async quizStarted(){

      try{

        console.log(this.selectedQuiz.id);

        const response = await apiClient.get(`/quiz/${this.selectedQuiz.id}/start`);

        const data = response.data;

        const message = data.message;

        if(message === "Quiz time ongoing"){

          this.remainingTime = data.remaining_time;

          this.isStarted = true;

          return true

        }

        else{

          // console.log([false, this.selectedQuiz.duration]);

          this.remainingTime = this.selectedQuiz.duration;

          return false

        }

      }

      catch(error){

        if([400, 404].includes(error.response.status)){

          this.errorType = error.response.message;

        }

        else{

          return this.errorType = "Something went wrong";

        }

      }

    },



    async getQuestions(){

      try{

        const response = await apiClient.get(`/quiz/${this.selectedQuiz.id}/questions`)

        this.questions = response.data;

      }

      catch{

        this.errorType = "Something went wrong";

      }

    },



    async startQuiz(){

      try{

        const quizStatus = await this.quizStarted();

        if(quizStatus === false){

          await apiClient.post(`/quiz/${this.selectedQuiz.id}/start`);

          this.getQuestions();

          this.isStarted = true;

        }

        else{

          await this.getQuestions();

        }

      }

      catch(error){

        if([400, 404].includes(error.response.status)){

          this.errorType = error.response.message;

        }

        else{

          return this.errorType = "Something went wrong";

        }

      }

    },



    async submitQuiz(userAnswers){

      try{

        await apiClient.post(`quiz/${this.selectedQuiz.id}/submit`, userAnswers);

      }

      catch(error){

        if([400, 404, 422].includes(error.response.status)){

          this.errorType = error.response.message;

        }

        else{

          this.errorType = "Something went wrong";

        }

      }

    },



    async getAnswers(){

      try{

        const response = await apiClient.get(`quiz/${this.selectedQuiz.id}/submit`);

        this.quizAnswers = response.data;

      }

      catch(error){

        this.errorType = error.response.message;

      }

    }



  }

})







================================================

FILE: frontend/src/stores/subjectStore.js

================================================

// stores/subject.js

import { defineStore } from 'pinia'

import apiClient from '@/components/api/axios'



export const useSubjectStore = defineStore('subjectStore', {

  state: () => ({

    subjects: [],

    loading: false,

  }),

  actions: {

    async fetchSubjects() {

      if (this.subjects.length > 0) return;

      try {

        this.loading = true

        const response = await apiClient.get('/subjects')

        this.subjects = response.data

      } catch (err) {

        console.error(err)

      } finally {

        this.loading = false

      }

    },

    getSubject(subject_id) {

      return this.subjects.find(subject => subject.id === subject_id);

    }

  }

})







================================================

FILE: frontend/src/stores/admin/adminChapterStore.js

================================================

// stores/chapterStore.js

import { defineStore } from 'pinia';

import apiClient from '@/components/api/axios';



export const useAdminChapterStore = defineStore('adminChapterStore', {

  state: () => ({

    chaptersBySubject: {},        // subject_id -> [chapters]

    selectedChapter: null,

    loadingSubjectIds: new Set(), // track which subject chapters are loading

    quizzes: [],

    loadingQuizzes: false

  }),



  actions: {

    async fetchChapters(subjectId) {

      if (this.chaptersBySubject[subjectId] || this.loadingSubjectIds.has(subjectId)) return;



      this.loadingSubjectIds.add(subjectId);

      try {

        const response = await apiClient.get(`/chapters/${subjectId}`);

        this.chaptersBySubject[subjectId] = response.data;

      } catch (err) {

        console.error(err);

      } finally {

        this.loadingSubjectIds.delete(subjectId);

      }

    },



    async createChapter(data){

      try{

        await apiClient.post(`/chapters/${data.subject_id}`, data)

      }

      catch(error){

        console.log(error);

      }

    },



    async updateChapter(data){

      try{

        await apiClient.patch(`/chapter/${data.id}`, data);

      }

      catch(error){

        console.log(error);

      }

    },



    async deleteChapter(data){

      try{

        await apiClient.delete(`/chapter/${data.id}`);

      }

      catch(error){

        console.log(error);

      }

    }

  }

})







================================================

FILE: frontend/src/stores/admin/adminQuizStore.js

================================================

import { defineStore } from "pinia";

import apiClient from "@/components/api/axios";





export const useAdminQuizStore = defineStore('adminQuizStore', {

  state: () => ({

    chapter_id: null,

    selectedQuiz: null,

    selectedQuestions: null,

    quizzes: [],

  }),



  actions: {



    selectChapter(chapter){

      this.chapter_id = chapter.id;

    },





    selectQuiz(quiz) {

      this.selectedQuiz = quiz;

    },



    async fetchQuizzes () {

      try{

        const response = await apiClient.get(`/quizzes/${this.chapter_id}`);

        this.quizzes = response.data;

      }

      catch(error){

        console.log(error)

      }

    },



    async fetchQuestions() {

      try{

        const response = await apiClient.get(`/quiz/${this.selectedQuiz.id}/questions`);

        this.selectedQuestions = response.data;

      }

      catch(error){

        console.log(error);

      }

    },



    async createQuiz(data) {

      try {

        const { name, description, duration, date, time, remarks, questions, passing } = data;

        const quizData = { name, description, duration, date, time, remarks, passing, chapter_id: this.chapter_id };



        // 1. Create Quiz

        const response = await apiClient.post(`/quizzes/${this.chapter_id}`, quizData);

        const quiz_id = response.data.id;



        // 2. Create Questions

        for (let question of questions) {

          const { options, correct_option_id } = question;

          const fin_question = {

            statement: question.statement,

            marks: question.marks,

            quiz_id: quiz_id

          };



          const ques_response = await apiClient.post(`/questions/${quiz_id}`, fin_question);

          const question_id = ques_response.data.id;



          // 3. Create Options

          for (let option of options) {

            const fin_option = {

              text: option.text,

              is_correct: option.id === correct_option_id,

              question_id: question_id

            };



            await apiClient.post(`/options/${question_id}`, fin_option);

          }

        }



        const new_quiz = await apiClient.get(`/quiz/${quiz_id}`);

        this.quizzes.push(new_quiz.data);

      } catch (error) {

        console.error("Error while creating quiz:", error);

      }

    },



    async updateQuiz(data) {

      try {

        const { name, description, duration, date, time, remarks, questions, passing } = data;

        const quizData = { name, description, duration, date, time, remarks, passing, chapter_id: this.chapter_id };



        // 1. Create Quiz

        await apiClient.patch(`/quiz/${this.selectedQuiz.id}`, quizData);



        // 2. Delete all questions and options

        for(let question of questions){

          try{

            await apiClient.delete(`/question/${question.id}`);

          }

          catch{

            continue;

          }

        }



        // 3. Create Questions

        for (let question of questions) {

          const { options, correct_option_id } = question;

          const fin_question = {

            statement: question.statement,

            marks: question.marks,

            quiz_id: this.selectedQuiz.id

          };



          const ques_response = await apiClient.post(`/questions/${this.selectedQuiz.id}`, fin_question);

          const question_id = ques_response.data.id;



          // 4. Create Options

          for (let option of options) {

            const fin_option = {

              text: option.text,

              is_correct: option.id === correct_option_id,

              question_id: question_id

            };



            await apiClient.post(`/options/${question_id}`, fin_option);

          }

        }

      }

      catch (error) {

        console.error("Error while creating quiz:", error);

      }

    },





    async deleteQuiz(quiz) {

      try{

        await apiClient.delete(`/quiz/${quiz.id}`);

      }

      catch(error){

        console.log(error);

      }

    }

  }

})







================================================

FILE: frontend/src/stores/admin/adminSubjectStore.js

================================================

// stores/subject.js

import { defineStore } from 'pinia'

import apiClient from '@/components/api/axios'



export const useAdminSubjectStore = defineStore('adminSubjectStore', {

  state: () => ({

    subjects: [],

    loading: false,

  }),

  actions: {

    async fetchSubjects() {

      if (this.subjects.length > 0) return;

      try {

        this.loading = true

        const response = await apiClient.get('/subjects');

        this.subjects = response.data

        console.log(this.subjects);

      } catch (err) {

        console.error(err)

      } finally {

        this.loading = false

      }

    },

    

    getSubject(subject_id) {

      return this.subjects.find(subject => subject.id === subject_id);

    },



    async createSubject(data){

      try{

        const response = await apiClient.post(`/subjects`, data);

        const new_id = response.data.id;

        const newSub = await apiClient.get(`/subject/${new_id}`)

        this.subjects.push(newSub.data);

      }

      catch(error){

        console.log(error);

      }

    },



    async updateSubject(data){

      try{

        await apiClient.patch(`/subject/${data.id}`, data);

        const updatedSub = await apiClient.get(`/subject/${data.id}`);

        const index = this.subjects.findIndex(s => s.id === data.id);

        if (index !== -1) {

          this.subjects[index] = updatedSub.data;

        }

        console.log("UPDATE");

        console.log(data)

      }

      catch(error){

        console.log(error);

      }

    },



    async deleteSubject(data){

      try{

        await apiClient.delete(`/subject/${data.id}`);

        this.subjects = this.subjects.filter(s => s.id !== data.id);

        console.log("DELETE");

        console.log(data);

      }

      catch(error){

        console.log(error)

      }

    }







  }

})







================================================

FILE: frontend/src/views/GuestHomeView.vue

================================================

<template>

  <div class="home-page">



    <!-- Hero Section -->

    <section class="hero-section user-hero">

        <div class="container">

            <h1 class="display-4">Test Your Knowledge, Master Your Subjects</h1>

            <p class="lead my-4">Engage with interactive quizzes across a wide range of subjects and track your learning journey like never before.</p>

            <button class="btn btn-light btn-lg fw-bold px-5 py-3">Get Started Now</button>

        </div>

    </section>



    <!-- Features Section -->

    <section class="section">

        <div class="container">

            <h2 class="section-title">Why Choose QuizMaster?</h2>

            <div class="row g-4">

                <div class="col-md-4">

                    <div class="feature-card">

                        <div class="feature-icon user-icon"><i class="bi bi-bookshelf"></i></div>

                        <h4 class="fw-bold">Diverse Subjects</h4>

                        <p>From Mathematics to History, explore a vast library of quizzes designed to challenge and educate.</p>

                    </div>

                </div>

                <div class="col-md-4">

                    <div class="feature-card">

                        <div class="feature-icon user-icon"><i class="bi bi-graph-up-arrow"></i></div>

                        <h4 class="fw-bold">Track Your Progress</h4>

                        <p>Our detailed performance dashboard helps you visualize your strengths and weaknesses over time.</p>

                    </div>

                </div>

                <div class="col-md-4">

                    <div class="feature-card">

                        <div class="feature-icon user-icon"><i class="bi bi-controller"></i></div>

                        <h4 class="fw-bold">Interactive Experience</h4>

                        <p>Engage with a modern, user-friendly interface that makes learning and testing your knowledge fun.</p>

                    </div>

                </div>

            </div>

        </div>

    </section>



    <!-- How It Works Section -->

    <section class="section bg-white">

        <div class="container">

            <h2 class="section-title">Get Started in 3 Easy Steps</h2>

            <div class="row g-5">

                <div class="col-md-4">

                    <div class="how-it-works-step">

                        <div class="step-number">1</div>

                        <h4 class="fw-bold">Choose a Subject</h4>

                        <p class="text-muted">Browse our extensive collection of subjects and pick a chapter you want to master.</p>

                    </div>

                </div>

                <div class="col-md-4">

                    <div class="how-it-works-step">

                        <div class="step-number">2</div>

                        <h4 class="fw-bold">Take the Quiz</h4>

                        <p class="text-muted">Answer multiple-choice questions within the time limit in our distraction-free quiz interface.</p>

                    </div>

                </div>

                <div class="col-md-4">

                    <div class="how-it-works-step">

                        <div class="step-number">3</div>

                        <h4 class="fw-bold">Review Your Results</h4>

                        <p class="text-muted">Get instant feedback on your performance, see the correct answers, and track your scores.</p>

                    </div>

                </div>

            </div>

        </div>

    </section>



    <!-- Footer -->

    <footer class="footer">

        <div class="container text-center">

            <p>&copy; 2025 QuizMaster. All Rights Reserved.</p>

        </div>

    </footer>

  </div>

</template>



<script setup>

// No script logic needed for this static page

</script>



<style scoped>

/* Scoped styles ensure they don't leak to other components */

.home-page {

    font-family: 'Poppins', sans-serif;

    background-color: #f8f9fa;

}

.navbar {

    box-shadow: 0 2px 10px rgba(0,0,0,0.1);

}

.hero-section {

    color: white;

    padding: 100px 0;

    text-align: center;

}

.user-hero {

    background: linear-gradient(45deg, #0d6efd, #6f42c1);

}

.hero-section h1 {

    font-weight: 700;

    font-size: 3.5rem;

}

.hero-section p {

    font-size: 1.25rem;

    opacity: 0.9;

}

.section {

    padding: 80px 0;

}

.section-title {

    text-align: center;

    margin-bottom: 50px;

    font-weight: 600;

    font-size: 2.5rem;

}

.feature-card {

    background-color: #fff;

    border: 1px solid #dee2e6;

    border-radius: 0.75rem;

    padding: 2rem;

    text-align: center;

    transition: all 0.3s ease;

    height: 100%;

}

.feature-card:hover {

    transform: translateY(-10px);

    box-shadow: 0 10px 30px rgba(0,0,0,0.1);

}

.feature-icon {

    font-size: 3rem;

    margin-bottom: 1rem;

}

.user-icon {

    color: #0d6efd;

}

.how-it-works-step {

    text-align: center;

}

.step-number {

    width: 60px;

    height: 60px;

    background-color: #e7f1ff;

    color: #0d6efd;

    border-radius: 50%;

    display: flex;

    align-items: center;

    justify-content: center;

    font-size: 1.5rem;

    font-weight: 700;

    margin: 0 auto 1rem;

}

.footer {

    background-color: #343a40;

    color: #adb5bd;

    padding: 40px 0;

}

</style>









================================================

FILE: frontend/src/views/HomeView.vue

================================================

<template>

  <div class="user-home-page">

    <!-- 2. Main Content Area -->

    <main class="container py-5">

      <!-- Welcome Header -->

      <header class="welcome-header mb-5">

        <h1>Welcome back, Alex!</h1>

        <p class="lead text-muted">Ready to continue your learning journey?</p>

      </header>



      <!-- Action Cards -->

      <div class="row g-4">

        <div class="col-lg-8">

          <div class="action-card primary-card">

            <div class="action-content">

              <i class="bi bi-easel2-fill action-icon"></i>

              <h2>Go to Classroom</h2>

              <p>Dive back into your subjects, review chapters, and take new quizzes.</p>

              <a href="/subject" class="btn btn-light stretched-link">Start Learning <i class="bi bi-arrow-right-short"></i></a>

            </div>

          </div>

        </div>

        <div class="col-lg-4">

          <div class="action-card secondary-card">

            <div class="action-content">

              <i class="bi bi-bar-chart-line-fill action-icon"></i>

              <h2>View My Results</h2>

              <p>Analyze your performance and track your progress.</p>

              <a href="/result" class="btn btn-dark stretched-link">Check Dashboard</a>

            </div>

          </div>

        </div>

        <div class="col-lg-4">

          <div class="action-card secondary-card">

            <div class="action-content">

              <i class="bi bi-person-fill-gear action-icon"></i>

              <h2>My Profile</h2>

              <p>Update your personal details and account settings.</p>

              <a href="/profile" class="btn btn-dark stretched-link">Edit Profile</a>

            </div>

          </div>

        </div>

        <div class="col-lg-8">

            <div class="action-card secondary-card">

            <div class="action-content">

              <i class="bi bi-trophy-fill action-icon"></i>

              <h2>View Completed Quizzes</h2>

              <p>Review your past attempts and see detailed results for each quiz.</p>

              <a href="/result" class="btn btn-dark stretched-link">See History</a>

            </div>

          </div>

        </div>

      </div>

    </main>

  </div>

</template>



<script setup>

// No script logic is needed for this static page.

</script>



<style scoped>

.user-home-page {

  background-color: #f8f9fa;

  min-height: 100vh;

  font-family: 'Poppins', sans-serif;

}

.navbar {

  box-shadow: 0 2px 10px rgba(0,0,0,0.1);

}

.welcome-header {

  text-align: center;

}

.welcome-header h1 {

  font-weight: 700;

  font-size: 2.5rem;

}



/* Action Cards */

.action-card {

  border-radius: 1rem;

  padding: 2.5rem;

  color: white;

  position: relative;

  overflow: hidden;

  height: 100%;

  transition: transform 0.3s ease;

}

.action-card:hover {

    transform: translateY(-5px);

}

.primary-card {

  background: linear-gradient(45deg, #0d6efd, #3c8ffb);

}

.secondary-card {

  background-color: #ffffff;

  color: #212529;

  border: 1px solid #dee2e6;

}

.action-content h2 {

  font-weight: 600;

  margin-bottom: 0.5rem;

}

.action-content p {

  opacity: 0.9;

  margin-bottom: 1.5rem;

}

.action-icon {

  font-size: 3rem;

  margin-bottom: 1rem;

  display: block;

}

.stretched-link::after {

    position: absolute;

    top: 0;

    right: 0;

    bottom: 0;

    left: 0;

    z-index: 1;

    content: "";

}

</style>







================================================

FILE: frontend/src/views/LoginView.vue

================================================

<template>

  <div class="d-flex justify-content-center align-items-center vh-100 bg-light">

    <div class="card shadow-lg p-4" style="width: 100%; max-width: 400px; border-radius: 1rem;">

      <!-- Logo -->

      <div class="text-center mb-4">

        <img src="@/assets/logo.png" alt="QuizMaster Pro" class="rounded-circle" style="width: 120px; height: 120px;" />

        <h2 class="mt-2 fw-bold">QuizMaster Pro</h2>

      </div>



      <div class="text-center mt-2">

        <p class="text-danger fs-6">{{ errorType }}</p>

      </div>



      <!-- Login Form -->

      <form @submit.prevent="login">

        <div class="mb-3 fs-5">

          <label class="form-label">Username</label>

          <input type="text" class="form-control" v-model="username" required />

        </div>



        <div class="mb-3 fs-5">

          <label class="form-label">Password</label>

          <input type="password" class="form-control" v-model="password" required />

        </div>



        <button type="submit" class="btn btn-primary w-100 fs-5">Login</button>

      </form>

      <div class="text-center mt-2">

        <a href="/signup" class="text-decoration-none">New user? Signup</a>

      </div>

    </div>

  </div>

</template>



<script setup>

import apiClient from '@/components/api/axios';

import { useRouter } from 'vue-router';

import { ref } from 'vue';



const errorType = ref('');

const router = useRouter();



const username = ref('');

const password = ref('');



const login = async () => {

  // Handle login logic

  const data = {

    'username': username.value,

    'password': password.value

  }



  try{

    const response = await apiClient.post('/auth/login', data);

    const token = response.data.access_token;

    const role = response.data.user.role;

    console.log(role);

    localStorage.setItem('token', token);

    localStorage.setItem('role', role);

    if(role === 'admin'){

      router.push('/admin')

    }

    else{

      router.push('/');

    }

    alert("Login Successful")

  }

  catch(error){

    if (error.response){

      errorType.value = error.response.data.message;

    }

    console.log(error);

  }

}

</script>







================================================

FILE: frontend/src/views/ProfileView.vue

================================================

<template>

  <div class="user-profile-light-page">

    <div class="container py-5" v-if="profile">



      <TopSection :level="level" :profile="profile" :levelXP="levelXP"/>



      <div class="row g-4 text-center mb-5">

        <ProfileStatCards :daysSince="daysSince" :totalXP="totalXP" :quizzesCompleted="quizzesCompleted"/>

      </div>



      <div class="row g-4">



        <div class="col-lg-8">

          <AboutMe :editingProfile="editingProfile" @toggle="toggleEdit" />

        </div>



        <div class="col-lg-4 h-50">

          <SettingsCard @switch="editingProfile = !editingProfile" :editingProfile="editingProfile" />

        </div>

        <button class="btn btn-dark fs-4 w-25 mx-auto" @click="logout">Logout</button>

      </div>







    </div>

  </div>

</template>



<script setup>



import { onMounted, ref} from 'vue';

import { useProfileStore } from '@/stores/profileStore';

import { storeToRefs } from 'pinia';

import AboutMe from '@/components/profile/AboutMe.vue';

import TopSection from '@/components/profile/TopSection.vue';

import ProfileStatCards from '@/components/profile/ProfileStatCards.vue';

import SettingsCard from '@/components/profile/SettingsCard.vue';

import { useRouter } from 'vue-router';



const router = useRouter();



const profileStore = useProfileStore();

const { profile, quizzesCompleted,  daysSince, totalXP, level, levelXP } = storeToRefs(profileStore);



const editingProfile = ref(false);



const toggleEdit = () => {

  editingProfile.value = !editingProfile.value;

}



onMounted(() => {

  profileStore.fetchProfile();

});



const logout = () => {

  if (window.confirm("Are you sure you want to logout?")) {

    localStorage.removeItem('token');

    localStorage.removeItem('role');

    router.push('/login');

  }

};



</script>



<style scoped>

.user-profile-light-page {

  background-color: #f8f9fa; /* Light grey background */

  color: #212529; /* Standard dark text */

  min-height: 100vh;

  font-family: 'null, 'Roboto', sans-serif';

}

</style>







================================================

FILE: frontend/src/views/QuizView.vue

================================================

<template>

  <div v-if="selectedQuiz.is_ended">

    <QuizResult/>

  </div>

  <div v-else>

    <QuizFront v-if="!startedQuiz" @startQuiz="startedQuiz = true"/>

    <QuizPage v-else />

  </div>



</template>



<script setup>

import QuizFront from '@/components/quiz/QuizFront.vue';

import QuizPage from '@/components/quiz/QuizPage.vue';

import { ref } from 'vue';

import { useQuizStore } from '@/stores/quizStore';

import { storeToRefs } from 'pinia';

import QuizResult from '@/components/quiz/QuizResult.vue';



const quizStore = useQuizStore();

const { selectedQuiz } = storeToRefs(quizStore);



const startedQuiz = ref(false);





</script>







================================================

FILE: frontend/src/views/QuizzeriaView.vue

================================================

<template>

  <div class="quiz-history-page">

    <div class="container">

      <header class="page-header">

        <h1>My Quiz History</h1>

        <p class="text-muted">Review your performance and revisit past quizzes.</p>

      </header>



      <div class="filter-bar">

        <div class="input-group">

          <span class="input-group-text"><i class="bi bi-search"></i></span>

          <input type="text" class="form-control" placeholder="Search by quiz name..." v-model="searchQuery">

        </div>

        <div class="input-group">

          <label class="input-group-text" for="subject-filter">Subject</label>

          <select class="form-select" id="subject-filter" v-model="selectedSubject">

            <option value="All">All Subjects</option>

            <option v-for="subject in subjects" :key="subject.id" :value="subject.name">{{ capitalize(subject.name )}}</option>

          </select>

        </div>

        <div class="input-group">

          <label class="input-group-text" for="sort-filter">Sort By</label>

          <select class="form-select" id="sort-filter" v-model="sortBy">

            <option value="date_desc">Date (Newest)</option>

            <option value="date_asc">Date (Oldest)</option>

            <option value="score_desc">Score (High-Low)</option>

            <option value="score_asc">Score (Low-High)</option>

          </select>

        </div>

      </div>



      <div v-if="filteredQuizzes.length > 0" class="row g-4">

        <div v-for="quiz in filteredQuizzes" :key="quiz.id" class="col-md-6 col-lg-4">

          <QuizzeriaCard :quiz="quiz"/>

        </div>

      </div>



      <div v-else class="empty-state">

        <i class="bi bi-journal-x"></i>

        <h4>No Quizzes Found</h4>

        <p>Your completed quizzes will appear here once you finish them.</p>

      </div>



    </div>

  </div>

</template>



<script setup>

import apiClient from '@/components/api/axios';

import QuizzeriaCard from '@/components/quizzeria/QuizzeriaCard.vue';

import { ref, computed, onMounted, capitalize } from 'vue';



// --- State for Filters ---

const searchQuery = ref('');

const selectedSubject = ref('All');

const sortBy = ref('date_desc');



const completedQuizzes = ref([]);

const subjects = ref(null);



const findQuizzes = async () => {

  try{

    const response = await apiClient.get('/user/quizzes');

    completedQuizzes.value = response.data;

  }

  catch(error){

    console.log(error);

  }

}





const allSubjects = async () => {

  try{

    const response = await apiClient.get('/subjects');

    subjects.value = response.data;

  }

  catch(error){

    console.log(error);

  }

}



onMounted(() => {

  findQuizzes();

  allSubjects();

});



// --- Filtering and Sorting Logic ---

const filteredQuizzes = computed(() => {

  let quizzes = [...completedQuizzes.value];



  // 1. Filter by search query

  if (searchQuery.value) {

    quizzes = quizzes.filter(q => q.quiz_name.toLowerCase().includes(searchQuery.value.toLowerCase()));

  }



  // 2. Filter by subject

  if (selectedSubject.value !== 'All') {

    quizzes = quizzes.filter(q => q.subject_name === selectedSubject.value);

  }



  // 3. Sort the results

  quizzes.sort((a, b) => {

    switch (sortBy.value) {

      case 'score_desc': return (b.percentage) - (a.percentage);

      case 'score_asc': return (a.percentage) - (b.percentage);

      case 'date_asc': return new Date(a.attempted_at) - new Date(b.attempted_at);

      case 'date_desc':

      default:

        return new Date(b.attempted_at) - new Date(a.attempted_at);

    }

  });



  return quizzes;

});

</script>



<style scoped>

.quiz-history-page {

  background-color: #f8f9fa;

  min-height: 100vh;

  padding: 2rem 0;

  font-family: 'Segoe UI', 'Roboto', sans-serif;

}



.page-header {

  text-align: center;

  margin-bottom: 2rem;

}



.page-header h1 {

  font-weight: 700;

}



.filter-bar {

  display: grid;

  grid-template-columns: 1fr auto auto;

  gap: 1rem;

  background-color: #fff;

  padding: 1rem;

  border-radius: 0.75rem;

  margin-bottom: 2.5rem;

  border: 1px solid #dee2e6;

}



.quiz-result-card {

  background-color: #fff;

  border: 1px solid #e9ecef;

  border-radius: 0.75rem;

  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.05);

  transition: all 0.3s ease;

  display: flex;

  flex-direction: column;

  height: 100%;

}



.quiz-result-card:hover {

  transform: translateY(-5px);

  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);

}



.card-body {

  padding: 1.5rem;

  flex-grow: 1;

}



.quiz-subject-badge {

  display: inline-block;

  background-color: #e7f1ff;

  color: #0d6efd;

  padding: 0.3rem 0.7rem;

  border-radius: 20px;

  font-size: 0.8rem;

  font-weight: 600;

  margin-bottom: 0.75rem;

}



.quiz-name {

  font-size: 1.25rem;

  font-weight: 600;

  margin-bottom: 1rem;

}



.quiz-stats {

  font-size: 0.95rem;

  color: #6c757d;

}



.stat-item {

  display: flex;

  align-items: center;

  margin-bottom: 0.5rem;

}



.stat-item .bi {

  margin-right: 0.75rem;

  font-size: 1.2rem;

  color: #adb5bd;

}



.card-footer {

  background-color: transparent;

  border-top: 1px solid #e9ecef;

  padding: 1rem 1.5rem;

}



.empty-state {

  text-align: center;

  padding: 4rem;

  background-color: #fff;

  border-radius: 0.75rem;

  border: 1px solid #dee2e6;

  color: #6c757d;

}



.empty-state .bi {

  font-size: 4rem;

  color: #adb5bd;

  margin-bottom: 1rem;

}

</style>







================================================

FILE: frontend/src/views/ResultView.vue

================================================

<template>

  <div class="results-dashboard" v-if="completedQuizzes">

    <div class="container">

      <!-- Page Header -->

      <header class="page-header">

        <h1>Performance Dashboard</h1>

        <p class="text-muted">A summary of your quiz activity and performance metrics.</p>

      </header>



      <!-- KPI Row -->

      <div class="row g-4 mb-4">

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-quizzes"><i class="bi bi-journal-check"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ summary.quizzesAttempted }}</span>

              <span class="kpi-label">Quizzes Attempted</span>

            </div>

          </div>

        </div>

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-score"><i class="bi bi-star-fill"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ summary.averageScore }}%</span>

              <span class="kpi-label">Average Score</span>

            </div>

          </div>

        </div>

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-passrate"><i class="bi bi-check2-circle"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ summary.passRate }}%</span>

              <span class="kpi-label">Pass Rate</span>

            </div>

          </div>

        </div>

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-time"><i class="bi bi-stopwatch-fill"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ summary.hours }}h {{ summary.minutes }}m</span>

              <span class="kpi-label">Total Time Spent</span>

            </div>

          </div>

        </div>

      </div>



      <!-- Subject Performance & Score Distribution Row -->

      <div class="row g-4">

        <div class="col-lg-6">

          <div class="dashboard-card">

            <div class="card-header">

              <h3>Performance by Subject</h3>

            </div>

            <div class="card-body">

              <div class="row">

                <div class="col-md-6 mb-3">

                  <div class="subject-stat-card best">

                    <span class="label">Best Subject</span>

                    <span class="subject-name">{{ summary.bestSubject }}</span>

                  </div>

                </div>

                <div class="col-md-6 mb-3">

                  <div class="subject-stat-card weakest">

                    <span class="label">Weakest Subject</span>

                    <span class="subject-name">{{ summary.weakestSubject }}</span>

                  </div>

                </div>

              </div>

              <table class="table table-hover">

                <thead>

                  <tr>

                    <th>Subject</th>

                    <th>Quizzes Taken</th>

                    <th>Avg. Score</th>

                  </tr>

                </thead>

                <tbody>

                  <tr v-for="subject in performanceBySubject" :key="subject.name">

                    <td><strong>{{ subject.name }}</strong></td>

                    <td>{{ subject.quizzesTaken }}</td>

                    <td>{{ subject.avgScore }}%</td>

                  </tr>

                </tbody>

              </table>

            </div>

          </div>

        </div>

        <div class="col-lg-6">

          <div class="dashboard-card">

            <div class="card-header">

              <h3>Score Distribution</h3>

            </div>

            <div class="card-body chart-wrapper">

              <div class="y-axis-labels"><span>100%</span><span>50%</span><span>0%</span></div>

              <div class="chart-container">

                <div v-for="subject in performanceBySubject" :key="subject.name" class="chart-element">

                  <div class="chart-bar-wrapper">

                    <span v-if="subject.avgScore < 15" class="bar-label-outside">{{ subject.avgScore }}%</span>

                    <div class="chart-bar" :style="{ height: subject.avgScore + '%' }">

                      <span v-if="subject.avgScore >= 15" class="bar-label-inside">{{ subject.avgScore }}%</span>

                    </div>

                  </div>

                  <span class="chart-x-axis-label">{{ subject.name }}</span>

                </div>

              </div>

            </div>

          </div>

        </div>

      </div>



      <!-- Performance Over Time -->

      <div class="row g-4">

        <div class="col-12">

          <div class="dashboard-card">

            <div class="card-header">

              <h3>Performance Over Time</h3>

              <div class="d-flex gap-2">

                <select class="form-select form-select-sm" v-model="trendChartSubject">

                  <option value="All">All Subjects</option>

                  <option v-for="sub in subjects" :key="sub.id" :value="sub.name">{{ sub.name }}</option>

                </select>

                <select class="form-select form-select-sm" v-model.number="trendChartCount">

                  <option value="3">Last 3</option>

                  <option value="5">Last 5</option>

                  <option value="10">Last 10</option>

                  <option value="0">All</option>

                </select>

              </div>

            </div>

            <div class="card-body chart-wrapper">

              <div class="y-axis-labels"><span>100%</span><span>50%</span><span>0%</span></div>

              <div class="line-chart-container">

                <svg class="line-chart-svg" viewBox="0 0 500 200">

                  <line x1="0" y1="0" x2="500" y2="0" stroke="#e9ecef" />

                  <line x1="0" y1="100" x2="500" y2="100" stroke="#e9ecef" />

                  <line x1="0" y1="200" x2="500" y2="200" stroke="#dee2e6" />

                  <path :d="performancePath" class="chart-path" />

                  <g v-for="(point, index) in performancePoints" :key="index">

                    <circle :cx="point.x" :cy="point.y" r="4" class="chart-point" />

                    <!-- NEW: Text label for the score -->

                    <text :x="point.x" :y="point.y - 10" class="chart-point-label">{{ point.score }}%</text>

                    <title>{{point.score}}% on {{point.date}}</title>

                  </g>

                </svg>

              </div>

            </div>

          </div>

        </div>

      </div>



      <!-- Average Performance Trend -->

      <div class="row g-4">

        <div class="col-12">

          <div class="dashboard-card">

            <div class="card-header">

              <h3>Average Performance Trend</h3>

            </div>

            <div class="card-body chart-wrapper">

              <div class="y-axis-labels"><span>100%</span><span>50%</span><span>0%</span></div>

              <div class="line-chart-container">

                <svg class="line-chart-svg" viewBox="0 0 500 200">

                  <line x1="0" y1="0" x2="500" y2="0" stroke="#e9ecef" />

                  <line x1="0" y1="100" x2="500" y2="100" stroke="#e9ecef" />

                  <line x1="0" y1="200" x2="500" y2="200" stroke="#dee2e6" />

                  <path :d="averagePerformancePath" class="chart-path avg-path" />

                  <g v-for="(point, index) in averagePerformancePoints" :key="index">

                    <circle :cx="point.x" :cy="point.y" r="4" class="chart-point avg-point" />

                     <!-- NEW: Text label for the score -->

                    <text :x="point.x" :y="point.y - 10" class="chart-point-label avg-label">{{ point.score }}%</text>

                    <title>Avg. {{point.score}}%</title>

                  </g>

                </svg>

              </div>

            </div>

          </div>

        </div>

      </div>



      <!-- Recent Attempts & Personal Best -->

      <div class="row g-4">

        <div class="col-lg-7">

          <div class="dashboard-card">

            <div class="card-header">

              <h3>Recent Quiz Attempts</h3>

              <button class="btn btn-outline-secondary btn-sm" @click="download"><i class="bi bi-file-earmark-spreadsheet-fill me-2"></i>Download</button>

            </div>

            <div class="card-body table-responsive">

              <table class="table table-borderless">

                <thead>

                  <tr>

                    <th>Quiz Name</th>

                    <th>Score</th>

                    <th>Percentage</th>

                    <th>Date Completed</th>

                  </tr>

                </thead>

                <tbody>

                  <tr v-for="quiz in recentAttempts" :key="quiz.id">

                    <td><strong>{{ quiz.name }}</strong><br><small class="text-muted">{{ quiz.subject }}</small></td>

                    <td><span class="score-badge">{{ quiz.score }}/{{ quiz.totalMarks }}</span></td>

                    <td><strong>{{ quiz.percentage }}%</strong></td>

                    <td>{{ quiz.dateCompleted }}</td>

                  </tr>

                </tbody>

              </table>

            </div>

          </div>

        </div>

        <div class="col-lg-5">

          <div class="dashboard-card personal-best-card">

            <div class="card-body">

              <div class="best-icon"><i class="bi bi-trophy-fill"></i></div>

              <div class="best-content">

                  <h4>Personal Best</h4>

                  <p class="best-quiz-name">{{ highestScoringQuiz.name }}</p>

                  <small class="text-muted">Completed on {{ highestScoringQuiz.dateCompleted }}</small>

              </div>

              <div class="best-score">{{ highestScoringQuiz.percentage }}%</div>

            </div>

          </div>

        </div>

      </div>

    </div>

  </div>

</template>



<script setup>

import { onMounted, ref, computed } from 'vue';

import apiClient from '@/components/api/axios';

import { formatDate } from '@/composables/useDateFormat';



const completedQuizzes = ref([]);

const subjects = ref([]);



// --- Chart Filters State ---

const trendChartCount = ref(10);

const trendChartSubject = ref('All');



// --- Computed Properties ---

const quizzesAttempted = computed(() => completedQuizzes.value.length);

const averageScore = computed(() => completedQuizzes.value.length === 0 ? 0 : Math.round(completedQuizzes.value.reduce((sum, quiz) => sum + quiz.percentage, 0) / completedQuizzes.value.length));

const timeSpent = computed(() => completedQuizzes.value.reduce((sum, quiz) => sum + quiz.duration, 0));



const performanceBySubjectMap = computed(() => {

    const subjectMap = {};

    subjects.value.forEach(sub => { subjectMap[sub.name] = { name: sub.name, quizzesTaken: 0, totalPercentage: 0 }; });

    completedQuizzes.value.forEach(quiz => {

        if (subjectMap[quiz.subject_name]) {

            subjectMap[quiz.subject_name].quizzesTaken++;

            subjectMap[quiz.subject_name].totalPercentage += quiz.percentage;

        }

    });

    return Object.values(subjectMap).map(sub => ({ ...sub, avgScore: sub.quizzesTaken > 0 ? Math.round(sub.totalPercentage / sub.quizzesTaken) : 0 }));

});



const download = async () => {

  try{

    const response = await apiClient.post('/jobs/export/my-history');

    alert(`${response.data.message}`)

  }

  catch(error){

    console.log(error)

  }

}



const bestSubject = computed(() => {

    if (performanceBySubjectMap.value.length === 0) return 'N/A';

    return [...performanceBySubjectMap.value].sort((a, b) => b.avgScore - a.avgScore)[0].name;

});

const weakestSubject = computed(() => {

    if (performanceBySubjectMap.value.length === 0) return 'N/A';

    return [...performanceBySubjectMap.value].sort((a, b) => a.avgScore - b.avgScore)[0].name;

});

const passRate = computed(() => {

    if (completedQuizzes.value.length === 0) return 0;

    const passedQuizzes = completedQuizzes.value.filter(q => q.percentage >= (q.passing_percentage || 50)).length;

    return Math.round((passedQuizzes / completedQuizzes.value.length) * 100);

});

const highestScoringQuiz = computed(() => {

    if (completedQuizzes.value.length === 0) return { name: 'N/A', percentage: 0, dateCompleted: '' };

    const best = completedQuizzes.value.reduce((b, c) => c.percentage > b.percentage ? c : b, {percentage: 0});

    return { ...best, name: best.quiz_name, dateCompleted: formatDate(best.attempted_at) };

});



const summary = computed(() => ({

  quizzesAttempted: quizzesAttempted.value, averageScore: averageScore.value, bestSubject: bestSubject.value,

  weakestSubject: weakestSubject.value, passRate: passRate.value,

  hours: Math.floor(timeSpent.value / 60), minutes: timeSpent.value % 60

}));



const performanceBySubject = computed(() => performanceBySubjectMap.value);



const recentAttempts = computed(() => {

    return completedQuizzes.value.slice(-3).reverse().map(attempt => ({

        id: attempt.id, name: attempt.quiz_name, subject: attempt.subject_name,

        score: attempt.total_score, totalMarks: attempt.total_marks,

        percentage: attempt.percentage, dateCompleted: formatDate(attempt.attempted_at)

    }));

});



// --- Line Chart Logic ---

const filteredTrendQuizzes = computed(() => {

    let quizzes = [...completedQuizzes.value].sort((a, b) => new Date(a.attempted_at) - new Date(b.attempted_at));

    if (trendChartSubject.value !== 'All') {

        quizzes = quizzes.filter(q => q.subject_name === trendChartSubject.value);

    }

    if (trendChartCount.value > 0) {

        return quizzes.slice(-trendChartCount.value);

    }

    return quizzes;

});



const performancePoints = computed(() => {

    const quizzes = filteredTrendQuizzes.value;

    if (quizzes.length === 0) return [];

    if (quizzes.length === 1) {

        return [{ x: 250, y: 200 - (quizzes[0].percentage * 2), score: quizzes[0].percentage, date: formatDate(quizzes[0].attempted_at) }];

    }

    return quizzes.map((quiz, index) => ({

        x: (500 / (quizzes.length - 1)) * index,

        y: 200 - (quiz.percentage * 2),

        score: quiz.percentage,

        date: formatDate(quiz.attempted_at)

    }));

});

const performancePath = computed(() => {

    if (performancePoints.value.length < 2) return '';

    return performancePoints.value.map((p, i) => (i === 0 ? 'M' : 'L') + `${p.x} ${p.y}`).join(' ');

});



const averagePerformancePoints = computed(() => {

    const quizzes = filteredTrendQuizzes.value;

    if (quizzes.length === 0) return [];

    let runningTotal = 0;

    const points = quizzes.map((quiz, index) => {

        runningTotal += quiz.percentage;

        return { avg: Math.round(runningTotal / (index + 1)), index: index };

    });



    if (quizzes.length === 1) {

        return [{ x: 250, y: 200 - (points[0].avg * 2), score: points[0].avg }];

    }



    return points.map((point) => ({

        x: (500 / (quizzes.length - 1)) * point.index,

        y: 200 - (point.avg * 2),

        score: point.avg

    }));

});

const averagePerformancePath = computed(() => {

    if (averagePerformancePoints.value.length < 2) return '';

    return averagePerformancePoints.value.map((p, i) => (i === 0 ? 'M' : 'L') + `${p.x} ${p.y}`).join(' ');

});



// --- API Calls ---

const findQuizzes = async () => { try { const r = await apiClient.get('/user/quizzes'); completedQuizzes.value = r.data.map(q => ({...q, passing_percentage: 50})); } catch(e) { console.log(e); } }

const allSubjects = async () => { try { const r = await apiClient.get('/subjects'); subjects.value = r.data; } catch(e) { console.log(e); } }

onMounted(async () => { await allSubjects(); await findQuizzes(); });

</script>



<style scoped>

.results-dashboard { background-color: #f8f9fa; min-height: 100vh; padding: 2rem 0; font-family: 'Segoe UI', 'Roboto', sans-serif; }

.page-header { text-align: center; margin-bottom: 2rem; }

.page-header h1 { font-weight: 700; }

.kpi-card { background-color: #fff; border: 1px solid #dee2e6; border-radius: 0.75rem; padding: 1.5rem; display: flex; align-items: center; height: 100%; }

.kpi-icon { font-size: 2rem; padding: 1rem; border-radius: 50%; margin-right: 1rem; color: white; }

.icon-quizzes { background-color: #0d6efd; }

.icon-score { background-color: #198754; }

.icon-passrate { background-color: #0dcaf0; }

.icon-time { background-color: #fd7e14; }

.kpi-content { display: flex; flex-direction: column; }

.kpi-value { font-size: 1.75rem; font-weight: 700; }

.kpi-label { font-size: 0.9rem; color: #6c757d; }

.dashboard-card { background-color: #fff; border: 1px solid #dee2e6; border-radius: 0.75rem; height: 100%; }

.card-header { display: flex; justify-content: space-between; align-items: center; padding: 1rem 1.5rem; border-bottom: 1px solid #dee2e6; }

.card-header h3 { font-size: 1.2rem; font-weight: 600; margin: 0; }

.card-body { padding: 1.5rem; }

.table { margin-bottom: 0; }

.table thead th { border-bottom-width: 2px; }

.score-badge { background-color: #e7f1ff; color: #0d6efd; padding: 0.3rem 0.6rem; border-radius: 5px; font-weight: 600; }



/* Subject Stat Cards */

.subject-stat-card { border-radius: 0.5rem; padding: 1rem; text-align: center; }

.subject-stat-card .label { font-size: 0.9rem; font-weight: 500; }

.subject-stat-card .subject-name { font-size: 1.2rem; font-weight: 700; display: block; }

.subject-stat-card.best { background-color: #d1e7dd; color: #0f5132; }

.subject-stat-card.weakest { background-color: #f8d7da; color: #842029; }



/* Chart Wrapper with Axes */

.chart-wrapper { position: relative; padding-left: 35px; padding-bottom: 20px; }

.y-axis-labels { position: absolute; left: 0; top: 0; bottom: 20px; width: 30px; display: flex; flex-direction: column; justify-content: space-between; text-align: right; font-size: 0.8rem; color: #6c757d; }

.chart-container { height: 250px; }



/* Bar Chart */

.chart-container { display: flex; justify-content: space-around; align-items: flex-end; width: 100%; }

.chart-element { display: flex; flex-direction: column; align-items: center; height: 100%; }

.chart-bar-wrapper { display: flex; flex-direction: column; justify-content: flex-end; align-items: center; height: 100%; width: 60px; }

.chart-bar { width: 50px; background-color: #0d6efd; border-radius: 5px 5px 0 0; transition: height 0.5s ease-out; display: flex; justify-content: center; align-items: center; }

.bar-label-inside { color: white; font-size: 0.8rem; font-weight: 600; }

.bar-label-outside { color: #212529; font-size: 0.8rem; font-weight: 600; margin-bottom: 4px; }

.chart-x-axis-label { margin-top: 0.75rem; font-weight: 600; font-size: 0.9rem; color: #495057; }



/* Line Chart */

.line-chart-svg { width: 100%; height: 100%; overflow: visible; }

.chart-path { stroke-linecap: round; stroke-linejoin: round; fill: none; stroke-width: 3; stroke: #0d6efd;}

.chart-path.avg-path { stroke: #198754; }

.chart-point { fill: #0d6efd; stroke: white; stroke-width: 2; cursor: pointer; }

.chart-point.avg-point { fill: #198754; }

.chart-point:hover { r: 6; }

.chart-point-label {

  text-anchor: middle;

  font-size: 6px;

  font-weight: 600;

  fill: #212529;

}

.chart-point-label.avg-label {

  fill: #198754;

}



/* Personal Best Card */

.personal-best-card { display: flex; align-items: center; padding: 1.5rem; text-align: center; }

.best-icon { font-size: 3rem; color: #ffc107; }

.best-content { flex-grow: 1; padding: 0 1rem; }

.best-content h4 { font-size: 1.1rem; font-weight: 600; }

.best-quiz-name { font-size: 1rem; margin: 0; color: #6c757d; }

.best-score { font-size: 2.5rem; font-weight: 700; color: #198754; }



.g-4 { margin-top: 0 !important; }

</style>







================================================

FILE: frontend/src/views/SignupView.vue

================================================

<template>

  <div class="d-flex justify-content-center align-items-center vh-100 bg-light">

    <div class="card shadow-lg p-4" style="width: 100%; max-width: 500px; border-radius: 1rem;">

      <!-- Logo -->

      <div class="text-center mb-1">

        <img src="@/assets/logo.png" alt="QuizMaster Pro" class="rounded-circle" style="width: 100px; height: 100px;" />

        <h2 class="mt-2 fw-bold">Create Account</h2>

      </div>



        <div class="text-center mb-0">

          <p class="text-danger fs-6">{{ errorType }}</p>

        </div>



      <!-- Signup Form -->

      <form @submit.prevent="signup">

        <div class="mb-1">

          <label class="form-label mb-0 fs-5">Username</label>

          <input type="text" class="form-control" v-model="username" required />

        </div>



        <div class="mb-2">

          <label class="form-label mb-0 fs-5">Email</label>

          <input type="email" class="form-control" v-model="email" required />

        </div>



        <div class="mb-2">

          <label class="form-label mb-0 fs-5">Gender</label>

          <select class="form-select" v-model="gender" required>

            <option value="" disabled>Select Gender</option>

            <option>Male</option>

            <option>Female</option>

            <option>Other</option>

          </select>

        </div>



        <div class="mb-2">

          <label class="form-label mb-0 fs-5">Date of Birth</label>

          <input type="date" class="form-control" v-model="dob" :max="today" required />

        </div>



        <div class="mb-2">

          <label class="form-label mb-0 fs-5">Qualification</label>

          <input type="text" class="form-control" v-model="qualification" required />

        </div>



        <div class="mb-2">

          <label class="form-label mb-0 fs-5">College</label>

          <input type="text" class="form-control" v-model="college" required />

        </div>



        <div class="mb-2">

          <label class="form-label mb-0 fs-5">Phone</label>

          <input type="tel" class="form-control" v-model="phone" required />

          <small v-if="!validPhone" class="text-danger">Please enter a valid phone number</small>

        </div>



        <div class="mb-2">

          <label class="form-label mb-0 fs-5">Password</label>

          <input type="password" class="form-control" v-model="password" required minlength="6" />

          <small v-if="!validPassword" class="text-danger">Password must be atleast 6 characters</small>

        </div>



        <div class="mb-2">

          <label class="form-label mb-0 fs-5">Confirm Password</label>

          <input type="password" class="form-control" v-model="confirmPassword" required />

          <small v-if="passwordsMismatch" class="text-danger">Passwords do not match</small>

        </div>



        <button type="submit" class="btn btn-success w-100" :disabled="passwordsMismatch">Sign Up</button>

        <div class="text-center mt-2">

          <a href="/login" class="text-decoration-none">Already have an account? Login</a>

        </div>

      </form>

    </div>

  </div>

</template>



<script setup>

import { ref, computed } from 'vue';

import apiClient from '@/components/api/axios';

import { useRouter } from 'vue-router';



const username = ref('');

const email = ref('');

const gender = ref('');

const dob = ref('');

const qualification = ref('');

const college = ref('');

const phone = ref('');

const password = ref('');

const confirmPassword = ref('');



const passwordsMismatch = computed(() => password.value !== confirmPassword.value);

const validPassword = computed(() => password.value.length >= 6 || password.value.length === 0);

const validPhone = computed(() => /^\d{10}$/.test(phone.value) || phone.value.length === 0);

const today = new Date().toISOString().split('T')[0];

const router = useRouter();

const errorType = ref('');



const signup = async () => {

  if (passwordsMismatch.value) return;



  const payload = {

    username: username.value,

    email: email.value,

    gender: gender.value,

    dob: dob.value,

    qualification: qualification.value,

    college: college.value,

    phone: Number(phone.value),

    password: password.value,

  };



  try {

    await apiClient.post('/auth/register', payload);

    alert('Signup successful!');

    router.push('/login');

    return

  } catch (error) {

    if(error.response.status === 409){

      let message = error.response.data.message;

      console.log(message);

      errorType.value = message;

      console.log(errorType.value);

    }

    else{

      console.log("Something went wrong");

    }

  }

};

</script>







================================================

FILE: frontend/src/views/SubjectView.vue

================================================

<template>

  <div class="container-fluid">

    <div class="row min-vh-100">

      <!-- Left Sidebar -->

      <div class="col-2 border border-black p-2 d-flex flex-column">

        <SubjectListing/>

      </div>



      <div class="col-10">



        <!-- Bottom Row -->

        <div class="row" style="height: 100vh;">

          <!-- Main Content -->

          <div class="col-12 border border-black d-flex">

            <ChapterDescription/>

          </div>

        </div>

      </div>

    </div>

  </div>

</template>



<script setup>

import ChapterDescription from '@/components/subject/ChapterDescription.vue';

import SubjectListing from '@/components/subject/SubjectListing.vue';



</script>







================================================

FILE: frontend/src/views/admin/AdminCreateQuiz.vue

================================================

<template>

  <div class="create-quiz-page">

    <div class="container">

      <!-- 1. Page Header - Now shows the chapter name -->

      <header class="page-header">

        <h1>Create New Quiz</h1>

        <h2 class="chapter-context">

          For Chapter: <strong>{{ chapterName }}</strong>

        </h2>

      </header>



      <!-- 2. Main Quiz Details Form - Chapter dropdown is removed -->

      <div class="card quiz-details-card">

        <div class="card-body">

          <div class="mb-3">

            <label for="quizName" class="form-label fw-bold">Quiz Name</label>

            <input type="text" class="form-control" id="quizName" v-model="quiz.name" placeholder="e.g., Assessment 1">

          </div>

          <div class="mb-3">

            <label for="quizDescription" class="form-label fw-bold">Description</label>

            <textarea class="form-control" id="quizDescription" rows="3" v-model="quiz.description" placeholder="A brief summary of what this quiz covers."></textarea>

          </div>

          <div class="row">

            <div class="col-md-6 mb-3">

              <label for="quizDate" class="form-label fw-bold">Date</label>

              <input type="date" class="form-control" id="quizDate" v-model="quiz.date">

            </div>

            <div class="col-md-6 mb-3">

              <label for="quizTime" class="form-label fw-bold">Time</label>

              <input type="time" class="form-control" id="quizTime" v-model="quiz.time">

            </div>

          </div>

          <div class="row">

            <div class="col-md-6 mb-3">

              <label for="quizDuration" class="form-label fw-bold">Duration (in minutes)</label>

              <input type="number" class="form-control" id="quizDuration" v-model.number="quiz.duration" min="1">

            </div>

            <div class="col-md-6 mb-3">

              <label for="quizPassing" class="form-label fw-bold">Passing Score (%)</label>

              <input type="number" class="form-control" id="quizPassing" v-model.number="quiz.passing" min="0" max="100">

            </div>

          </div>

          <div class="mb-3">

            <label for="quizRemarks" class="form-label fw-bold">Remarks (Optional)</label>

            <input type="text" class="form-control" id="quizRemarks" v-model="quiz.remarks" placeholder="Any additional notes or remarks for this quiz.">

          </div>

        </div>

      </div>



      <!-- 3. Dynamic Questions List (Unchanged) -->

      <div class="questions-section">

        <h2 class="section-title">Questions</h2>

        <div v-for="(question, qIndex) in quiz.questions" :key="question.id" class="card question-card">

          <div class="card-header d-flex justify-content-between align-items-center">

            <h5 class="mb-0">Question {{ qIndex + 1 }}</h5>

            <button class="btn btn-sm btn-outline-danger" @click="removeQuestion(qIndex)">

              <i class="bi bi-trash-fill"></i> Remove Question

            </button>

          </div>

          <div class="card-body">

            <div class="mb-3">

              <label class="form-label">Question Statement</label>

              <textarea class="form-control" rows="2" v-model="question.statement" placeholder="Enter the question text..."></textarea>

            </div>

            <div class="mb-3">

              <label class="form-label">Marks</label>

              <input type="number" class="form-control" v-model.number="question.marks" min="1">

            </div>

            <div class="options-list">

              <label class="form-label">Options (Select the correct answer)</label>

              <div v-for="(option, oIndex) in question.options" :key="option.id" class="input-group mb-2">

                <div class="input-group-text">

                  <input

                    class="form-check-input mt-0"

                    type="radio"

                    :name="'correct-option-' + question.id"

                    :value="option.id"

                    v-model="question.correct_option_id"

                  >

                </div>

                <input type="text" class="form-control" v-model="option.text" placeholder="Enter option text...">

                <button class="btn btn-outline-secondary" @click="removeOption(qIndex, oIndex)" :disabled="question.options.length <= 2">

                  <i class="bi bi-x"></i>

                </button>

              </div>

            </div>

            <button class="btn btn-sm btn-secondary mt-2" @click="addOption(qIndex)" :disabled="question.options.length >= 4">

              <i class="bi bi-plus"></i> Add Option

            </button>

          </div>

        </div>

        <button class="btn btn-primary w-100" @click="addQuestion">

          <i class="bi bi-plus-circle-fill me-2"></i>Add Another Question

        </button>

      </div>



      <!-- 4. Final Save Button (Unchanged) -->

      <div class="form-actions">

        <button class="btn btn-success btn-lg w-100" @click="saveQuiz">

          Save Quiz

        </button>

      </div>

    </div>

  </div>

</template>



<script setup>

import { ref } from 'vue';

import { useAdminQuizStore } from '@/stores/admin/adminQuizStore';

import { useRouter } from 'vue-router';



// --- Assumed data from your store ---

// In your real component, you would get these from your Pinia store

const chapterName = ref('Introduction to Calculus'); // Example value

const chapterIdFromStore = ref(1); // Example value

const adminQuizStore = useAdminQuizStore();



const router = useRouter();



// --- Data Structure for the Quiz ---

const quiz = ref({

  name: '',

  description: '',

  chapter_id: chapterIdFromStore.value, // Set from the store

  date: new Date(Date.now() + 86400000).toISOString().split('T')[0],

  time: '10:00',

  duration: 60,

  remarks: '',

  passing: 50,

  questions: [

    {

      id: Date.now() ,

      statement: '',

      marks: 10,

      options: [

        { id: Date.now() + 1, text: '' },

        { id: Date.now() + 2, text: '' },

      ],

      correct_option_id: null,

    },

  ],

});



// --- Functions to Manage the Form (Unchanged) ---

const addQuestion = () => {

  const newQuestionId = Date.now();

  quiz.value.questions.push({

    id: newQuestionId,

    statement: '',

    marks: 10,

    options: [

      { id: newQuestionId + 1, text: '' },

      { id: newQuestionId + 2, text: '' },

    ],

    correct_option_id: null,

  });

};



const removeQuestion = (index) => {

  quiz.value.questions.splice(index, 1);

};



const addOption = (questionIndex) => {

  const question = quiz.value.questions[questionIndex];

  if (question.options.length < 4) {

    question.options.push({ id: Date.now(), text: '' });

  }

};



const removeOption = (questionIndex, optionIndex) => {

  const question = quiz.value.questions[questionIndex];

  if (question.options.length > 2) {

    question.options.splice(optionIndex, 1);

  }

};



const saveQuiz = () => {

  // console.log("Saving Quiz Data:", JSON.parse(JSON.stringify(quiz.value)));

  adminQuizStore.createQuiz(quiz.value);

  alert('Quiz Created Successfully');

  router.push('/admin/subjects')

};

</script>



<style scoped>

.create-quiz-page {

  background-color: #f8f9fa;

  min-height: 100vh;

  padding: 2rem 0;

  font-family: 'Segoe UI', 'Roboto', sans-serif;

}

.container {

  max-width: 800px;

  margin: 0 auto;

}

.page-header {

  text-align: center;

  margin-bottom: 2rem;

}

.page-header h1 {

  font-weight: 700;

}

.chapter-context {

  font-size: 1.25rem;

  font-weight: 400;

  color: #6c757d;

}

.quiz-details-card, .question-card {

  background-color: #fff;

  border: 1px solid #dee2e6;

  border-radius: 0.75rem;

  margin-bottom: 1.5rem;

}

.questions-section {

  margin-top: 2.5rem;

}

.section-title {

  font-size: 1.5rem;

  font-weight: 600;

  margin-bottom: 1rem;

}

.question-card .card-header {

  background-color: #f8f9fa;

}

.options-list .input-group-text {

  background-color: #e9ecef;

}

.form-actions {

  margin-top: 2.5rem;

  padding-top: 1.5rem;

  border-top: 1px solid #dee2e6;

}

</style>







================================================

FILE: frontend/src/views/admin/AdminDashboard.vue

================================================

<template>

  <div class="home-page">



    <!-- Hero Section -->

    <section class="hero-section admin-hero">

        <div class="container">

            <h1 class="display-4">Platform Management Hub</h1>

            <p class="lead my-4">Oversee all platform activity, manage content, and analyze user performance from one central location.</p>

            <a href="/admin/subjects" class="btn btn-light btn-lg fw-bold px-5 py-3">Go to Classroom</a>

        </div>

    </section>



    <!-- Features Section -->

    <section class="section">

        <div class="container">

            <h2 class="section-title">Core Admin Functions</h2>

            <div class="row g-4">

                <div class="col-md-4">

                    <div class="feature-card">

                        <div class="feature-icon admin-icon"><i class="bi bi-folder-symlink-fill"></i></div>

                        <h4 class="fw-bold">Content Management</h4>

                        <p>Create, edit, and organize subjects, chapters, and quizzes with a powerful and intuitive interface.</p>

                    </div>

                </div>

                <div class="col-md-4">

                    <div class="feature-card">

                        <div class="feature-icon admin-icon"><i class="bi bi-people-fill"></i></div>

                        <h4 class="fw-bold">User Oversight</h4>

                        <p>View detailed profiles, track individual progress, and manage user accounts and permissions.</p>

                    </div>

                </div>

                <div class="col-md-4">

                    <div class="feature-card">

                        <div class="feature-icon admin-icon"><i class="bi bi-bar-chart-line-fill"></i></div>

                        <h4 class="fw-bold">Performance Analytics</h4>

                        <p>Access a comprehensive dashboard with insights on content effectiveness and user engagement.</p>

                    </div>

                </div>

            </div>

        </div>

    </section>



    <!-- Footer -->

    <footer class="footer">

        <div class="container text-center">

            <p>&copy; 2025 QuizMaster Admin Panel. All Rights Reserved.</p>

        </div>

    </footer>

  </div>

</template>



<script setup>

// No script logic needed for this static page

</script>



<style scoped>

.home-page {

    font-family: 'Poppins', sans-serif;

    background-color: #f8f9fa;

}

.navbar {

    box-shadow: 0 2px 10px rgba(0,0,0,0.1);

}

.hero-section {

    color: white;

    padding: 100px 0;

    text-align: center;

}

.admin-hero {

    background: linear-gradient(45deg, #2d3748, #4a5568);

}

.hero-section h1 {

    font-weight: 700;

    font-size: 3.5rem;

}

.hero-section p {

    font-size: 1.25rem;

    opacity: 0.9;

}

.section {

    padding: 80px 0;

}

.section-title {

    text-align: center;

    margin-bottom: 50px;

    font-weight: 600;

    font-size: 2.5rem;

}

.feature-card {

    background-color: #fff;

    border: 1px solid #dee2e6;

    border-radius: 0.75rem;

    padding: 2rem;

    text-align: center;

    transition: all 0.3s ease;

    height: 100%;

}

.feature-card:hover {

    transform: translateY(-10px);

    box-shadow: 0 10px 30px rgba(0,0,0,0.1);

}

.feature-icon {

    font-size: 3rem;

    margin-bottom: 1rem;

}

.admin-icon {

    color: #6f42c1;

}

.footer {

    background-color: #343a40;

    color: #adb5bd;

    padding: 40px 0;

}

</style>







================================================

FILE: frontend/src/views/admin/AdminEditQuiz.vue

================================================

<template>

  <div class="edit-quiz-page">

    <div class="container">

      <!-- 1. Page Header -->

      <header class="page-header">

        <h1>Edit Quiz</h1>

        <h2 class="chapter-context">

          For Chapter: <strong>{{ chapterName }}</strong>

        </h2>

      </header>



      <!-- 2. Main Quiz Details Form -->

      <div class="card quiz-details-card">

        <div class="card-body">

          <div class="mb-3">

            <label for="quizName" class="form-label fw-bold">Quiz Name</label>

            <input type="text" class="form-control" id="quizName" v-model="quiz.name" placeholder="e.g., Assessment 1">

          </div>

          <div class="mb-3">

            <label for="quizDescription" class="form-label fw-bold">Description</label>

            <textarea class="form-control" id="quizDescription" rows="3" v-model="quiz.description" placeholder="A brief summary of what this quiz covers."></textarea>

          </div>

          <div class="row">

            <div class="col-md-6 mb-3">

              <label for="quizDate" class="form-label fw-bold">Date</label>

              <input type="date" class="form-control" id="quizDate" v-model="quiz.date">

            </div>

            <div class="col-md-6 mb-3">

              <label for="quizTime" class="form-label fw-bold">Time</label>

              <input type="time" class="form-control" id="quizTime" v-model="quiz.time">

            </div>

          </div>

          <div class="row">

            <div class="col-md-6 mb-3">

              <label for="quizDuration" class="form-label fw-bold">Duration (in minutes)</label>

              <input type="number" class="form-control" id="quizDuration" v-model.number="quiz.duration" min="1">

            </div>

            <div class="col-md-6 mb-3">

              <label for="quizPassing" class="form-label fw-bold">Passing Score (%)</label>

              <input type="number" class="form-control" id="quizPassing" v-model.number="quiz.passing" min="0" max="100">

            </div>

          </div>

          <div class="mb-3">

            <label for="quizRemarks" class="form-label fw-bold">Remarks (Optional)</label>

            <input type="text" class="form-control" id="quizRemarks" v-model="quiz.remarks" placeholder="Any additional notes or remarks for this quiz.">

          </div>

        </div>

      </div>



      <!-- 3. Dynamic Questions List -->

      <div class="questions-section">

        <h2 class="section-title">Questions</h2>

        <div v-for="(question, qIndex) in quiz.questions" :key="question.id" class="card question-card">

          <div class="card-header d-flex justify-content-between align-items-center">

            <h5 class="mb-0">Question {{ qIndex + 1 }}</h5>

            <button class="btn btn-sm btn-outline-danger" @click="removeQuestion(qIndex)">

              <i class="bi bi-trash-fill"></i> Remove Question

            </button>

          </div>

          <div class="card-body">

            <div class="mb-3">

              <label class="form-label">Question Statement</label>

              <textarea class="form-control" rows="2" v-model="question.statement" placeholder="Enter the question text..."></textarea>

            </div>

            <div class="mb-3">

              <label class="form-label">Marks</label>

              <input type="number" class="form-control" v-model.number="question.marks" min="1">

            </div>

            <div class="options-list">

              <label class="form-label">Options (Select the correct answer)</label>

              <div v-for="(option, oIndex) in question.options" :key="option.id" class="input-group mb-2">

                <div class="input-group-text">

                  <input

                    class="form-check-input mt-0"

                    type="radio"

                    :name="'correct-option-' + question.id"

                    :value="option.id"

                    v-model="question.correct_option_id"

                  >

                </div>

                <input type="text" class="form-control" v-model="option.text" placeholder="Enter option text...">

                <button class="btn btn-outline-secondary" @click="removeOption(qIndex, oIndex)" :disabled="question.options.length <= 2">

                  <i class="bi bi-x"></i>

                </button>

              </div>

            </div>

            <button class="btn btn-sm btn-secondary mt-2" @click="addOption(qIndex)" :disabled="question.options.length >= 4">

              <i class="bi bi-plus"></i> Add Option

            </button>

          </div>

        </div>

        <button class="btn btn-primary w-100" @click="addQuestion">

          <i class="bi bi-plus-circle-fill me-2"></i>Add Another Question

        </button>

      </div>



      <!-- 4. Final Save Button -->

      <div class="form-actions">

        <button class="btn btn-success btn-lg w-100" @click="updateQuiz">

          Update Quiz

        </button>

      </div>

    </div>

  </div>

</template>



<script setup>

import { ref, onMounted } from 'vue';

import { useAdminQuizStore } from '@/stores/admin/adminQuizStore';

import { storeToRefs } from 'pinia';

import { useRouter } from 'vue-router';



const router = useRouter();



const adminQuizStore = useAdminQuizStore();

const { selectedQuiz, selectedQuestions } = storeToRefs(adminQuizStore);





// --- Assumed data from your store ---

const chapterName = ref('Introduction to Calculus');



const quiz = ref({});



const fetchQuizData = async () => {

  await adminQuizStore.fetchQuestions();

  quiz.value = JSON.parse(JSON.stringify(selectedQuiz.value));

  quiz.value.questions = JSON.parse(JSON.stringify(selectedQuestions.value));

  for(let question of quiz.value.questions){

    question.correct_option_id = question.options.find(opt => opt.is_correct).id;

  }

};



onMounted(() => {

  fetchQuizData();

});



// --- Functions to Manage the Form ---

const addQuestion = () => {

  const newQuestionId = Date.now();

  quiz.value.questions.push({

    id: newQuestionId,

    statement: '',

    marks: 10,

    options: [

      { id: newQuestionId + 1, text: '' },

      { id: newQuestionId + 2, text: '' },

    ],

    correct_option_id: null,

  });

};



const removeQuestion = (index) => {

  quiz.value.questions.splice(index, 1);

};



const addOption = (questionIndex) => {

  const question = quiz.value.questions[questionIndex];

  if (question.options.length < 4) {

    question.options.push({ id: Date.now(), text: '' });

  }

};



const removeOption = (questionIndex, optionIndex) => {

  const question = quiz.value.questions[questionIndex];

  if (question.options.length > 2) {

    question.options.splice(optionIndex, 1);

  }

};



const updateQuiz = () => {

  // You will handle the API call to PATCH/PUT the updated quiz data here.

  adminQuizStore.updateQuiz(quiz.value);

  alert('Quiz updated.');

  router.push('/admin/subjects');

};





</script>



<style scoped>

.edit-quiz-page {

  background-color: #f8f9fa;

  min-height: 100vh;

  padding: 2rem 0;

  font-family: 'Segoe UI', 'Roboto', sans-serif;

}

.container {

  max-width: 800px;

  margin: 0 auto;

}

.page-header {

  text-align: center;

  margin-bottom: 2rem;

}

.page-header h1 {

  font-weight: 700;

}

.chapter-context {

  font-size: 1.25rem;

  font-weight: 400;

  color: #6c757d;

}

.quiz-details-card, .question-card {

  background-color: #fff;

  border: 1px solid #dee2e6;

  border-radius: 0.75rem;

  margin-bottom: 1.5rem;

}

.questions-section {

  margin-top: 2.5rem;

}

.section-title {

  font-size: 1.5rem;

  font-weight: 600;

  margin-bottom: 1rem;

}

.question-card .card-header {

  background-color: #f8f9fa;

}

.options-list .input-group-text {

  background-color: #e9ecef;

}

.form-actions {

  margin-top: 2.5rem;

  padding-top: 1.5rem;

  border-top: 1px solid #dee2e6;

}

</style>







================================================

FILE: frontend/src/views/admin/AdminStatsView.vue

================================================

<template>

  <div class="admin-dashboard-page">

    <div class="container">

      <!-- 1. Page Header -->

      <header class="page-header">

        <h1>Admin Dashboard</h1>

        <p class="text-muted">A high-level overview of platform activity and content performance.</p>

      </header>



      <!-- 2. Platform-Wide KPIs -->

      <div class="row g-4 mb-5">

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-subjects"><i class="bi bi-stack"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ kpis.totalSubjects }}</span>

              <span class="kpi-label">Total Subjects</span>

            </div>

          </div>

        </div>

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-quizzes"><i class="bi bi-collection-fill"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ kpis.totalQuizzes }}</span>

              <span class="kpi-label">Total Quizzes</span>

            </div>

          </div>

        </div>

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-attempts"><i class="bi bi-journal-check"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ kpis.totalAttempts }}</span>

              <span class="kpi-label">Total Quiz Attempts</span>

            </div>

          </div>

        </div>

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-score"><i class="bi bi-star-fill"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ kpis.averageScore }}%</span>

              <span class="kpi-label">Platform Avg. Score</span>

            </div>

          </div>

        </div>

      </div>



      <!-- 3. Subject Performance & Visualization -->

      <div class="row g-4 mb-5">

        <div class="col-lg-7">

          <div class="dashboard-card">

            <div class="card-header"><h3>Performance by Subject</h3></div>

            <div class="card-body table-responsive">

              <table class="table table-hover">

                <thead>

                  <tr>

                    <th>Subject</th>

                    <th>Quizzes</th>

                    <th>Total Attempts</th>

                    <th>Avg. Score</th>

                  </tr>

                </thead>

                <tbody>

                  <tr v-for="subject in performanceBySubject" :key="subject.name">

                    <td><strong>{{ subject.name }}</strong></td>

                    <td>{{ subject.quizCount }}</td>

                    <td>{{ subject.totalAttempts }}</td>

                    <td>{{ subject.avgScore }}%</td>

                  </tr>

                </tbody>

              </table>

            </div>

          </div>

        </div>

        <div class="col-lg-5">

          <div class="dashboard-card">

            <div class="card-header"><h3>Average Score by Subject</h3></div>

            <div class="card-body chart-wrapper">

              <div class="y-axis-labels"><span>100%</span><span>50%</span><span>0%</span></div>

              <div class="chart-container">

                <div v-for="subject in performanceBySubject" :key="subject.name" class="chart-element">

                  <div class="chart-bar-wrapper">

                    <div class="chart-bar" :style="{ height: subject.avgScore + '%' }">

                      <span class="bar-label-inside">{{ subject.avgScore }}%</span>

                    </div>

                  </div>

                  <span class="chart-x-axis-label">{{ subject.name }}</span>

                </div>

              </div>

            </div>

          </div>

        </div>

      </div>



      <!-- NEW: Quiz Performance Analysis -->

      <div class="row g-4 mb-5">

        <div class="col-lg-6">

          <div class="dashboard-card">

            <div class="card-header"><h3>Problematic Quizzes (Lowest Scores)</h3></div>

            <div class="card-body table-responsive">

              <table class="table">

                <thead><tr><th>Quiz Name</th><th>Attempts</th><th>Avg. Score</th></tr></thead>

                <tbody>

                  <tr v-for="quiz in problematicQuizzes" :key="quiz.id">

                    <td><strong>{{ quiz.name }}</strong><br><small class="text-muted">{{ quiz.subject }}</small></td>

                    <td>{{ quiz.attempts }}</td>

                    <td><span class="badge bg-danger-light text-danger">{{ quiz.avgScore }}%</span></td>

                  </tr>

                </tbody>

              </table>

            </div>

          </div>

        </div>

        <div class="col-lg-6">

          <div class="dashboard-card">

            <div class="card-header"><h3>Top Quizzes (Highest Scores)</h3></div>

            <div class="card-body table-responsive">

              <table class="table">

                <thead><tr><th>Quiz Name</th><th>Attempts</th><th>Avg. Score</th></tr></thead>

                <tbody>

                  <tr v-for="quiz in topQuizzes" :key="quiz.id">

                    <td><strong>{{ quiz.name }}</strong><br><small class="text-muted">{{ quiz.subject }}</small></td>

                    <td>{{ quiz.attempts }}</td>

                    <td><span class="badge bg-success-light text-success">{{ quiz.avgScore }}%</span></td>

                  </tr>

                </tbody>

              </table>

            </div>

          </div>

        </div>

      </div>



      <!-- 4. Trend Charts Section -->

      <div class="dashboard-card">

        <div class="card-header filter-header">

          <h3>Performance Trends</h3>



          <div class="d-flex gap-2">

            <select class="form-select form-select-sm" v-model="trendChartSubject">

              <option value="All">All Subjects</option>

              <option v-for="sub in performanceBySubject" :key="sub.name" :value="sub.name">{{ sub.name }}</option>

            </select>

            <select class="form-select form-select-sm" v-model.number="trendChartCount">

              <option value="10">Last 10 Attempts</option>

              <option value="20">Last 20 Attempts</option>

              <option value="50">Last 50 Attempts</option>

              <option value="0">All Attempts</option>

            </select>

          </div>

          <button class="btn btn-outline-secondary btn-sm" @click="download"><i class="bi bi-file-earmark-spreadsheet-fill me-2"></i>Download</button>

        </div>



        <div class="card-body border-bottom">

            <h6 class="chart-title">Scores Over Last {{ trendChartCount > 0 ? trendChartCount : 'All' }} Attempts</h6>

            <div class="chart-wrapper">

              <div class="y-axis-labels"><span>100%</span><span>50%</span><span>0%</span></div>

              <div class="line-chart-container">

                <svg class="line-chart-svg" viewBox="0 0 500 200">

                  <path :d="latestAttemptsPath" class="chart-path attempts-path" />

                </svg>

              </div>

            </div>

        </div>



        <div class="card-body">

            <h6 class="chart-title">Moving Average Over Last {{ trendChartCount > 0 ? trendChartCount : 'All' }} Attempts</h6>

            <div class="chart-wrapper">

              <div class="y-axis-labels"><span>100%</span><span>50%</span><span>0%</span></div>

              <div class="line-chart-container">

                <svg class="line-chart-svg" viewBox="0 0 500 200">

                  <path :d="averageAttemptsPath" class="chart-path avg-path" />

                </svg>

              </div>

            </div>

        </div>

      </div>

    </div>

  </div>

</template>



<script setup>

import apiClient from '@/components/api/axios';

import { ref, computed, onMounted } from 'vue';



const subjects = ref([]);

const quizzes = ref([]);

const attempts = ref([])



const fetchSubjects = async () => {

  const response = await apiClient.get('/subjects');

  subjects.value = response.data;

}



const fetchQuizzes = async () => {

  const response = await apiClient.get('/quizzes/all');

  quizzes.value = response.data;

}



const fetchAttempts = async () => {

  const response = await apiClient.get('/attempts/all');

  attempts.value = response.data;

}



const download = async () => {

  try{

    const response = await apiClient.post('/jobs/export/all-users');

    alert(`${response.data.message}`);

  }

  catch(error){

    console.log(error);

  }

}



onMounted(() => {

  fetchSubjects();

  fetchQuizzes();

  fetchAttempts();

  allSubjectPerformance();

  allQuizPerformance();

})





// --- Dummy Data ---

const kpis = computed(() => ({

  totalSubjects: subjects.value.length,

  totalQuizzes: quizzes.value.length,

  totalAttempts: attempts.value.length,

  averageScore:

    attempts.value.length > 0

      ? Math.round(attempts.value.reduce((total, attempt) => total + attempt.percentage, 0) / attempts.value.length)

      : 0

}));



const performanceBySubject = ref([])



const performanceSub = (sub) => {

  const name = sub.name;

  const quizCount = quizzes.value.reduce((count, quiz) => count + (quiz.subject_name === sub.name ? 1 : 0), 0);

  const totalAttempts = attempts.value.reduce((count, attempt) => count + (attempt.subject_name === sub.name ? 1 : 0), 0);

  const avgScore = totalAttempts > 0 ? Math.round(attempts.value.reduce((total, attempt) => total + (attempt.subject_name === sub.name ? attempt.percentage : 0), 0) / totalAttempts) : 0;

  const per = {

    name: name,

    quizCount: quizCount,

    totalAttempts: totalAttempts,

    avgScore: avgScore

  }

  performanceBySubject.value.push(per);

}



const allSubjectPerformance = async () => {

  await fetchSubjects();

  await fetchQuizzes();

  await fetchAttempts();

  performanceBySubject.value = [];

  for(let subject of subjects.value){

    performanceSub(subject);

  }

}



const performanceByQuiz = ref([]);



const performanceQuiz = (quiz) => {

  const id = quiz.id

  const name = quiz.name;

  const subject = quiz.subject_name

  const totalAttempts = attempts.value.reduce((count, attempt) => count + (attempt.quiz_name === quiz.name ? 1 : 0), 0);

  const avgScore = totalAttempts > 0 ? Math.round(attempts.value.reduce((total, attempt) => total + (attempt.quiz_name === quiz.name ? attempt.percentage : 0), 0) / totalAttempts) : 0;

  const per = {

    id: id,

    name: name,

    subject: subject,

    attempts: totalAttempts,

    avgScore: avgScore

  }

  performanceByQuiz.value.push(per);

}



const allQuizPerformance = async () => {

  await fetchQuizzes();

  await fetchAttempts();

  performanceByQuiz.value = [];

  for(let quiz of quizzes.value){

    performanceQuiz(quiz);

  }

  performanceByQuiz.value.sort((a, b) => b.avgScore - a.avgScore);

}



const problematicQuizzes = computed(() => performanceByQuiz.value.slice().reverse().slice(0, 3));

const topQuizzes = computed(() => performanceByQuiz.value.slice(0, 3));





// --- State for Filters ---

const trendChartCount = ref(10);

const trendChartSubject = ref('All');



// --- Computed Properties for Charts ---

const filteredAttempts = computed(() => {

    let quizzes = attempts.value;

    if (trendChartSubject.value !== 'All') {

        quizzes = quizzes.filter(a => a.subject_name === trendChartSubject.value);

    }

    if (trendChartCount.value > 0) {

        return quizzes.slice(-trendChartCount.value);

    }

    return quizzes;

});



const latestAttemptsPath = computed(() => {

    const data = filteredAttempts.value.map(a => a.percentage);

    if (data.length < 2) return '';

    const maxVal = 100;

    let path = `M 0 ${200 - (data[0] / maxVal) * 200}`;

    data.forEach((p, i) => {

        if (i > 0) {

            const x = (500 / (data.length - 1)) * i;

            const y = 200 - (p / maxVal) * 200;

            path += ` L ${x} ${y}`;

        }

    });

    return path;

});



const averageAttemptsPath = computed(() => {

    const data = filteredAttempts.value.map(a => a.percentage);

    if (data.length < 2) return '';

    const maxVal = 100;

    let runningTotal = 0;

    const averages = data.map((score, index) => {

        runningTotal += score;

        return runningTotal / (index + 1);

    });

    let path = `M 0 ${200 - (averages[0] / maxVal) * 200}`;

    averages.forEach((p, i) => {

        if (i > 0) {

            const x = (500 / (averages.length - 1)) * i;

            const y = 200 - (p / maxVal) * 200;

            path += ` L ${x} ${y}`;

        }

    });

    return path;

});

</script>



<style scoped>

.admin-dashboard-page { background-color: #f8f9fa; min-height: 100vh; padding: 2rem 0; font-family: 'Segoe UI', 'Roboto', sans-serif; }

.page-header { text-align: center; margin-bottom: 2rem; }

.page-header h1 { font-weight: 700; }



/* KPI Cards */

.kpi-card { background-color: #fff; border: 1px solid #dee2e6; border-radius: 0.75rem; padding: 1.5rem; display: flex; align-items: center; }

.kpi-icon { font-size: 1.75rem; width: 60px; height: 60px; border-radius: 50%; margin-right: 1rem; color: white; display: flex; align-items: center; justify-content: center; }

.icon-subjects { background-color: #6f42c1; }

.icon-quizzes { background-color: #0d6efd; }

.icon-attempts { background-color: #fd7e14; }

.icon-score { background-color: #198754; }

.kpi-content { display: flex; flex-direction: column; }

.kpi-value { font-size: 1.75rem; font-weight: 700; }

.kpi-label { font-size: 0.9rem; color: #6c757d; }



/* Dashboard Cards */

.dashboard-card { background-color: #fff; border: 1px solid #dee2e6; border-radius: 0.75rem; height: 100%; }

.card-header { display: flex; justify-content: space-between; align-items: center; padding: 1rem 1.5rem; border-bottom: 1px solid #dee2e6; font-size: 1.2rem; font-weight: 600; }

.card-header.filter-header h3 { font-size: 1.2rem; }

.card-body { padding: 1.5rem; }

.border-bottom { border-bottom: 1px solid #dee2e6; }



/* Tables */

.table { margin-bottom: 0; }

.table thead th { border-bottom-width: 2px; }

.badge { font-weight: 600; }

.bg-danger-light { background-color: #f8d7da; }

.bg-success-light { background-color: #d1e7dd; }





/* Chart Styles */

.chart-title { font-weight: 600; color: #495057; margin-bottom: 1rem; }

.chart-wrapper { position: relative; padding-left: 35px; }

.y-axis-labels { position: absolute; left: 0; top: 0; bottom: 0; width: 30px; display: flex; flex-direction: column; justify-content: space-between; text-align: right; font-size: 0.8rem; color: #6c757d; }

.chart-container { height: 250px; display: flex; justify-content: space-around; align-items: flex-end; width: 100%; }

.chart-element { display: flex; flex-direction: column; align-items: center; height: 100%; }

.chart-bar-wrapper { display: flex; flex-direction: column; justify-content: flex-end; align-items: center; height: 100%; width: 60px; }

.chart-bar { width: 50px; background-color: #0d6efd; border-radius: 5px 5px 0 0; transition: height 0.5s ease-out; display: flex; justify-content: center; align-items: center; }

.bar-label-inside { color: white; font-size: 0.8rem; font-weight: 600; }

.chart-x-axis-label { margin-top: 0.75rem; font-weight: 600; font-size: 0.9rem; color: #495057; }

.line-chart-container { height: 250px; }

.line-chart-svg { width: 100%; height: 100%; }

.chart-path { stroke-linecap: round; stroke-linejoin: round; fill: none; stroke-width: 3; }

.attempts-path { stroke: #fd7e14; }

.avg-path { stroke: #198754; }



.mb-5 { margin-bottom: 3rem !important; }

</style>







================================================

FILE: frontend/src/views/admin/AdminSubjects.vue

================================================

<template>

  <div class="admin-dashboard">

    <div class="row g-0">

      <!-- Left Panel: Subject & Chapter List -->

      <div class="col-lg-4">

        <div class="left-panel">

          <header class="panel-header">

            <h3>Subject Management</h3>

            <button class="btn btn-primary btn-sm" @click="openSubjectCreateModal">

              <i class="bi bi-plus-circle-fill me-1"></i> New Subject

            </button>

          </header>



          <div class="subjects-list">

            <div v-for="subject in subjects" :key="subject.id" class="subject-card">

              <div class="subject-header">

                <div class="subject-title d-flex justify-content-between w-100">

                  <span>{{ subject.name }}</span>

                  <div class="d-flex justify-content-between gap-3">

                    <button type="button" class="btn btn-warning btn-sm" @click="openSubjectEditModal(subject)">Edit</button>

                    <button type="button" class="btn btn-danger btn-sm" @click="openSubjectDeleteModal(subject)">Delete</button>

                  </div>

                </div>

              </div>



              <div class="chapters-list">

                <div v-if="subject.chapters.length > 0">

                  <div

                    v-for="chapter in subject.chapters"

                    :key="chapter.id"

                    class="chapter-item"

                    :class="{ 'active': selectedChapter?.id === chapter.id }"

                    @click="selectChapter(chapter)"

                  >

                    <span>{{ chapter.name }}</span>

                    <!-- NEW: Chapter Action Buttons -->

                    <div class="chapter-actions">

                        <button class="btn btn-sm btn-light" @click.stop="openChapterEditModal(chapter)">

                            Edit

                        </button>

                        <button class="btn btn-sm btn-light text-danger ms-1" @click.stop="openChapterDeleteModal(chapter)">

                            Delete

                        </button>

                    </div>

                  </div>

                </div>

                <div v-else class="empty-chapters-message">

                  <small>No chapters found.</small>

                </div>

              </div>



              <div class="card-footer">

                <!-- MODIFIED: Button now opens the chapter creation modal -->

                <button class="btn btn-outline-secondary btn-sm w-100" @click="openChapterCreateModal(subject)">

                  <i class="bi bi-plus"></i> Add Chapter

                </button>

              </div>

            </div>

          </div>

        </div>

      </div>



      <!-- Right Panel: Canvas for Chapter Details -->

      <div class="col-lg-8">

        <div class="right-panel-canvas">

          <div v-if="selectedChapter" class="canvas-content">

            <h2>{{ selectedChapter.name }}</h2>

            <p class="text-muted">{{ selectedChapter.description }}</p>

                      <div class="quiz-management-section">

              <div class="section-header">

                <h3>Quizzes in this Chapter</h3>

                <button class="btn btn-success btn-sm" @click="createQuiz()">

                  <i class="bi bi-plus-circle-fill me-1"></i> Create Quiz

                </button>

              </div>

              <div v-if="quizzes.length > 0" class="quiz-list">

                <div v-for="quiz in quizzes" :key="quiz.id" class="quiz-item">

                  <div class="quiz-info">

                    <i class="bi bi-file-earmark-text-fill"></i>

                    <span>{{ quiz.name }}</span>

                  </div>

                  <div class="quiz-actions">

                    <button class="btn btn-sm btn-outline-secondary" @click="editQuiz(quiz)" :disabled="quiz.is_ended">Edit</button>

                    <button class="btn btn-sm btn-outline-danger ms-2" @click="deleteQuiz(quiz)" :disabled="quiz.is_ended">Delete</button>

                  </div>

                </div>

              </div>

              <div v-else class="empty-quizzes-message">

                <p>No quizzes have been created for this chapter yet.</p>

              </div>

            </div>

          </div>

          <div v-else class="canvas-placeholder">

            <i class="bi bi-arrow-left-circle"></i>

            <h3>Select a chapter</h3>

            <p>Choose a chapter from the list on the left to view its details.</p>

          </div>

        </div>

      </div>

    </div>



    <!-- Subject Modal -->

    <div v-if="showSubjectModal" class="modal-backdrop" @click.self="closeSubjectModal">

      <div class="modal-dialog">

        <div class="modal-content">

          <div class="modal-header">

            <h5 class="modal-title">{{ modalSubjectContent.title }}</h5>

            <button type="button" class="btn-close" @click="closeSubjectModal"></button>

          </div>

          <div class="modal-body">

            <form v-if="modalSubjectContent.mode === 'create' || modalSubjectContent.mode === 'edit'" @submit.prevent="handleSubjectFormSubmit">

              <div class="mb-3">

                <label for="subjectName" class="form-label">Subject Name</label>

                <input type="text" class="form-control" id="subjectName" v-model="formSubjectData.name" required>

              </div>

              <div class="mb-3">

                <label for="subjectDescription" class="form-label">Description</label>

                <textarea class="form-control" id="subjectDescription" rows="5" v-model="formSubjectData.description" required></textarea>

              </div>

            </form>

            <p v-if="modalSubjectContent.mode === 'delete'">

              Are you sure you want to delete the subject "<strong>{{ formSubjectData.name }}</strong>"? This action cannot be undone.

            </p>

          </div>

          <div class="modal-footer d-flex justify-content-between">

            <button type="button" class="btn btn-secondary" @click="closeSubjectModal">Cancel</button>

            <button type="button" class="btn" :class="modalSubjectContent.confirmClass" @click="handleSubjectFormSubmit">

              {{ modalSubjectContent.confirmText }}

            </button>

          </div>

        </div>

      </div>

    </div>



    <!-- NEW: Chapter Modal -->

    <div v-if="showChapterModal" class="modal-backdrop" @click.self="closeChapterModal">

      <div class="modal-dialog">

        <div class="modal-content">

          <div class="modal-header">

            <h5 class="modal-title">{{ modalChapterContent.title }}</h5>

            <button type="button" class="btn-close" @click="closeChapterModal"></button>

          </div>

          <div class="modal-body">

            <form v-if="modalChapterContent.mode === 'create' || modalChapterContent.mode === 'edit'" @submit.prevent="handleChapterFormSubmit">

              <div class="mb-3">

                <label for="chapterName" class="form-label">Chapter Name</label>

                <input type="text" class="form-control" id="chapterName" v-model="formChapterData.name" required>

              </div>

              <div class="mb-3">

                <label for="chapterDescription" class="form-label">Description</label>

                <textarea class="form-control" id="chapterDescription" rows="5" v-model="formChapterData.description" required></textarea>

              </div>

            </form>

            <p v-if="modalChapterContent.mode === 'delete'">

              Are you sure you want to delete the chapter "<strong>{{ formChapterData.name }}</strong>"?

            </p>

          </div>

          <div class="modal-footer d-flex justify-content-between">

            <button type="button" class="btn btn-secondary" @click="closeChapterModal">Cancel</button>

            <button type="button" class="btn" :class="modalChapterContent.confirmClass" @click="handleChapterFormSubmit">

              {{ modalChapterContent.confirmText }}

            </button>

          </div>

        </div>

      </div>

    </div>

    <!-- Quiz Delete Modal -->

    <div v-if="showQuizModal" class="modal-backdrop" @click.self="closeQuizModal">

      <div class="modal-dialog">

        <div class="modal-content">

          <div class="modal-header">

            <h5 class="modal-title">{{ modalQuizContent.title }}</h5>

            <button type="button" class="btn-close" @click="closeQuizModal"></button>

          </div>

          <div class="modal-body">

            <p>

              Are you sure you want to delete the quiz "<strong>{{ formQuizData.name }} {{ formQuizData.id }}</strong>"? This action cannot be undone.

            </p>

          </div>

          <div class="modal-footer d-flex justify-content-between">

            <button type="button" class="btn btn-secondary" @click="closeQuizModal">Cancel</button>

            <button type="button" class="btn" :class="modalQuizContent.confirmClass" @click="handleQuizFormSubmit">

              {{ modalQuizContent.confirmText }}

            </button>

          </div>

        </div>

      </div>

    </div>

  </div>

</template>



<script setup>



import { ref, reactive, onMounted } from 'vue';

import { useAdminSubjectStore } from '@/stores/admin/adminSubjectStore';

import { useAdminChapterStore } from '@/stores/admin/adminChapterStore';

import { useAdminQuizStore } from '@/stores/admin/adminQuizStore';

import { storeToRefs } from 'pinia';

import { useRouter } from 'vue-router';





const adminSubjectStore = useAdminSubjectStore();

const adminChapterStore = useAdminChapterStore();

const adminQuizStore = useAdminQuizStore();



const { subjects } = storeToRefs(adminSubjectStore);



const router = useRouter();



// --- State Management ---

const selectedChapter = ref(null);



// Subject Modal State

const showSubjectModal = ref(false);

const modalSubjectContent = ref({});

const formSubjectData = reactive({ id: null, name: '', description: '' });

const quizzes = ref([])



// --- Functions ---

const selectChapter = (chapter) => {

  selectedChapter.value = chapter;

  adminQuizStore.selectChapter(chapter);

  quizzes.value = chapter.quizzes;

  console.log(quizzes.value);

};



// Subject Modal Functions

const openSubjectCreateModal = () => {

  modalSubjectContent.value = { mode: 'create', title: 'Create New Subject', confirmText: 'Create Subject', confirmClass: 'btn-primary' };

  formSubjectData.id = null;

  formSubjectData.name = '';

  formSubjectData.description = '';

  showSubjectModal.value = true;

};

const openSubjectEditModal = (subject) => {

  modalSubjectContent.value = { mode: 'edit', title: `Edit Subject: ${subject.name}`, confirmText: 'Save Changes', confirmClass: 'btn-success' };

  formSubjectData.id = subject.id;

  formSubjectData.name = subject.name;

  formSubjectData.description = subject.description;

  showSubjectModal.value = true;

};

const openSubjectDeleteModal = (subject) => {

  modalSubjectContent.value = { mode: 'delete', title: 'Confirm Deletion', confirmText: 'Delete Subject', confirmClass: 'btn-danger' };

  formSubjectData.id = subject.id;

  formSubjectData.name = subject.name;

  showSubjectModal.value = true;

};

const closeSubjectModal = () => {

  showSubjectModal.value = false;

};



const handleSubjectFormSubmit = async () => {

  // console.log('Form Submitted!', { mode: modalContent.value.mode, data: formData });



  switch (modalSubjectContent.value.mode) {

    case 'create':

      await adminSubjectStore.createSubject(formSubjectData);

      alert('Subject Created');

      break;

    case 'edit':

      await adminSubjectStore.updateSubject(formSubjectData);

      alert('Changes Saved');

      break;

    case 'delete':

      await adminSubjectStore.deleteSubject(formSubjectData);

      alert('Subject Deleted');

      break;

    default:

      break;

  }

  closeSubjectModal();

}



// NEW: Chapter Modal State

const showChapterModal = ref(false);

const modalChapterContent = ref({});

const formChapterData = reactive({ id: null, name: '', description: '', subject_id: null });



// NEW: Chapter Modal Functions

const openChapterCreateModal = (subject) => {

  modalChapterContent.value = { mode: 'create', title: `Create Chapter for ${subject.name}`, confirmText: 'Create Chapter', confirmClass: 'btn-primary' };

  formChapterData.id = null;

  formChapterData.name = '';

  formChapterData.description = '';

  formChapterData.subject_id = subject.id; // Important: associate with the correct subject

  showChapterModal.value = true;

};



const openChapterEditModal = (chapter) => {

  modalChapterContent.value = { mode: 'edit', title: `Edit Chapter: ${chapter.name}`, confirmText: 'Save Changes', confirmClass: 'btn-success' };

  formChapterData.id = chapter.id;

  formChapterData.name = chapter.name;

  formChapterData.description = chapter.description;

  showChapterModal.value = true;

};



const openChapterDeleteModal = (chapter) => {

  modalChapterContent.value = { mode: 'delete', title: 'Confirm Deletion', confirmText: 'Delete Chapter', confirmClass: 'btn-danger' };

  formChapterData.id = chapter.id;

  formChapterData.name = chapter.name;

  showChapterModal.value = true;

};



const closeChapterModal = () => {

  showChapterModal.value = false;

};



const handleChapterFormSubmit = async () => {

  // console.log('Form Submitted!', { mode: modalContent.value.mode, data: formData });



  switch (modalChapterContent.value.mode) {

    case 'create':

      await adminChapterStore.createChapter(formChapterData);

      alert('Chapter Created');

      router.push('/admin/subjects');

      break;

    case 'edit':

      await adminChapterStore.updateChapter(formChapterData);

      alert('Changes Saved');

      router.push('/admin/subjects');

      break;

    case 'delete':

      await adminChapterStore.deleteChapter(formChapterData);

      alert('Chapter Deleted');

      router.push('/admin/subjects');

      break;

    default:

      break;

  }

  closeChapterModal();

}





// --- Quiz Modal State ---

const showQuizModal = ref(false);

const modalQuizContent = ref({});

const formQuizData = reactive({ id: null, name: '' });



// --- Quiz Modal Functions ---

const openQuizDeleteModal = (quiz) => {

    modalQuizContent.value = {

        mode: 'delete',

        title: 'Confirm Quiz Deletion',

        confirmText: 'Delete Quiz',

        confirmClass: 'btn-danger'

    };

    formQuizData.id = quiz.id;

    formQuizData.name = quiz.name;

    showQuizModal.value = true;

};



const closeQuizModal = () => {

    showQuizModal.value = false;

};





const createQuiz = () => {

  router.push('/admin/quiz/create');

}



const editQuiz = (quiz) => {

  adminQuizStore.selectQuiz(quiz);

  router.push(`/admin/quiz/edit/${quiz.id}`);

}



const deleteQuiz = (quiz) => {

  openQuizDeleteModal(quiz);

};



const handleQuizFormSubmit = async () => {

    await adminQuizStore.deleteQuiz(formQuizData);

    alert('Quiz deleted successfully');

    closeQuizModal();

};



onMounted(() => {

  adminSubjectStore.fetchSubjects();

});



</script>



<style scoped>

/* UNCHANGED STYLES */

.admin-dashboard { display: flex; min-height: 100vh; font-family: 'Segoe UI', 'Roboto', sans-serif; }

.row { width: 100%; }

.left-panel { background-color: #f8f9fa; border-right: 1px solid #dee2e6; height: 100vh; display: flex; flex-direction: column; overflow-y: auto; }

.panel-header { display: flex; justify-content: space-between; align-items: center; padding: 1rem 1.25rem; border-bottom: 1px solid #dee2e6; background-color: #fff; position: sticky; top: 0; z-index: 10; }

.panel-header h3 { margin: 0; font-size: 1.25rem; font-weight: 600; }

.subjects-list { padding: 1rem; display: flex; flex-direction: column; gap: 1rem; }

.subject-card { background-color: #ffffff; border: 1px solid #dee2e6; border-radius: 0.5rem; }

.subject-header { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 1rem; border-bottom: 1px solid #e9ecef; }

.subject-title { display: flex; align-items: center; gap: 0.5rem; font-weight: 800; font-size: 1.5rem; }

.chapters-list { padding: 0.5rem; }

.chapter-item { display: flex; justify-content: space-between; align-items: center; padding: 0.75rem 1rem; border-radius: 0.375rem; cursor: pointer; font-weight: 500; transition: background-color 0.2s ease, color 0.2s ease; }

.chapter-item:hover { background-color: #e9ecef; }

.chapter-item.active { background-color: #0d6efd; color: white; font-weight: 600; }

.empty-chapters-message { text-align: center; padding: 1rem; color: #6c757d; }

.card-footer { background-color: transparent; border-top: 1px solid #e9ecef; padding: 0.75rem; }

.right-panel-canvas { height: 100vh; padding: 2.5rem; overflow-y: auto; }

.canvas-placeholder { display: flex; flex-direction: column; align-items: center; justify-content: center; height: 100%; text-align: center; color: #adb5bd; }

.canvas-placeholder .bi { font-size: 4rem; margin-bottom: 1rem; }

.canvas-placeholder h3 { font-weight: 600; color: #6c757d; }

.canvas-content h2 { font-weight: 700; }



/* NEW: Chapter action buttons styling */

.chapter-actions { opacity: 0.5; transition: opacity 0.2s ease-in-out; }

.chapter-item:hover .chapter-actions { opacity: 1; }



/* MODAL STYLES */

.modal-backdrop { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); display: flex; justify-content: center; align-items: center; z-index: 1050; }

.modal-dialog { width: 100%; max-width: 500px; margin: 1.75rem auto; }

.modal-content { background-color: #fff; border-radius: 0.5rem; box-shadow: 0 5px 15px rgba(0, 0, 0, 0.5); }

.modal-header { padding: 1rem 1.5rem; border-bottom: 1px solid #dee2e6; }

.modal-body { padding: 1.5rem; }

.modal-footer { padding: 1rem 1.5rem; border-top: 1px solid #dee2e6; }



/* NEW STYLES FOR QUIZ LIST */

.quiz-management-section .section-header {

    display: flex;

    justify-content: space-between;

    align-items: center;

    margin-bottom: 1.5rem;

}

.quiz-management-section .section-header h3 {

    margin: 0;

    font-size: 1.5rem;

    font-weight: 600;

}

.quiz-list {

    display: flex;

    flex-direction: column;

    gap: 0.75rem;

}

.quiz-item {

    display: flex;

    justify-content: space-between;

    align-items: center;

    background-color: #f8f9fa;

    padding: 1rem 1.25rem;

    border: 1px solid #dee2e6;

    border-radius: 0.5rem;

}

.quiz-info {

    display: flex;

    align-items: center;

    gap: 0.75rem;

    font-weight: 500;

}

.quiz-info .bi {

    color: #0d6efd;

}

.empty-quizzes-message {

    text-align: center;

    padding: 2rem;

    background-color: #f8f9fa;

    border-radius: 0.5rem;

    border: 1px dashed #ced4da;

    color: #6c757d;

}

</style>







================================================

FILE: frontend/src/views/admin/AdminUsersView.vue

================================================

<template>

  <div class="admin-users-page">

    <div class="container">

      <!-- 1. Page Header -->

      <header class="page-header">

        <h1>User Management</h1>

        <p class="text-muted">View, search, and manage all users on the platform.</p>

      </header>



      <!-- 2. High-Level KPI Cards -->

      <div class="row g-4 mb-4">

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-total"><i class="bi bi-people-fill"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ summary.total_users }}</span>

              <span class="kpi-label">Total Users</span>

            </div>

          </div>

        </div>

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-active"><i class="bi bi-person-check-fill"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ summary.active_today }}</span>

              <span class="kpi-label">Users Active Today</span>

            </div>

          </div>

        </div>

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-new"><i class="bi bi-person-plus-fill"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ summary.last_30days_newUsers }}</span>

              <span class="kpi-label">New Users (30d)</span>

            </div>

          </div>

        </div>

        <div class="col-md-6 col-lg-3">

          <div class="kpi-card">

            <div class="kpi-icon icon-suspended"><i class="bi bi-person-x-fill"></i></div>

            <div class="kpi-content">

              <span class="kpi-value">{{ summary.suspended_accounts }}</span>

              <span class="kpi-label">Suspended Accounts</span>

            </div>

          </div>

        </div>

      </div>



      <!-- 3. Filter & Search Bar -->

      <div class="card filter-card">

        <div class="card-body d-flex gap-3">

          <div class="input-group">

            <span class="input-group-text"><i class="bi bi-search"></i></span>

            <input type="text" class="form-control" placeholder="Search by name or email..." v-model="searchQuery">

          </div>

          <select class="form-select" v-model="statusFilter">

            <option value="All">All Statuses</option>

            <option value="Active">Active</option>

            <option value="Suspended">Suspended</option>

          </select>

        </div>

      </div>



      <!-- 4. Users Table -->

      <div class="card users-table-card">

        <div class="table-responsive table-scroll-wrapper">

          <table class="table table-hover align-middle mb-0">

            <thead>

              <tr>

                <th>User</th>

                <th>Quizzes Attempted</th>

                <th>Average Score</th>

                <th>Last Active</th>

                <th>Status</th>

                <th>Actions</th>

              </tr>

            </thead>

            <tbody>

              <tr v-for="user in filteredUsers" :key="user.id">

                <td>

                  <div class="user-info">

                    <!-- <img :src="user.avatar" class="user-avatar" alt="Avatar"> -->

                    <div>

                      <div class="user-name">{{ user.username }}</div>

                      <div class="user-email">{{ user.email }}</div>

                    </div>

                  </div>

                </td>

                <td>{{ user.attempts.length }}</td>

                <td>{{ getAverage(user) }}%</td>

                <td>{{ formatDate(user.last_login) }}</td>

                <td>

                  <span class="badge" :class="user.status === 'Active' ? 'bg-success-light text-success' : 'bg-danger-light text-danger'">

                    {{ user.status }}

                  </span>

                </td>

                <td>

                  <div class="action-buttons">

                    <button class="btn btn-sm btn-outline-secondary" @click="openProfileModal(user)">View Profile</button>

                    <button class="btn btn-sm btn-outline-danger ms-2">Suspend</button>

                  </div>

                </td>

              </tr>

            </tbody>

          </table>

        </div>

      </div>

    </div>



    <!-- MODIFIED: User Profile Modal with full details -->

    <div v-if="showProfileModal && selectedUser" class="modal-backdrop" @click.self="closeProfileModal">

      <div class="modal-dialog modal-lg">

        <div class="modal-content">

          <div class="modal-header">

            <h5 class="modal-title">User Profile: {{ selectedUser.name }}</h5>

            <button type="button" class="btn-close" @click="closeProfileModal"></button>

          </div>

          <div class="modal-body">

            <div class="row">

              <!-- Left Side: Avatar & Personal Info -->

              <div class="col-md-5">

                <!-- <div class="text-center mb-4">

                  <img :src="selectedUser.avatar.replace('40x40', '120x120')" class="profile-modal-avatar" alt="Avatar">

                </div> -->

                <h5>Personal Details</h5>

                <dl class="details-list">

                  <dt>Username</dt><dd>{{ selectedUser.name }}</dd>

                  <dt>Email</dt><dd>{{ selectedUser.email }}</dd>

                  <dt>Phone</dt><dd>{{ selectedUser.phone }}</dd>

                  <dt>Gender</dt><dd>{{ selectedUser.gender }}</dd>

                  <dt>Date of Birth</dt><dd>{{ formatDate(selectedUser.dob) }}</dd>

                </dl>

              </div>

              <!-- Right Side: Academic & Account Info -->

              <div class="col-md-7">

                <h5>Academic Background</h5>

                <dl class="details-list">

                  <dt>Qualification</dt><dd>{{ selectedUser.qualification }}</dd>

                  <dt>College</dt><dd>{{ selectedUser.college }}</dd>

                </dl>

                <hr class="my-4">

                <h5>Account Activity</h5>

                <dl class="details-list">

                  <dt>User ID</dt><dd>{{ selectedUser.id }}</dd>

                  <dt>Joining Date</dt><dd>{{ formatDate(selectedUser.joiningDate) }}</dd>

                  <dt>Last Login</dt><dd>{{ formatDate(selectedUser.last_login) }}</dd>

                </dl>

              </div>

            </div>

          </div>

        </div>

      </div>

    </div>

  </div>

</template>



<script setup>

import apiClient from '@/components/api/axios';

import { formatDate } from '@/composables/useDateFormat';

import { ref, computed, onMounted } from 'vue';





// --- State for Profile Modal ---

const showProfileModal = ref(false);

const selectedUser = ref(null);



const users = ref([]);



const fetchUsers = async () => {

  const response = await apiClient.get('/users/all')

  users.value = response.data.users;

}



const today = new Date();

const daysAgo = (days) => {

  const d = new Date();

  d.setDate(d.getDate() - days);

  return d;

};



const summary = computed(() => ({

  total_users: users.value.length,

  active_today: users.value.reduce(

    (count, user) =>

      count + (formatDate(user.last_login) === formatDate(today) ? 1 : 0),

    0

  ),

  last_30days_newUsers: users.value.reduce(

    (count, user) =>

      count + (new Date(user.joiningDate) >= daysAgo(30) ? 1 : 0),

    0

  ),

  suspended_accounts: users.value.reduce(

    (count, user) => count + (user.status === 'Suspended' ? 1 : 0),

    0

  )

}));



const getAverage = (user) => {

  const total = user.attempts.reduce((sum, attempt) => sum + attempt.percentage, 0);

  return Math.round(total / user.attempts.length);

};



// --- State for Filters ---

const searchQuery = ref('');

const statusFilter = ref('All');



// --- Filtering Logic ---

const filteredUsers = computed(() => {

  let userList = [...users.value];

  if (statusFilter.value !== 'All') {

    userList = userList.filter(user => user.status === statusFilter.value);

  }

  if (searchQuery.value) {

    const query = searchQuery.value.toLowerCase();

    userList = userList.filter(user =>

      user.username.toLowerCase().includes(query) ||

      user.email.toLowerCase().includes(query)

    );

  }

  return userList;

});



// --- Modal Functions ---

const openProfileModal = (user) => {

  selectedUser.value = user;

  showProfileModal.value = true;

};

const closeProfileModal = () => {

  showProfileModal.value = false;

  selectedUser.value = null;

};



onMounted(() => fetchUsers());



</script>



<style scoped>

.admin-users-page { background-color: #f8f9fa; min-height: 100vh; padding: 2rem 0; font-family: 'Segoe UI', 'Roboto', sans-serif; }

.page-header { text-align: center; margin-bottom: 2rem; }

.page-header h1 { font-weight: 700; }



/* KPI Cards */

.kpi-card { background-color: #fff; border: 1px solid #dee2e6; border-radius: 0.75rem; padding: 1.5rem; display: flex; align-items: center; }

.kpi-icon { font-size: 1.75rem; width: 60px; height: 60px; border-radius: 50%; margin-right: 1rem; color: white; display: flex; align-items: center; justify-content: center; }

.icon-total { background-color: #0d6efd; }

.icon-active { background-color: #198754; }

.icon-new { background-color: #6f42c1; }

.icon-suspended { background-color: #dc3545; }

.kpi-content { display: flex; flex-direction: column; }

.kpi-value { font-size: 1.75rem; font-weight: 700; }

.kpi-label { font-size: 0.9rem; color: #6c757d; }



/* Filter Card */

.filter-card { margin-bottom: 1.5rem; border: 1px solid #dee2e6; }

.filter-card .form-select { max-width: 200px; }



/* Users Table */

.users-table-card { border: 1px solid #dee2e6; border-radius: 0.75rem; overflow: hidden; }

.table-scroll-wrapper { max-height: 60vh; overflow-y: auto; }

.table thead th { background-color: #f8f9fa; font-weight: 600; color: #495057; position: sticky; top: 0; z-index: 1; }

.table td, .table th { vertical-align: middle; }

.user-info { display: flex; align-items: center; gap: 1rem; }

.user-avatar { width: 40px; height: 40px; border-radius: 50%; }

.user-name { font-weight: 600; }

.user-email { font-size: 0.9rem; color: #6c757d; }

.badge { padding: 0.4rem 0.75rem; font-weight: 600; font-size: 0.8rem; }

.bg-success-light { background-color: #d1e7dd; }

.bg-danger-light { background-color: #f8d7da; }



/* Profile Modal Styles */

.modal-backdrop {

  position: fixed;

  top: 0;

  left: 0;

  width: 100%;

  height: 100%;

  background-color: rgba(0, 0, 0, 0.5);

  display: flex;

  justify-content: center;

  align-items: center;

  z-index: 1050;

  padding: 1rem;

  box-sizing: border-box;

}



.modal-dialog {

  max-width: 1200px;

  background-color: #fff8e1; /* softened orange tone */

  border-radius: 12px;

  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.2);

  padding: 2rem;

  width: 100%;

}



.profile-modal-avatar {

  width: 120px;

  height: 120px;

  border-radius: 50%;

  border: 4px solid #fff;

  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);

  margin: 0 auto 1rem;

  display: block;

}



.details-list {

  display: grid;

  grid-template-columns: 120px 1fr;

  gap: 1rem 1.5rem;

  margin-top: 1.5rem;

}



.details-list dt {

  font-weight: 600;

  color: #555;

  text-align: right;

}



.details-list dd {

  margin: 0;

  font-weight: 500;

  color: #222;

  word-break: break-word;

}



@media (max-width: 600px) {

  .details-list {

    grid-template-columns: 1fr;

    text-align: left;

  }



  .details-list dt {

    text-align: left;

  }

}



</style>



